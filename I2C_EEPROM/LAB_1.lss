
LAB_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000046ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016e  00800060  000046ea  0000477e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000b1  008001ce  008001ce  000048ec  2**0
                  ALLOC
  3 .stab         00004e00  00000000  00000000  000048ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001685  00000000  00000000  000096ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000ad71  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000aeb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000b021  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000cc6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000db55  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000e904  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ea64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ecf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f4bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 57 20 	jmp	0x40ae	; 0x40ae <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ee       	ldi	r30, 0xEA	; 234
      68:	f6 e4       	ldi	r31, 0x46	; 70
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3c       	cpi	r26, 0xCE	; 206
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ae ec       	ldi	r26, 0xCE	; 206
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 37       	cpi	r26, 0x7F	; 127
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 27 21 	call	0x424e	; 0x424e <main>
      8a:	0c 94 73 23 	jmp	0x46e6	; 0x46e6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3c 23 	jmp	0x4678	; 0x4678 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e2       	ldi	r26, 0x20	; 32
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 58 23 	jmp	0x46b0	; 0x46b0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 48 23 	jmp	0x4690	; 0x4690 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 64 23 	jmp	0x46c8	; 0x46c8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 48 23 	jmp	0x4690	; 0x4690 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 64 23 	jmp	0x46c8	; 0x46c8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3c 23 	jmp	0x4678	; 0x4678 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e2       	ldi	r24, 0x20	; 32
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 58 23 	jmp	0x46b0	; 0x46b0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 48 23 	jmp	0x4690	; 0x4690 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 64 23 	jmp	0x46c8	; 0x46c8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 48 23 	jmp	0x4690	; 0x4690 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 64 23 	jmp	0x46c8	; 0x46c8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 48 23 	jmp	0x4690	; 0x4690 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 64 23 	jmp	0x46c8	; 0x46c8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 68 23 	jmp	0x46d0	; 0x46d0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_INIT>:
#include "STD_Types.h"
#include "BIT_MATH.h"
#include "MEMMAP.h"
#include "ADC.h"

void ADC_INIT(void) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	// Set Channel
	ADMUX = ADC_CHANNEL;
     b4e:	e7 e2       	ldi	r30, 0x27	; 39
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	80 83       	st	Z, r24
	// Reference Selection Bits
	SET_BIT(ADMUX, 6);
     b56:	a7 e2       	ldi	r26, 0x27	; 39
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	e7 e2       	ldi	r30, 0x27	; 39
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	80 64       	ori	r24, 0x40	; 64
     b62:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, 7);
     b64:	a7 e2       	ldi	r26, 0x27	; 39
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	e7 e2       	ldi	r30, 0x27	; 39
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	8f 77       	andi	r24, 0x7F	; 127
     b70:	8c 93       	st	X, r24
	// SET PRESCALER
	SET_BIT(ADCSRA, 0);
     b72:	a6 e2       	ldi	r26, 0x26	; 38
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	e6 e2       	ldi	r30, 0x26	; 38
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	81 60       	ori	r24, 0x01	; 1
     b7e:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, 1);
     b80:	a6 e2       	ldi	r26, 0x26	; 38
     b82:	b0 e0       	ldi	r27, 0x00	; 0
     b84:	e6 e2       	ldi	r30, 0x26	; 38
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	80 81       	ld	r24, Z
     b8a:	82 60       	ori	r24, 0x02	; 2
     b8c:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, 2);
     b8e:	a6 e2       	ldi	r26, 0x26	; 38
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	e6 e2       	ldi	r30, 0x26	; 38
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	84 60       	ori	r24, 0x04	; 4
     b9a:	8c 93       	st	X, r24
	// ADC Enable
	SET_BIT(ADCSRA, 7);
     b9c:	a6 e2       	ldi	r26, 0x26	; 38
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	e6 e2       	ldi	r30, 0x26	; 38
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	80 68       	ori	r24, 0x80	; 128
     ba8:	8c 93       	st	X, r24
	// ADC Interrupt Enable
	SET_BIT(ADCSRA, 3);
     baa:	a6 e2       	ldi	r26, 0x26	; 38
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	e6 e2       	ldi	r30, 0x26	; 38
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	88 60       	ori	r24, 0x08	; 8
     bb6:	8c 93       	st	X, r24
	// Enable Global Interrupt
	SET_BIT(SREG, 7);
     bb8:	af e5       	ldi	r26, 0x5F	; 95
     bba:	b0 e0       	ldi	r27, 0x00	; 0
     bbc:	ef e5       	ldi	r30, 0x5F	; 95
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	80 81       	ld	r24, Z
     bc2:	80 68       	ori	r24, 0x80	; 128
     bc4:	8c 93       	st	X, r24

}
     bc6:	cf 91       	pop	r28
     bc8:	df 91       	pop	r29
     bca:	08 95       	ret

00000bcc <ADC_START_CONVERSION>:

void ADC_START_CONVERSION(uint8 channel) {
     bcc:	df 93       	push	r29
     bce:	cf 93       	push	r28
     bd0:	0f 92       	push	r0
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
     bd6:	89 83       	std	Y+1, r24	; 0x01
	//Choose Channel
	ADMUX &= 0xf0;
     bd8:	a7 e2       	ldi	r26, 0x27	; 39
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	e7 e2       	ldi	r30, 0x27	; 39
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	80 7f       	andi	r24, 0xF0	; 240
     be4:	8c 93       	st	X, r24
	ADMUX |= channel;
     be6:	a7 e2       	ldi	r26, 0x27	; 39
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	e7 e2       	ldi	r30, 0x27	; 39
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	90 81       	ld	r25, Z
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
     bf2:	89 2b       	or	r24, r25
     bf4:	8c 93       	st	X, r24
	// ADC Start Conversion
	SET_BIT(ADCSRA, 6);
     bf6:	a6 e2       	ldi	r26, 0x26	; 38
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e6 e2       	ldi	r30, 0x26	; 38
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	80 64       	ori	r24, 0x40	; 64
     c02:	8c 93       	st	X, r24
}
     c04:	0f 90       	pop	r0
     c06:	cf 91       	pop	r28
     c08:	df 91       	pop	r29
     c0a:	08 95       	ret

00000c0c <ADC_READ>:
uint16 ADC_READ(void) {
     c0c:	df 93       	push	r29
     c0e:	cf 93       	push	r28
     c10:	00 d0       	rcall	.+0      	; 0xc12 <ADC_READ+0x6>
     c12:	cd b7       	in	r28, 0x3d	; 61
     c14:	de b7       	in	r29, 0x3e	; 62
	uint16 value;
	value = ADC;
     c16:	e4 e2       	ldi	r30, 0x24	; 36
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	91 81       	ldd	r25, Z+1	; 0x01
     c1e:	9a 83       	std	Y+2, r25	; 0x02
     c20:	89 83       	std	Y+1, r24	; 0x01
	return value;
     c22:	89 81       	ldd	r24, Y+1	; 0x01
     c24:	9a 81       	ldd	r25, Y+2	; 0x02

}
     c26:	0f 90       	pop	r0
     c28:	0f 90       	pop	r0
     c2a:	cf 91       	pop	r28
     c2c:	df 91       	pop	r29
     c2e:	08 95       	ret

00000c30 <DIO_INIT>:
#include "STD_Types.h"
#include "BIT_MATH.h"
#include "MEMMAP.h"
#include "DIO.h"

void DIO_INIT(void) {
     c30:	df 93       	push	r29
     c32:	cf 93       	push	r28
     c34:	cd b7       	in	r28, 0x3d	; 61
     c36:	de b7       	in	r29, 0x3e	; 62
     c38:	6a 97       	sbiw	r28, 0x1a	; 26
     c3a:	0f b6       	in	r0, 0x3f	; 63
     c3c:	f8 94       	cli
     c3e:	de bf       	out	0x3e, r29	; 62
     c40:	0f be       	out	0x3f, r0	; 63
     c42:	cd bf       	out	0x3d, r28	; 61
	uint8 i,PinValue,PortState;
	uint8* reg[8]={DDRA_ADDRESS,DDRB_ADDRESS,DDRC_ADDRESS,DDRD_ADDRESS,
			PORTA_ADDRESS,PORTB_ADDRESS,PORTC_ADDRESS,PORTD_ADDRESS};
     c44:	9e 01       	movw	r18, r28
     c46:	2c 5f       	subi	r18, 0xFC	; 252
     c48:	3f 4f       	sbci	r19, 0xFF	; 255
     c4a:	3f 8b       	std	Y+23, r19	; 0x17
     c4c:	2e 8b       	std	Y+22, r18	; 0x16
     c4e:	82 e6       	ldi	r24, 0x62	; 98
     c50:	91 e0       	ldi	r25, 0x01	; 1
     c52:	99 8f       	std	Y+25, r25	; 0x19
     c54:	88 8f       	std	Y+24, r24	; 0x18
     c56:	90 e1       	ldi	r25, 0x10	; 16
     c58:	9a 8f       	std	Y+26, r25	; 0x1a
     c5a:	e8 8d       	ldd	r30, Y+24	; 0x18
     c5c:	f9 8d       	ldd	r31, Y+25	; 0x19
     c5e:	00 80       	ld	r0, Z
     c60:	28 8d       	ldd	r18, Y+24	; 0x18
     c62:	39 8d       	ldd	r19, Y+25	; 0x19
     c64:	2f 5f       	subi	r18, 0xFF	; 255
     c66:	3f 4f       	sbci	r19, 0xFF	; 255
     c68:	39 8f       	std	Y+25, r19	; 0x19
     c6a:	28 8f       	std	Y+24, r18	; 0x18
     c6c:	ee 89       	ldd	r30, Y+22	; 0x16
     c6e:	ff 89       	ldd	r31, Y+23	; 0x17
     c70:	00 82       	st	Z, r0
     c72:	2e 89       	ldd	r18, Y+22	; 0x16
     c74:	3f 89       	ldd	r19, Y+23	; 0x17
     c76:	2f 5f       	subi	r18, 0xFF	; 255
     c78:	3f 4f       	sbci	r19, 0xFF	; 255
     c7a:	3f 8b       	std	Y+23, r19	; 0x17
     c7c:	2e 8b       	std	Y+22, r18	; 0x16
     c7e:	3a 8d       	ldd	r19, Y+26	; 0x1a
     c80:	31 50       	subi	r19, 0x01	; 1
     c82:	3a 8f       	std	Y+26, r19	; 0x1a
     c84:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c86:	88 23       	and	r24, r24
     c88:	41 f7       	brne	.-48     	; 0xc5a <DIO_INIT+0x2a>
	for(i=0;i<PIN_LIMIT;i++){
     c8a:	1b 82       	std	Y+3, r1	; 0x03
     c8c:	0a c1       	rjmp	.+532    	; 0xea2 <DIO_INIT+0x272>
		PinValue=i%8;
     c8e:	8b 81       	ldd	r24, Y+3	; 0x03
     c90:	87 70       	andi	r24, 0x07	; 7
     c92:	8a 83       	std	Y+2, r24	; 0x02
		PortState=i/8;
     c94:	8b 81       	ldd	r24, Y+3	; 0x03
     c96:	86 95       	lsr	r24
     c98:	86 95       	lsr	r24
     c9a:	86 95       	lsr	r24
     c9c:	89 83       	std	Y+1, r24	; 0x01
		switch(DIO_PinConfiguration[i]){
     c9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ca0:	88 2f       	mov	r24, r24
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	fc 01       	movw	r30, r24
     ca6:	e8 5d       	subi	r30, 0xD8	; 216
     ca8:	fe 4f       	sbci	r31, 0xFE	; 254
     caa:	80 81       	ld	r24, Z
     cac:	e8 2f       	mov	r30, r24
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	fd 8b       	std	Y+21, r31	; 0x15
     cb2:	ec 8b       	std	Y+20, r30	; 0x14
     cb4:	2c 89       	ldd	r18, Y+20	; 0x14
     cb6:	3d 89       	ldd	r19, Y+21	; 0x15
     cb8:	21 30       	cpi	r18, 0x01	; 1
     cba:	31 05       	cpc	r19, r1
     cbc:	09 f4       	brne	.+2      	; 0xcc0 <DIO_INIT+0x90>
     cbe:	66 c0       	rjmp	.+204    	; 0xd8c <DIO_INIT+0x15c>
     cc0:	8c 89       	ldd	r24, Y+20	; 0x14
     cc2:	9d 89       	ldd	r25, Y+21	; 0x15
     cc4:	83 30       	cpi	r24, 0x03	; 3
     cc6:	91 05       	cpc	r25, r1
     cc8:	09 f4       	brne	.+2      	; 0xccc <DIO_INIT+0x9c>
     cca:	8d c0       	rjmp	.+282    	; 0xde6 <DIO_INIT+0x1b6>
     ccc:	ec 89       	ldd	r30, Y+20	; 0x14
     cce:	fd 89       	ldd	r31, Y+21	; 0x15
     cd0:	30 97       	sbiw	r30, 0x00	; 0
     cd2:	09 f0       	breq	.+2      	; 0xcd6 <DIO_INIT+0xa6>
     cd4:	e3 c0       	rjmp	.+454    	; 0xe9c <DIO_INIT+0x26c>
		case INPUT_PULLUP:
			CLR_BIT(*reg[PortState],PinValue);
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	88 2f       	mov	r24, r24
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	9c 01       	movw	r18, r24
     cde:	22 0f       	add	r18, r18
     ce0:	33 1f       	adc	r19, r19
     ce2:	ce 01       	movw	r24, r28
     ce4:	01 96       	adiw	r24, 0x01	; 1
     ce6:	82 0f       	add	r24, r18
     ce8:	93 1f       	adc	r25, r19
     cea:	fc 01       	movw	r30, r24
     cec:	33 96       	adiw	r30, 0x03	; 3
     cee:	a0 81       	ld	r26, Z
     cf0:	b1 81       	ldd	r27, Z+1	; 0x01
     cf2:	89 81       	ldd	r24, Y+1	; 0x01
     cf4:	88 2f       	mov	r24, r24
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	9c 01       	movw	r18, r24
     cfa:	22 0f       	add	r18, r18
     cfc:	33 1f       	adc	r19, r19
     cfe:	ce 01       	movw	r24, r28
     d00:	01 96       	adiw	r24, 0x01	; 1
     d02:	82 0f       	add	r24, r18
     d04:	93 1f       	adc	r25, r19
     d06:	fc 01       	movw	r30, r24
     d08:	33 96       	adiw	r30, 0x03	; 3
     d0a:	01 90       	ld	r0, Z+
     d0c:	f0 81       	ld	r31, Z
     d0e:	e0 2d       	mov	r30, r0
     d10:	80 81       	ld	r24, Z
     d12:	48 2f       	mov	r20, r24
     d14:	8a 81       	ldd	r24, Y+2	; 0x02
     d16:	28 2f       	mov	r18, r24
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <DIO_INIT+0xf4>
     d20:	88 0f       	add	r24, r24
     d22:	99 1f       	adc	r25, r25
     d24:	2a 95       	dec	r18
     d26:	e2 f7       	brpl	.-8      	; 0xd20 <DIO_INIT+0xf0>
     d28:	80 95       	com	r24
     d2a:	84 23       	and	r24, r20
     d2c:	8c 93       	st	X, r24
			SET_BIT(*reg[PortState+4],PinValue);
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	88 2f       	mov	r24, r24
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	04 96       	adiw	r24, 0x04	; 4
     d36:	9c 01       	movw	r18, r24
     d38:	22 0f       	add	r18, r18
     d3a:	33 1f       	adc	r19, r19
     d3c:	ce 01       	movw	r24, r28
     d3e:	01 96       	adiw	r24, 0x01	; 1
     d40:	82 0f       	add	r24, r18
     d42:	93 1f       	adc	r25, r19
     d44:	fc 01       	movw	r30, r24
     d46:	33 96       	adiw	r30, 0x03	; 3
     d48:	a0 81       	ld	r26, Z
     d4a:	b1 81       	ldd	r27, Z+1	; 0x01
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	88 2f       	mov	r24, r24
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	04 96       	adiw	r24, 0x04	; 4
     d54:	9c 01       	movw	r18, r24
     d56:	22 0f       	add	r18, r18
     d58:	33 1f       	adc	r19, r19
     d5a:	ce 01       	movw	r24, r28
     d5c:	01 96       	adiw	r24, 0x01	; 1
     d5e:	82 0f       	add	r24, r18
     d60:	93 1f       	adc	r25, r19
     d62:	fc 01       	movw	r30, r24
     d64:	33 96       	adiw	r30, 0x03	; 3
     d66:	01 90       	ld	r0, Z+
     d68:	f0 81       	ld	r31, Z
     d6a:	e0 2d       	mov	r30, r0
     d6c:	80 81       	ld	r24, Z
     d6e:	48 2f       	mov	r20, r24
     d70:	8a 81       	ldd	r24, Y+2	; 0x02
     d72:	28 2f       	mov	r18, r24
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	02 2e       	mov	r0, r18
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <DIO_INIT+0x152>
     d7e:	88 0f       	add	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	0a 94       	dec	r0
     d84:	e2 f7       	brpl	.-8      	; 0xd7e <DIO_INIT+0x14e>
     d86:	84 2b       	or	r24, r20
     d88:	8c 93       	st	X, r24
     d8a:	88 c0       	rjmp	.+272    	; 0xe9c <DIO_INIT+0x26c>
			break;
		case OUTPUT:
			SET_BIT(*reg[PortState],PinValue);
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	88 2f       	mov	r24, r24
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	9c 01       	movw	r18, r24
     d94:	22 0f       	add	r18, r18
     d96:	33 1f       	adc	r19, r19
     d98:	ce 01       	movw	r24, r28
     d9a:	01 96       	adiw	r24, 0x01	; 1
     d9c:	82 0f       	add	r24, r18
     d9e:	93 1f       	adc	r25, r19
     da0:	fc 01       	movw	r30, r24
     da2:	33 96       	adiw	r30, 0x03	; 3
     da4:	a0 81       	ld	r26, Z
     da6:	b1 81       	ldd	r27, Z+1	; 0x01
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	88 2f       	mov	r24, r24
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	9c 01       	movw	r18, r24
     db0:	22 0f       	add	r18, r18
     db2:	33 1f       	adc	r19, r19
     db4:	ce 01       	movw	r24, r28
     db6:	01 96       	adiw	r24, 0x01	; 1
     db8:	82 0f       	add	r24, r18
     dba:	93 1f       	adc	r25, r19
     dbc:	fc 01       	movw	r30, r24
     dbe:	33 96       	adiw	r30, 0x03	; 3
     dc0:	01 90       	ld	r0, Z+
     dc2:	f0 81       	ld	r31, Z
     dc4:	e0 2d       	mov	r30, r0
     dc6:	80 81       	ld	r24, Z
     dc8:	48 2f       	mov	r20, r24
     dca:	8a 81       	ldd	r24, Y+2	; 0x02
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	02 2e       	mov	r0, r18
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <DIO_INIT+0x1ac>
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	0a 94       	dec	r0
     dde:	e2 f7       	brpl	.-8      	; 0xdd8 <DIO_INIT+0x1a8>
     de0:	84 2b       	or	r24, r20
     de2:	8c 93       	st	X, r24
     de4:	5b c0       	rjmp	.+182    	; 0xe9c <DIO_INIT+0x26c>
			break;
		case INPUT_FLOATING:
			CLR_BIT(*reg[PortState],PinValue);
     de6:	89 81       	ldd	r24, Y+1	; 0x01
     de8:	88 2f       	mov	r24, r24
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	9c 01       	movw	r18, r24
     dee:	22 0f       	add	r18, r18
     df0:	33 1f       	adc	r19, r19
     df2:	ce 01       	movw	r24, r28
     df4:	01 96       	adiw	r24, 0x01	; 1
     df6:	82 0f       	add	r24, r18
     df8:	93 1f       	adc	r25, r19
     dfa:	fc 01       	movw	r30, r24
     dfc:	33 96       	adiw	r30, 0x03	; 3
     dfe:	a0 81       	ld	r26, Z
     e00:	b1 81       	ldd	r27, Z+1	; 0x01
     e02:	89 81       	ldd	r24, Y+1	; 0x01
     e04:	88 2f       	mov	r24, r24
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	9c 01       	movw	r18, r24
     e0a:	22 0f       	add	r18, r18
     e0c:	33 1f       	adc	r19, r19
     e0e:	ce 01       	movw	r24, r28
     e10:	01 96       	adiw	r24, 0x01	; 1
     e12:	82 0f       	add	r24, r18
     e14:	93 1f       	adc	r25, r19
     e16:	fc 01       	movw	r30, r24
     e18:	33 96       	adiw	r30, 0x03	; 3
     e1a:	01 90       	ld	r0, Z+
     e1c:	f0 81       	ld	r31, Z
     e1e:	e0 2d       	mov	r30, r0
     e20:	80 81       	ld	r24, Z
     e22:	48 2f       	mov	r20, r24
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	28 2f       	mov	r18, r24
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <DIO_INIT+0x204>
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	2a 95       	dec	r18
     e36:	e2 f7       	brpl	.-8      	; 0xe30 <DIO_INIT+0x200>
     e38:	80 95       	com	r24
     e3a:	84 23       	and	r24, r20
     e3c:	8c 93       	st	X, r24
			CLR_BIT(*reg[PortState+4],PinValue);
     e3e:	89 81       	ldd	r24, Y+1	; 0x01
     e40:	88 2f       	mov	r24, r24
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	04 96       	adiw	r24, 0x04	; 4
     e46:	9c 01       	movw	r18, r24
     e48:	22 0f       	add	r18, r18
     e4a:	33 1f       	adc	r19, r19
     e4c:	ce 01       	movw	r24, r28
     e4e:	01 96       	adiw	r24, 0x01	; 1
     e50:	82 0f       	add	r24, r18
     e52:	93 1f       	adc	r25, r19
     e54:	fc 01       	movw	r30, r24
     e56:	33 96       	adiw	r30, 0x03	; 3
     e58:	a0 81       	ld	r26, Z
     e5a:	b1 81       	ldd	r27, Z+1	; 0x01
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
     e5e:	88 2f       	mov	r24, r24
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	04 96       	adiw	r24, 0x04	; 4
     e64:	9c 01       	movw	r18, r24
     e66:	22 0f       	add	r18, r18
     e68:	33 1f       	adc	r19, r19
     e6a:	ce 01       	movw	r24, r28
     e6c:	01 96       	adiw	r24, 0x01	; 1
     e6e:	82 0f       	add	r24, r18
     e70:	93 1f       	adc	r25, r19
     e72:	fc 01       	movw	r30, r24
     e74:	33 96       	adiw	r30, 0x03	; 3
     e76:	01 90       	ld	r0, Z+
     e78:	f0 81       	ld	r31, Z
     e7a:	e0 2d       	mov	r30, r0
     e7c:	80 81       	ld	r24, Z
     e7e:	48 2f       	mov	r20, r24
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	28 2f       	mov	r18, r24
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	02 2e       	mov	r0, r18
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <DIO_INIT+0x262>
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	0a 94       	dec	r0
     e94:	e2 f7       	brpl	.-8      	; 0xe8e <DIO_INIT+0x25e>
     e96:	80 95       	com	r24
     e98:	84 23       	and	r24, r20
     e9a:	8c 93       	st	X, r24

void DIO_INIT(void) {
	uint8 i,PinValue,PortState;
	uint8* reg[8]={DDRA_ADDRESS,DDRB_ADDRESS,DDRC_ADDRESS,DDRD_ADDRESS,
			PORTA_ADDRESS,PORTB_ADDRESS,PORTC_ADDRESS,PORTD_ADDRESS};
	for(i=0;i<PIN_LIMIT;i++){
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	8f 5f       	subi	r24, 0xFF	; 255
     ea0:	8b 83       	std	Y+3, r24	; 0x03
     ea2:	8b 81       	ldd	r24, Y+3	; 0x03
     ea4:	80 32       	cpi	r24, 0x20	; 32
     ea6:	08 f4       	brcc	.+2      	; 0xeaa <DIO_INIT+0x27a>
     ea8:	f2 ce       	rjmp	.-540    	; 0xc8e <DIO_INIT+0x5e>
			CLR_BIT(*reg[PortState+4],PinValue);
			break;
		}

	}
}
     eaa:	6a 96       	adiw	r28, 0x1a	; 26
     eac:	0f b6       	in	r0, 0x3f	; 63
     eae:	f8 94       	cli
     eb0:	de bf       	out	0x3e, r29	; 62
     eb2:	0f be       	out	0x3f, r0	; 63
     eb4:	cd bf       	out	0x3d, r28	; 61
     eb6:	cf 91       	pop	r28
     eb8:	df 91       	pop	r29
     eba:	08 95       	ret

00000ebc <DIO_WRITECHANNEL>:

void DIO_WRITECHANNEL(uint8 CHANNEL,uint8 VALUE){
     ebc:	df 93       	push	r29
     ebe:	cf 93       	push	r28
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
     ec4:	63 97       	sbiw	r28, 0x13	; 19
     ec6:	0f b6       	in	r0, 0x3f	; 63
     ec8:	f8 94       	cli
     eca:	de bf       	out	0x3e, r29	; 62
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	cd bf       	out	0x3d, r28	; 61
     ed0:	8b 87       	std	Y+11, r24	; 0x0b
     ed2:	6c 87       	std	Y+12, r22	; 0x0c
	uint8 PinValue,PortState;
	uint8* reg[4]={PORTA_ADDRESS,PORTB_ADDRESS,PORTC_ADDRESS,PORTD_ADDRESS};
     ed4:	9e 01       	movw	r18, r28
     ed6:	2d 5f       	subi	r18, 0xFD	; 253
     ed8:	3f 4f       	sbci	r19, 0xFF	; 255
     eda:	38 8b       	std	Y+16, r19	; 0x10
     edc:	2f 87       	std	Y+15, r18	; 0x0f
     ede:	82 e7       	ldi	r24, 0x72	; 114
     ee0:	91 e0       	ldi	r25, 0x01	; 1
     ee2:	9a 8b       	std	Y+18, r25	; 0x12
     ee4:	89 8b       	std	Y+17, r24	; 0x11
     ee6:	98 e0       	ldi	r25, 0x08	; 8
     ee8:	9b 8b       	std	Y+19, r25	; 0x13
     eea:	e9 89       	ldd	r30, Y+17	; 0x11
     eec:	fa 89       	ldd	r31, Y+18	; 0x12
     eee:	00 80       	ld	r0, Z
     ef0:	29 89       	ldd	r18, Y+17	; 0x11
     ef2:	3a 89       	ldd	r19, Y+18	; 0x12
     ef4:	2f 5f       	subi	r18, 0xFF	; 255
     ef6:	3f 4f       	sbci	r19, 0xFF	; 255
     ef8:	3a 8b       	std	Y+18, r19	; 0x12
     efa:	29 8b       	std	Y+17, r18	; 0x11
     efc:	ef 85       	ldd	r30, Y+15	; 0x0f
     efe:	f8 89       	ldd	r31, Y+16	; 0x10
     f00:	00 82       	st	Z, r0
     f02:	2f 85       	ldd	r18, Y+15	; 0x0f
     f04:	38 89       	ldd	r19, Y+16	; 0x10
     f06:	2f 5f       	subi	r18, 0xFF	; 255
     f08:	3f 4f       	sbci	r19, 0xFF	; 255
     f0a:	38 8b       	std	Y+16, r19	; 0x10
     f0c:	2f 87       	std	Y+15, r18	; 0x0f
     f0e:	3b 89       	ldd	r19, Y+19	; 0x13
     f10:	31 50       	subi	r19, 0x01	; 1
     f12:	3b 8b       	std	Y+19, r19	; 0x13
     f14:	8b 89       	ldd	r24, Y+19	; 0x13
     f16:	88 23       	and	r24, r24
     f18:	41 f7       	brne	.-48     	; 0xeea <DIO_WRITECHANNEL+0x2e>
		PinValue=CHANNEL%8;
     f1a:	8b 85       	ldd	r24, Y+11	; 0x0b
     f1c:	87 70       	andi	r24, 0x07	; 7
     f1e:	8a 83       	std	Y+2, r24	; 0x02
		PortState=CHANNEL/8;
     f20:	8b 85       	ldd	r24, Y+11	; 0x0b
     f22:	86 95       	lsr	r24
     f24:	86 95       	lsr	r24
     f26:	86 95       	lsr	r24
     f28:	89 83       	std	Y+1, r24	; 0x01
		switch(VALUE){
     f2a:	8c 85       	ldd	r24, Y+12	; 0x0c
     f2c:	e8 2f       	mov	r30, r24
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	fe 87       	std	Y+14, r31	; 0x0e
     f32:	ed 87       	std	Y+13, r30	; 0x0d
     f34:	2d 85       	ldd	r18, Y+13	; 0x0d
     f36:	3e 85       	ldd	r19, Y+14	; 0x0e
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	31 f0       	breq	.+12     	; 0xf4a <DIO_WRITECHANNEL+0x8e>
     f3e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f40:	9e 85       	ldd	r25, Y+14	; 0x0e
     f42:	81 30       	cpi	r24, 0x01	; 1
     f44:	91 05       	cpc	r25, r1
     f46:	79 f1       	breq	.+94     	; 0xfa6 <DIO_WRITECHANNEL+0xea>
     f48:	5a c0       	rjmp	.+180    	; 0xffe <DIO_WRITECHANNEL+0x142>
		case LOW:
			CLR_BIT(*reg[PortState],PinValue);
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
     f4c:	88 2f       	mov	r24, r24
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	9c 01       	movw	r18, r24
     f52:	22 0f       	add	r18, r18
     f54:	33 1f       	adc	r19, r19
     f56:	ce 01       	movw	r24, r28
     f58:	01 96       	adiw	r24, 0x01	; 1
     f5a:	82 0f       	add	r24, r18
     f5c:	93 1f       	adc	r25, r19
     f5e:	fc 01       	movw	r30, r24
     f60:	32 96       	adiw	r30, 0x02	; 2
     f62:	a0 81       	ld	r26, Z
     f64:	b1 81       	ldd	r27, Z+1	; 0x01
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	88 2f       	mov	r24, r24
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	9c 01       	movw	r18, r24
     f6e:	22 0f       	add	r18, r18
     f70:	33 1f       	adc	r19, r19
     f72:	ce 01       	movw	r24, r28
     f74:	01 96       	adiw	r24, 0x01	; 1
     f76:	82 0f       	add	r24, r18
     f78:	93 1f       	adc	r25, r19
     f7a:	fc 01       	movw	r30, r24
     f7c:	32 96       	adiw	r30, 0x02	; 2
     f7e:	01 90       	ld	r0, Z+
     f80:	f0 81       	ld	r31, Z
     f82:	e0 2d       	mov	r30, r0
     f84:	80 81       	ld	r24, Z
     f86:	48 2f       	mov	r20, r24
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	02 2e       	mov	r0, r18
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <DIO_WRITECHANNEL+0xde>
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	0a 94       	dec	r0
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <DIO_WRITECHANNEL+0xda>
     f9e:	80 95       	com	r24
     fa0:	84 23       	and	r24, r20
     fa2:	8c 93       	st	X, r24
     fa4:	2c c0       	rjmp	.+88     	; 0xffe <DIO_WRITECHANNEL+0x142>
			break;
		case HIGH:
			SET_BIT(*reg[PortState],PinValue);
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	88 2f       	mov	r24, r24
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	9c 01       	movw	r18, r24
     fae:	22 0f       	add	r18, r18
     fb0:	33 1f       	adc	r19, r19
     fb2:	ce 01       	movw	r24, r28
     fb4:	01 96       	adiw	r24, 0x01	; 1
     fb6:	82 0f       	add	r24, r18
     fb8:	93 1f       	adc	r25, r19
     fba:	fc 01       	movw	r30, r24
     fbc:	32 96       	adiw	r30, 0x02	; 2
     fbe:	a0 81       	ld	r26, Z
     fc0:	b1 81       	ldd	r27, Z+1	; 0x01
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	9c 01       	movw	r18, r24
     fca:	22 0f       	add	r18, r18
     fcc:	33 1f       	adc	r19, r19
     fce:	ce 01       	movw	r24, r28
     fd0:	01 96       	adiw	r24, 0x01	; 1
     fd2:	82 0f       	add	r24, r18
     fd4:	93 1f       	adc	r25, r19
     fd6:	fc 01       	movw	r30, r24
     fd8:	32 96       	adiw	r30, 0x02	; 2
     fda:	01 90       	ld	r0, Z+
     fdc:	f0 81       	ld	r31, Z
     fde:	e0 2d       	mov	r30, r0
     fe0:	80 81       	ld	r24, Z
     fe2:	48 2f       	mov	r20, r24
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	02 2e       	mov	r0, r18
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <DIO_WRITECHANNEL+0x13a>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	0a 94       	dec	r0
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <DIO_WRITECHANNEL+0x136>
     ffa:	84 2b       	or	r24, r20
     ffc:	8c 93       	st	X, r24
			break;
		}



}
     ffe:	63 96       	adiw	r28, 0x13	; 19
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	f8 94       	cli
    1004:	de bf       	out	0x3e, r29	; 62
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	cd bf       	out	0x3d, r28	; 61
    100a:	cf 91       	pop	r28
    100c:	df 91       	pop	r29
    100e:	08 95       	ret

00001010 <DIO_WRITEPORT>:

void DIO_WRITEPORT(uint8 PORT, uint8 VALUE) {
    1010:	df 93       	push	r29
    1012:	cf 93       	push	r28
    1014:	00 d0       	rcall	.+0      	; 0x1016 <DIO_WRITEPORT+0x6>
    1016:	00 d0       	rcall	.+0      	; 0x1018 <DIO_WRITEPORT+0x8>
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
    101c:	89 83       	std	Y+1, r24	; 0x01
    101e:	6a 83       	std	Y+2, r22	; 0x02

	switch (PORT) {
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	3c 83       	std	Y+4, r19	; 0x04
    1028:	2b 83       	std	Y+3, r18	; 0x03
    102a:	8b 81       	ldd	r24, Y+3	; 0x03
    102c:	9c 81       	ldd	r25, Y+4	; 0x04
    102e:	81 30       	cpi	r24, 0x01	; 1
    1030:	91 05       	cpc	r25, r1
    1032:	d1 f0       	breq	.+52     	; 0x1068 <DIO_WRITEPORT+0x58>
    1034:	2b 81       	ldd	r18, Y+3	; 0x03
    1036:	3c 81       	ldd	r19, Y+4	; 0x04
    1038:	22 30       	cpi	r18, 0x02	; 2
    103a:	31 05       	cpc	r19, r1
    103c:	2c f4       	brge	.+10     	; 0x1048 <DIO_WRITEPORT+0x38>
    103e:	8b 81       	ldd	r24, Y+3	; 0x03
    1040:	9c 81       	ldd	r25, Y+4	; 0x04
    1042:	00 97       	sbiw	r24, 0x00	; 0
    1044:	61 f0       	breq	.+24     	; 0x105e <DIO_WRITEPORT+0x4e>
    1046:	1e c0       	rjmp	.+60     	; 0x1084 <DIO_WRITEPORT+0x74>
    1048:	2b 81       	ldd	r18, Y+3	; 0x03
    104a:	3c 81       	ldd	r19, Y+4	; 0x04
    104c:	22 30       	cpi	r18, 0x02	; 2
    104e:	31 05       	cpc	r19, r1
    1050:	81 f0       	breq	.+32     	; 0x1072 <DIO_WRITEPORT+0x62>
    1052:	8b 81       	ldd	r24, Y+3	; 0x03
    1054:	9c 81       	ldd	r25, Y+4	; 0x04
    1056:	83 30       	cpi	r24, 0x03	; 3
    1058:	91 05       	cpc	r25, r1
    105a:	81 f0       	breq	.+32     	; 0x107c <DIO_WRITEPORT+0x6c>
    105c:	13 c0       	rjmp	.+38     	; 0x1084 <DIO_WRITEPORT+0x74>
	case PORT_A:
		PORTA = VALUE;
    105e:	eb e3       	ldi	r30, 0x3B	; 59
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	80 83       	st	Z, r24
    1066:	0e c0       	rjmp	.+28     	; 0x1084 <DIO_WRITEPORT+0x74>
		break;
	case PORT_B:
		PORTB = VALUE;
    1068:	e8 e3       	ldi	r30, 0x38	; 56
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	80 83       	st	Z, r24
    1070:	09 c0       	rjmp	.+18     	; 0x1084 <DIO_WRITEPORT+0x74>
		break;
	case PORT_C:
		PORTC = VALUE;
    1072:	e5 e3       	ldi	r30, 0x35	; 53
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	80 83       	st	Z, r24
    107a:	04 c0       	rjmp	.+8      	; 0x1084 <DIO_WRITEPORT+0x74>
		break;
	case PORT_D:
		PORTD = VALUE;
    107c:	e2 e3       	ldi	r30, 0x32	; 50
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	80 83       	st	Z, r24
		break;
	}
}
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	cf 91       	pop	r28
    108e:	df 91       	pop	r29
    1090:	08 95       	ret

00001092 <DIO_READCHANNEL>:


uint8 DIO_READCHANNEL(uint8 CHANNEL) {
    1092:	df 93       	push	r29
    1094:	cf 93       	push	r28
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
    109a:	61 97       	sbiw	r28, 0x11	; 17
    109c:	0f b6       	in	r0, 0x3f	; 63
    109e:	f8 94       	cli
    10a0:	de bf       	out	0x3e, r29	; 62
    10a2:	0f be       	out	0x3f, r0	; 63
    10a4:	cd bf       	out	0x3d, r28	; 61
    10a6:	8c 87       	std	Y+12, r24	; 0x0c
	uint8 PinValue,PortState,value=0;
    10a8:	19 82       	std	Y+1, r1	; 0x01
		uint8* reg[4]={PINA_ADDRESS,PINB_ADDRESS,PINC_ADDRESS,PIND_ADDRESS};
    10aa:	ae 01       	movw	r20, r28
    10ac:	4c 5f       	subi	r20, 0xFC	; 252
    10ae:	5f 4f       	sbci	r21, 0xFF	; 255
    10b0:	5e 87       	std	Y+14, r21	; 0x0e
    10b2:	4d 87       	std	Y+13, r20	; 0x0d
    10b4:	8a e7       	ldi	r24, 0x7A	; 122
    10b6:	91 e0       	ldi	r25, 0x01	; 1
    10b8:	98 8b       	std	Y+16, r25	; 0x10
    10ba:	8f 87       	std	Y+15, r24	; 0x0f
    10bc:	98 e0       	ldi	r25, 0x08	; 8
    10be:	99 8b       	std	Y+17, r25	; 0x11
    10c0:	ef 85       	ldd	r30, Y+15	; 0x0f
    10c2:	f8 89       	ldd	r31, Y+16	; 0x10
    10c4:	00 80       	ld	r0, Z
    10c6:	4f 85       	ldd	r20, Y+15	; 0x0f
    10c8:	58 89       	ldd	r21, Y+16	; 0x10
    10ca:	4f 5f       	subi	r20, 0xFF	; 255
    10cc:	5f 4f       	sbci	r21, 0xFF	; 255
    10ce:	58 8b       	std	Y+16, r21	; 0x10
    10d0:	4f 87       	std	Y+15, r20	; 0x0f
    10d2:	ed 85       	ldd	r30, Y+13	; 0x0d
    10d4:	fe 85       	ldd	r31, Y+14	; 0x0e
    10d6:	00 82       	st	Z, r0
    10d8:	4d 85       	ldd	r20, Y+13	; 0x0d
    10da:	5e 85       	ldd	r21, Y+14	; 0x0e
    10dc:	4f 5f       	subi	r20, 0xFF	; 255
    10de:	5f 4f       	sbci	r21, 0xFF	; 255
    10e0:	5e 87       	std	Y+14, r21	; 0x0e
    10e2:	4d 87       	std	Y+13, r20	; 0x0d
    10e4:	59 89       	ldd	r21, Y+17	; 0x11
    10e6:	51 50       	subi	r21, 0x01	; 1
    10e8:	59 8b       	std	Y+17, r21	; 0x11
    10ea:	89 89       	ldd	r24, Y+17	; 0x11
    10ec:	88 23       	and	r24, r24
    10ee:	41 f7       	brne	.-48     	; 0x10c0 <DIO_READCHANNEL+0x2e>
			PinValue=CHANNEL%8;
    10f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    10f2:	87 70       	andi	r24, 0x07	; 7
    10f4:	8b 83       	std	Y+3, r24	; 0x03
			PortState=CHANNEL/8;
    10f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    10f8:	86 95       	lsr	r24
    10fa:	86 95       	lsr	r24
    10fc:	86 95       	lsr	r24
    10fe:	8a 83       	std	Y+2, r24	; 0x02
			value=GET_BIT(*reg[PortState],PinValue);
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	88 2f       	mov	r24, r24
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	9c 01       	movw	r18, r24
    1108:	22 0f       	add	r18, r18
    110a:	33 1f       	adc	r19, r19
    110c:	ce 01       	movw	r24, r28
    110e:	01 96       	adiw	r24, 0x01	; 1
    1110:	82 0f       	add	r24, r18
    1112:	93 1f       	adc	r25, r19
    1114:	fc 01       	movw	r30, r24
    1116:	33 96       	adiw	r30, 0x03	; 3
    1118:	01 90       	ld	r0, Z+
    111a:	f0 81       	ld	r31, Z
    111c:	e0 2d       	mov	r30, r0
    111e:	80 81       	ld	r24, Z
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	8b 81       	ldd	r24, Y+3	; 0x03
    1126:	88 2f       	mov	r24, r24
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	f9 01       	movw	r30, r18
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <DIO_READCHANNEL+0xa0>
    112e:	f5 95       	asr	r31
    1130:	e7 95       	ror	r30
    1132:	8a 95       	dec	r24
    1134:	e2 f7       	brpl	.-8      	; 0x112e <DIO_READCHANNEL+0x9c>
    1136:	cf 01       	movw	r24, r30
    1138:	81 70       	andi	r24, 0x01	; 1
    113a:	89 83       	std	Y+1, r24	; 0x01
	return value;
    113c:	89 81       	ldd	r24, Y+1	; 0x01
}
    113e:	61 96       	adiw	r28, 0x11	; 17
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	f8 94       	cli
    1144:	de bf       	out	0x3e, r29	; 62
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	cd bf       	out	0x3d, r28	; 61
    114a:	cf 91       	pop	r28
    114c:	df 91       	pop	r29
    114e:	08 95       	ret

00001150 <DIO_READPORT>:

uint8 DIO_READPORT(uint8 PORT) {
    1150:	df 93       	push	r29
    1152:	cf 93       	push	r28
    1154:	00 d0       	rcall	.+0      	; 0x1156 <DIO_READPORT+0x6>
    1156:	00 d0       	rcall	.+0      	; 0x1158 <DIO_READPORT+0x8>
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = 0;
    115e:	19 82       	std	Y+1, r1	; 0x01
	switch (PORT) {
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	3c 83       	std	Y+4, r19	; 0x04
    1168:	2b 83       	std	Y+3, r18	; 0x03
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	9c 81       	ldd	r25, Y+4	; 0x04
    116e:	81 30       	cpi	r24, 0x01	; 1
    1170:	91 05       	cpc	r25, r1
    1172:	d1 f0       	breq	.+52     	; 0x11a8 <DIO_READPORT+0x58>
    1174:	2b 81       	ldd	r18, Y+3	; 0x03
    1176:	3c 81       	ldd	r19, Y+4	; 0x04
    1178:	22 30       	cpi	r18, 0x02	; 2
    117a:	31 05       	cpc	r19, r1
    117c:	2c f4       	brge	.+10     	; 0x1188 <DIO_READPORT+0x38>
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	9c 81       	ldd	r25, Y+4	; 0x04
    1182:	00 97       	sbiw	r24, 0x00	; 0
    1184:	61 f0       	breq	.+24     	; 0x119e <DIO_READPORT+0x4e>
    1186:	1e c0       	rjmp	.+60     	; 0x11c4 <DIO_READPORT+0x74>
    1188:	2b 81       	ldd	r18, Y+3	; 0x03
    118a:	3c 81       	ldd	r19, Y+4	; 0x04
    118c:	22 30       	cpi	r18, 0x02	; 2
    118e:	31 05       	cpc	r19, r1
    1190:	81 f0       	breq	.+32     	; 0x11b2 <DIO_READPORT+0x62>
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	9c 81       	ldd	r25, Y+4	; 0x04
    1196:	83 30       	cpi	r24, 0x03	; 3
    1198:	91 05       	cpc	r25, r1
    119a:	81 f0       	breq	.+32     	; 0x11bc <DIO_READPORT+0x6c>
    119c:	13 c0       	rjmp	.+38     	; 0x11c4 <DIO_READPORT+0x74>
	case PORT_A:
		value = PINA;
    119e:	e9 e3       	ldi	r30, 0x39	; 57
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	89 83       	std	Y+1, r24	; 0x01
    11a6:	0e c0       	rjmp	.+28     	; 0x11c4 <DIO_READPORT+0x74>
		break;
	case PORT_B:
		value = PINB;
    11a8:	e6 e3       	ldi	r30, 0x36	; 54
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	89 83       	std	Y+1, r24	; 0x01
    11b0:	09 c0       	rjmp	.+18     	; 0x11c4 <DIO_READPORT+0x74>
		break;
	case PORT_C:
		value = PINC;
    11b2:	e3 e3       	ldi	r30, 0x33	; 51
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	89 83       	std	Y+1, r24	; 0x01
    11ba:	04 c0       	rjmp	.+8      	; 0x11c4 <DIO_READPORT+0x74>
		break;
	case PORT_D:
		value = PIND;
    11bc:	e0 e3       	ldi	r30, 0x30	; 48
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return value;
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	cf 91       	pop	r28
    11d0:	df 91       	pop	r29
    11d2:	08 95       	ret

000011d4 <EXIT_INIT>:
#include "BIT_MATH.h"
#include "MEMMAP.h"
#include "DIO.h"
#include "EXT_INT.h"

void EXIT_INIT(uint8 EDGE) {
    11d4:	df 93       	push	r29
    11d6:	cf 93       	push	r28
    11d8:	0f 92       	push	r0
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
    11de:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(GICR, 7);
    11e0:	ab e5       	ldi	r26, 0x5B	; 91
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	eb e5       	ldi	r30, 0x5B	; 91
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	80 68       	ori	r24, 0x80	; 128
    11ec:	8c 93       	st	X, r24
	SET_BIT(GICR, 6);
    11ee:	ab e5       	ldi	r26, 0x5B	; 91
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	eb e5       	ldi	r30, 0x5B	; 91
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	80 64       	ori	r24, 0x40	; 64
    11fa:	8c 93       	st	X, r24
	if (EDGE == FALLING_EDGE) {
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	88 23       	and	r24, r24
    1200:	e9 f4       	brne	.+58     	; 0x123c <EXIT_INIT+0x68>
		CLR_BIT(MCUCR, 0);
    1202:	a5 e5       	ldi	r26, 0x55	; 85
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e5 e5       	ldi	r30, 0x55	; 85
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	8e 7f       	andi	r24, 0xFE	; 254
    120e:	8c 93       	st	X, r24
		SET_BIT(MCUCR, 1);
    1210:	a5 e5       	ldi	r26, 0x55	; 85
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	e5 e5       	ldi	r30, 0x55	; 85
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	82 60       	ori	r24, 0x02	; 2
    121c:	8c 93       	st	X, r24
		CLR_BIT(MCUCR, 2);
    121e:	a5 e5       	ldi	r26, 0x55	; 85
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	e5 e5       	ldi	r30, 0x55	; 85
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	8b 7f       	andi	r24, 0xFB	; 251
    122a:	8c 93       	st	X, r24
		SET_BIT(MCUCR, 3);
    122c:	a5 e5       	ldi	r26, 0x55	; 85
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	e5 e5       	ldi	r30, 0x55	; 85
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	88 60       	ori	r24, 0x08	; 8
    1238:	8c 93       	st	X, r24
    123a:	1f c0       	rjmp	.+62     	; 0x127a <EXIT_INIT+0xa6>
	} else if (EDGE == RISING_EDGE) {
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	81 30       	cpi	r24, 0x01	; 1
    1240:	e1 f4       	brne	.+56     	; 0x127a <EXIT_INIT+0xa6>
		SET_BIT(MCUCR, 0);
    1242:	a5 e5       	ldi	r26, 0x55	; 85
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	e5 e5       	ldi	r30, 0x55	; 85
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	81 60       	ori	r24, 0x01	; 1
    124e:	8c 93       	st	X, r24
		SET_BIT(MCUCR, 1);
    1250:	a5 e5       	ldi	r26, 0x55	; 85
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	e5 e5       	ldi	r30, 0x55	; 85
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	82 60       	ori	r24, 0x02	; 2
    125c:	8c 93       	st	X, r24
		SET_BIT(MCUCR, 2);
    125e:	a5 e5       	ldi	r26, 0x55	; 85
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e5 e5       	ldi	r30, 0x55	; 85
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	84 60       	ori	r24, 0x04	; 4
    126a:	8c 93       	st	X, r24
		SET_BIT(MCUCR, 3);
    126c:	a5 e5       	ldi	r26, 0x55	; 85
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	e5 e5       	ldi	r30, 0x55	; 85
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	88 60       	ori	r24, 0x08	; 8
    1278:	8c 93       	st	X, r24
	}
	SET_BIT(SREG, 7);
    127a:	af e5       	ldi	r26, 0x5F	; 95
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	ef e5       	ldi	r30, 0x5F	; 95
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	80 68       	ori	r24, 0x80	; 128
    1286:	8c 93       	st	X, r24
}
    1288:	0f 90       	pop	r0
    128a:	cf 91       	pop	r28
    128c:	df 91       	pop	r29
    128e:	08 95       	ret

00001290 <EXIT_DEINIT>:
void EXIT_DEINIT(void) {
    1290:	df 93       	push	r29
    1292:	cf 93       	push	r28
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, 7);
    1298:	af e5       	ldi	r26, 0x5F	; 95
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	ef e5       	ldi	r30, 0x5F	; 95
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	8f 77       	andi	r24, 0x7F	; 127
    12a4:	8c 93       	st	X, r24
	CLR_BIT(GICR, 7);
    12a6:	ab e5       	ldi	r26, 0x5B	; 91
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	eb e5       	ldi	r30, 0x5B	; 91
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	8f 77       	andi	r24, 0x7F	; 127
    12b2:	8c 93       	st	X, r24
	CLR_BIT(GICR, 6);
    12b4:	ab e5       	ldi	r26, 0x5B	; 91
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	eb e5       	ldi	r30, 0x5B	; 91
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	8f 7b       	andi	r24, 0xBF	; 191
    12c0:	8c 93       	st	X, r24
}
    12c2:	cf 91       	pop	r28
    12c4:	df 91       	pop	r29
    12c6:	08 95       	ret

000012c8 <SPI_INIT_MASTER>:
#include "BIT_MATH.h"
#include "MEMMAP.h"
#include "DIO.h"
#include "SPI.h"

void SPI_INIT_MASTER(void) {
    12c8:	df 93       	push	r29
    12ca:	cf 93       	push	r28
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62

	/*choose prescaler*/
	SET_BIT(SPCR, 0);
    12d0:	ad e2       	ldi	r26, 0x2D	; 45
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	ed e2       	ldi	r30, 0x2D	; 45
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	81 60       	ori	r24, 0x01	; 1
    12dc:	8c 93       	st	X, r24
	CLR_BIT(SPCR, 1);
    12de:	ad e2       	ldi	r26, 0x2D	; 45
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	ed e2       	ldi	r30, 0x2D	; 45
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	8d 7f       	andi	r24, 0xFD	; 253
    12ea:	8c 93       	st	X, r24
	SET_BIT(SPSR, 0);
    12ec:	ae e2       	ldi	r26, 0x2E	; 46
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	ee e2       	ldi	r30, 0x2E	; 46
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	81 60       	ori	r24, 0x01	; 1
    12f8:	8c 93       	st	X, r24

	/*CHOOSE LSB */
	SET_BIT(SPCR, 5);
    12fa:	ad e2       	ldi	r26, 0x2D	; 45
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	ed e2       	ldi	r30, 0x2D	; 45
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	80 62       	ori	r24, 0x20	; 32
    1306:	8c 93       	st	X, r24
	/*choose polarity*/
	CLR_BIT(SPCR, 3);
    1308:	ad e2       	ldi	r26, 0x2D	; 45
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	ed e2       	ldi	r30, 0x2D	; 45
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	87 7f       	andi	r24, 0xF7	; 247
    1314:	8c 93       	st	X, r24
	/*choose PHASE*/

	CLR_BIT(SPCR, 2);
    1316:	ad e2       	ldi	r26, 0x2D	; 45
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	ed e2       	ldi	r30, 0x2D	; 45
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	8b 7f       	andi	r24, 0xFB	; 251
    1322:	8c 93       	st	X, r24

	/* ENABLE MASTER*/
	SET_BIT(SPCR, 4);
    1324:	ad e2       	ldi	r26, 0x2D	; 45
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	ed e2       	ldi	r30, 0x2D	; 45
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	80 61       	ori	r24, 0x10	; 16
    1330:	8c 93       	st	X, r24
	/*ENABLE SPI*/
	SET_BIT(SPCR, 6);
    1332:	ad e2       	ldi	r26, 0x2D	; 45
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	ed e2       	ldi	r30, 0x2D	; 45
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	80 64       	ori	r24, 0x40	; 64
    133e:	8c 93       	st	X, r24

}
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	08 95       	ret

00001346 <SPI_INIT_SLAVE>:
void SPI_INIT_SLAVE(void) {
    1346:	df 93       	push	r29
    1348:	cf 93       	push	r28
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62

	/*choose prescaler*/
	SET_BIT(SPCR, 0);
    134e:	ad e2       	ldi	r26, 0x2D	; 45
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	ed e2       	ldi	r30, 0x2D	; 45
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	81 60       	ori	r24, 0x01	; 1
    135a:	8c 93       	st	X, r24
	CLR_BIT(SPCR, 1);
    135c:	ad e2       	ldi	r26, 0x2D	; 45
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	ed e2       	ldi	r30, 0x2D	; 45
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	8d 7f       	andi	r24, 0xFD	; 253
    1368:	8c 93       	st	X, r24
	SET_BIT(SPSR, 0);
    136a:	ae e2       	ldi	r26, 0x2E	; 46
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	ee e2       	ldi	r30, 0x2E	; 46
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	81 60       	ori	r24, 0x01	; 1
    1376:	8c 93       	st	X, r24

	/*CHOOSE LSB */
	SET_BIT(SPCR, 5);
    1378:	ad e2       	ldi	r26, 0x2D	; 45
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	ed e2       	ldi	r30, 0x2D	; 45
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	80 62       	ori	r24, 0x20	; 32
    1384:	8c 93       	st	X, r24
	/*choose polarity*/
	CLR_BIT(SPCR, 3);
    1386:	ad e2       	ldi	r26, 0x2D	; 45
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	ed e2       	ldi	r30, 0x2D	; 45
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	87 7f       	andi	r24, 0xF7	; 247
    1392:	8c 93       	st	X, r24
	/*choose PHASE*/

	CLR_BIT(SPCR, 2);
    1394:	ad e2       	ldi	r26, 0x2D	; 45
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	ed e2       	ldi	r30, 0x2D	; 45
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	8b 7f       	andi	r24, 0xFB	; 251
    13a0:	8c 93       	st	X, r24
	/* ENABLE SLAVE*/
	CLR_BIT(SPCR, 4);
    13a2:	ad e2       	ldi	r26, 0x2D	; 45
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	ed e2       	ldi	r30, 0x2D	; 45
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	8f 7e       	andi	r24, 0xEF	; 239
    13ae:	8c 93       	st	X, r24
	/*ENABLE SPI*/
	SET_BIT(SPCR, 6);
    13b0:	ad e2       	ldi	r26, 0x2D	; 45
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	ed e2       	ldi	r30, 0x2D	; 45
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	80 64       	ori	r24, 0x40	; 64
    13bc:	8c 93       	st	X, r24

}
    13be:	cf 91       	pop	r28
    13c0:	df 91       	pop	r29
    13c2:	08 95       	ret

000013c4 <SPI_SEND_DATA>:

void SPI_SEND_DATA(uint8 data) {
    13c4:	df 93       	push	r29
    13c6:	cf 93       	push	r28
    13c8:	0f 92       	push	r0
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    13ce:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;
    13d0:	ef e2       	ldi	r30, 0x2F	; 47
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	89 81       	ldd	r24, Y+1	; 0x01
    13d6:	80 83       	st	Z, r24
	while (!(GET_BIT(SPSR, 7)))
    13d8:	ee e2       	ldi	r30, 0x2E	; 46
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	88 23       	and	r24, r24
    13e0:	dc f7       	brge	.-10     	; 0x13d8 <SPI_SEND_DATA+0x14>
		;
}
    13e2:	0f 90       	pop	r0
    13e4:	cf 91       	pop	r28
    13e6:	df 91       	pop	r29
    13e8:	08 95       	ret

000013ea <SPI_RECIEVE_DATA>:

uint8 SPI_RECIEVE_DATA(void) {
    13ea:	df 93       	push	r29
    13ec:	cf 93       	push	r28
    13ee:	cd b7       	in	r28, 0x3d	; 61
    13f0:	de b7       	in	r29, 0x3e	; 62
	while (!(GET_BIT(SPSR, 7)))
    13f2:	ee e2       	ldi	r30, 0x2E	; 46
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	88 23       	and	r24, r24
    13fa:	dc f7       	brge	.-10     	; 0x13f2 <SPI_RECIEVE_DATA+0x8>
		;
	return SPDR;
    13fc:	ef e2       	ldi	r30, 0x2F	; 47
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z

}
    1402:	cf 91       	pop	r28
    1404:	df 91       	pop	r29
    1406:	08 95       	ret

00001408 <TIMER0_INIT>:
#include "BIT_MATH.h"
#include "MEMMAP.h"
#include "DIO.h"
#include"TIMER.h"

void TIMER0_INIT(void) {
    1408:	df 93       	push	r29
    140a:	cf 93       	push	r28
    140c:	cd b7       	in	r28, 0x3d	; 61
    140e:	de b7       	in	r29, 0x3e	; 62
		//Enable Compare Match INTERRUPT
		SET_BIT(TIMSK, 1);
		//Enable Global Interrupt
		SET_BIT(SREG, 7);
	} else if (T0_MODE == FAST_PWM) {
		SET_BIT(TCCR0, 3);
    1410:	a3 e5       	ldi	r26, 0x53	; 83
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e3 e5       	ldi	r30, 0x53	; 83
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	88 60       	ori	r24, 0x08	; 8
    141c:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 6);
    141e:	a3 e5       	ldi	r26, 0x53	; 83
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	e3 e5       	ldi	r30, 0x53	; 83
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	80 64       	ori	r24, 0x40	; 64
    142a:	8c 93       	st	X, r24
		//Toggle OCR0 (Non_Inverting)
		CLR_BIT(TCCR0, 4);
    142c:	a3 e5       	ldi	r26, 0x53	; 83
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	e3 e5       	ldi	r30, 0x53	; 83
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	8f 7e       	andi	r24, 0xEF	; 239
    1438:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 5);
    143a:	a3 e5       	ldi	r26, 0x53	; 83
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	e3 e5       	ldi	r30, 0x53	; 83
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	80 62       	ori	r24, 0x20	; 32
    1446:	8c 93       	st	X, r24
		//Enable Compare Match INTERRUPT
		SET_BIT(TIMSK, 1);
    1448:	a9 e5       	ldi	r26, 0x59	; 89
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	e9 e5       	ldi	r30, 0x59	; 89
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	82 60       	ori	r24, 0x02	; 2
    1454:	8c 93       	st	X, r24
		//Enable Global Interrupt
		SET_BIT(SREG, 7);
    1456:	af e5       	ldi	r26, 0x5F	; 95
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	ef e5       	ldi	r30, 0x5F	; 95
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	80 68       	ori	r24, 0x80	; 128
    1462:	8c 93       	st	X, r24
	}
	//SET PRESCALER at 1024
	SET_BIT(TCCR0, 0);
    1464:	a3 e5       	ldi	r26, 0x53	; 83
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e3 e5       	ldi	r30, 0x53	; 83
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	81 60       	ori	r24, 0x01	; 1
    1470:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, 1);
    1472:	a3 e5       	ldi	r26, 0x53	; 83
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	e3 e5       	ldi	r30, 0x53	; 83
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	8d 7f       	andi	r24, 0xFD	; 253
    147e:	8c 93       	st	X, r24
	SET_BIT(TCCR0, 2);
    1480:	a3 e5       	ldi	r26, 0x53	; 83
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e3 e5       	ldi	r30, 0x53	; 83
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	84 60       	ori	r24, 0x04	; 4
    148c:	8c 93       	st	X, r24

}
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	08 95       	ret

00001494 <TIMER1_INIT>:

void TIMER1_INIT(void) {
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
	//Select Mode
	if (T1_MODE == NORMAL) {
		CLR_BIT(TCCR1A, 0);
    149c:	af e4       	ldi	r26, 0x4F	; 79
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	ef e4       	ldi	r30, 0x4F	; 79
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	8e 7f       	andi	r24, 0xFE	; 254
    14a8:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, 1);
    14aa:	af e4       	ldi	r26, 0x4F	; 79
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	ef e4       	ldi	r30, 0x4F	; 79
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	8d 7f       	andi	r24, 0xFD	; 253
    14b6:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,3);
    14b8:	ae e4       	ldi	r26, 0x4E	; 78
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	ee e4       	ldi	r30, 0x4E	; 78
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	87 7f       	andi	r24, 0xF7	; 247
    14c4:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,4);
    14c6:	ae e4       	ldi	r26, 0x4E	; 78
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	ee e4       	ldi	r30, 0x4E	; 78
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	8f 7e       	andi	r24, 0xEF	; 239
    14d2:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, 4);
    14d4:	af e4       	ldi	r26, 0x4F	; 79
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	ef e4       	ldi	r30, 0x4F	; 79
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	8f 7e       	andi	r24, 0xEF	; 239
    14e0:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, 5);
    14e2:	af e4       	ldi	r26, 0x4F	; 79
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	ef e4       	ldi	r30, 0x4F	; 79
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	8f 7d       	andi	r24, 0xDF	; 223
    14ee:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, 6);
    14f0:	af e4       	ldi	r26, 0x4F	; 79
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	ef e4       	ldi	r30, 0x4F	; 79
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	8f 7b       	andi	r24, 0xBF	; 191
    14fc:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, 7);
    14fe:	af e4       	ldi	r26, 0x4F	; 79
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	ef e4       	ldi	r30, 0x4F	; 79
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	8f 77       	andi	r24, 0x7F	; 127
    150a:	8c 93       	st	X, r24
		//Enable OVERFLOW INTERRUPT
		SET_BIT(TIMSK, 2);
    150c:	a9 e5       	ldi	r26, 0x59	; 89
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	e9 e5       	ldi	r30, 0x59	; 89
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	84 60       	ori	r24, 0x04	; 4
    1518:	8c 93       	st	X, r24
		//Enable Global Interrupt
		SET_BIT(SREG, 7);
    151a:	af e5       	ldi	r26, 0x5F	; 95
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	ef e5       	ldi	r30, 0x5F	; 95
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	80 68       	ori	r24, 0x80	; 128
    1526:	8c 93       	st	X, r24
	}
	//SET PRESCALER at 1024
	SET_BIT(TCCR1B, 0);
    1528:	ae e4       	ldi	r26, 0x4E	; 78
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	ee e4       	ldi	r30, 0x4E	; 78
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	81 60       	ori	r24, 0x01	; 1
    1534:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, 1);
    1536:	ae e4       	ldi	r26, 0x4E	; 78
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	ee e4       	ldi	r30, 0x4E	; 78
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	8d 7f       	andi	r24, 0xFD	; 253
    1542:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, 2);
    1544:	ae e4       	ldi	r26, 0x4E	; 78
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	ee e4       	ldi	r30, 0x4E	; 78
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	84 60       	ori	r24, 0x04	; 4
    1550:	8c 93       	st	X, r24

}
    1552:	cf 91       	pop	r28
    1554:	df 91       	pop	r29
    1556:	08 95       	ret

00001558 <I2C_MASTER_INIT>:
#include "DIO.h"
#include "LCD.h"
#include "TWI.h"
#include <util/delay.h>

void I2C_MASTER_INIT(void) {
    1558:	df 93       	push	r29
    155a:	cf 93       	push	r28
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
	//Bit Rate (SCL Frequency)
	TWBR = 3;
    1560:	e0 e2       	ldi	r30, 0x20	; 32
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	83 e0       	ldi	r24, 0x03	; 3
    1566:	80 83       	st	Z, r24
	//Prescaler 1
	CLR_BIT(TWSR, 0);
    1568:	a1 e2       	ldi	r26, 0x21	; 33
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	e1 e2       	ldi	r30, 0x21	; 33
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	8e 7f       	andi	r24, 0xFE	; 254
    1574:	8c 93       	st	X, r24
	CLR_BIT(TWSR, 1);
    1576:	a1 e2       	ldi	r26, 0x21	; 33
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e1 e2       	ldi	r30, 0x21	; 33
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	8d 7f       	andi	r24, 0xFD	; 253
    1582:	8c 93       	st	X, r24
	//Enable I2C
	SET_BIT(TWCR, 2);
    1584:	a6 e5       	ldi	r26, 0x56	; 86
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e6 e5       	ldi	r30, 0x56	; 86
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	84 60       	ori	r24, 0x04	; 4
    1590:	8c 93       	st	X, r24
}
    1592:	cf 91       	pop	r28
    1594:	df 91       	pop	r29
    1596:	08 95       	ret

00001598 <I2C_SLAVE_INIT>:

void I2C_SLAVE_INIT(uint8 Slave_Address) {
    1598:	df 93       	push	r29
    159a:	cf 93       	push	r28
    159c:	0f 92       	push	r0
    159e:	cd b7       	in	r28, 0x3d	; 61
    15a0:	de b7       	in	r29, 0x3e	; 62
    15a2:	89 83       	std	Y+1, r24	; 0x01
	//SET slave Address
	TWAR = Slave_Address << 1;
    15a4:	e2 e2       	ldi	r30, 0x22	; 34
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
    15aa:	88 0f       	add	r24, r24
    15ac:	80 83       	st	Z, r24
	CLR_BIT(TWAR, 0);
    15ae:	a2 e2       	ldi	r26, 0x22	; 34
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	e2 e2       	ldi	r30, 0x22	; 34
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	8e 7f       	andi	r24, 0xFE	; 254
    15ba:	8c 93       	st	X, r24
	//Bit Rate (SCL Frequency)
	TWBR = 3;
    15bc:	e0 e2       	ldi	r30, 0x20	; 32
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	83 e0       	ldi	r24, 0x03	; 3
    15c2:	80 83       	st	Z, r24
	//Prescaler zero
	CLR_BIT(TWSR, 0);
    15c4:	a1 e2       	ldi	r26, 0x21	; 33
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e1 e2       	ldi	r30, 0x21	; 33
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	8e 7f       	andi	r24, 0xFE	; 254
    15d0:	8c 93       	st	X, r24
	CLR_BIT(TWSR, 1);
    15d2:	a1 e2       	ldi	r26, 0x21	; 33
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e1 e2       	ldi	r30, 0x21	; 33
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	8d 7f       	andi	r24, 0xFD	; 253
    15de:	8c 93       	st	X, r24
	//Enable Acknowledge
	SET_BIT(TWCR, 6);
    15e0:	a6 e5       	ldi	r26, 0x56	; 86
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	e6 e5       	ldi	r30, 0x56	; 86
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	80 64       	ori	r24, 0x40	; 64
    15ec:	8c 93       	st	X, r24
	//Enable I2C
	SET_BIT(TWCR, 2);
    15ee:	a6 e5       	ldi	r26, 0x56	; 86
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	e6 e5       	ldi	r30, 0x56	; 86
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	84 60       	ori	r24, 0x04	; 4
    15fa:	8c 93       	st	X, r24
	while (!GET_BIT(TWCR, 7))
    15fc:	e6 e5       	ldi	r30, 0x56	; 86
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	88 23       	and	r24, r24
    1604:	dc f7       	brge	.-10     	; 0x15fc <I2C_SLAVE_INIT+0x64>
		;

}
    1606:	0f 90       	pop	r0
    1608:	cf 91       	pop	r28
    160a:	df 91       	pop	r29
    160c:	08 95       	ret

0000160e <I2C_START_CONDITION>:
void I2C_START_CONDITION(uint8 Slave_Address, uint8 R_W) {
    160e:	df 93       	push	r29
    1610:	cf 93       	push	r28
    1612:	00 d0       	rcall	.+0      	; 0x1614 <I2C_START_CONDITION+0x6>
    1614:	cd b7       	in	r28, 0x3d	; 61
    1616:	de b7       	in	r29, 0x3e	; 62
    1618:	89 83       	std	Y+1, r24	; 0x01
    161a:	6a 83       	std	Y+2, r22	; 0x02
	//Enable Start Condition
	SET_BIT(TWCR, 5);
    161c:	a6 e5       	ldi	r26, 0x56	; 86
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	e6 e5       	ldi	r30, 0x56	; 86
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	80 62       	ori	r24, 0x20	; 32
    1628:	8c 93       	st	X, r24
	//Enable I2C
	SET_BIT(TWCR, 2);
    162a:	a6 e5       	ldi	r26, 0x56	; 86
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	e6 e5       	ldi	r30, 0x56	; 86
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	84 60       	ori	r24, 0x04	; 4
    1636:	8c 93       	st	X, r24
	// Clear TWIN Flag
	SET_BIT(TWCR, 7);
    1638:	a6 e5       	ldi	r26, 0x56	; 86
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	e6 e5       	ldi	r30, 0x56	; 86
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	80 68       	ori	r24, 0x80	; 128
    1644:	8c 93       	st	X, r24
	// Wait
	while (!GET_BIT(TWCR, 7))
    1646:	e6 e5       	ldi	r30, 0x56	; 86
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	88 23       	and	r24, r24
    164e:	dc f7       	brge	.-10     	; 0x1646 <I2C_START_CONDITION+0x38>
		;
	//Send Slave Address
	TWDR = (Slave_Address << 1) | R_W;
    1650:	e3 e2       	ldi	r30, 0x23	; 35
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	89 81       	ldd	r24, Y+1	; 0x01
    1656:	88 2f       	mov	r24, r24
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	88 0f       	add	r24, r24
    165c:	99 1f       	adc	r25, r25
    165e:	98 2f       	mov	r25, r24
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	89 2b       	or	r24, r25
    1664:	80 83       	st	Z, r24
	//CLEAR Start Condition
	CLR_BIT(TWCR, 5);
    1666:	a6 e5       	ldi	r26, 0x56	; 86
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	e6 e5       	ldi	r30, 0x56	; 86
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	8f 7d       	andi	r24, 0xDF	; 223
    1672:	8c 93       	st	X, r24
	// Clear TWIN Flag
	SET_BIT(TWCR, 7);
    1674:	a6 e5       	ldi	r26, 0x56	; 86
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	e6 e5       	ldi	r30, 0x56	; 86
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	80 68       	ori	r24, 0x80	; 128
    1680:	8c 93       	st	X, r24
	//Enable I2C
	SET_BIT(TWCR, 2);
    1682:	a6 e5       	ldi	r26, 0x56	; 86
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	e6 e5       	ldi	r30, 0x56	; 86
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	84 60       	ori	r24, 0x04	; 4
    168e:	8c 93       	st	X, r24
	// Wait
	while (!GET_BIT(TWCR, 7))
    1690:	e6 e5       	ldi	r30, 0x56	; 86
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	88 23       	and	r24, r24
    1698:	dc f7       	brge	.-10     	; 0x1690 <I2C_START_CONDITION+0x82>
		;
}
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	cf 91       	pop	r28
    16a0:	df 91       	pop	r29
    16a2:	08 95       	ret

000016a4 <I2C_STOP_CONDITION>:

void I2C_STOP_CONDITION(void) {
    16a4:	df 93       	push	r29
    16a6:	cf 93       	push	r28
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
	//Enable Stop Condition
	SET_BIT(TWCR, 4);
    16ac:	a6 e5       	ldi	r26, 0x56	; 86
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	e6 e5       	ldi	r30, 0x56	; 86
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	80 61       	ori	r24, 0x10	; 16
    16b8:	8c 93       	st	X, r24
	//Enable I2C
	SET_BIT(TWCR, 2);
    16ba:	a6 e5       	ldi	r26, 0x56	; 86
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	e6 e5       	ldi	r30, 0x56	; 86
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	84 60       	ori	r24, 0x04	; 4
    16c6:	8c 93       	st	X, r24
	// Clear TWIN Flag
	SET_BIT(TWCR, 7);
    16c8:	a6 e5       	ldi	r26, 0x56	; 86
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e6 e5       	ldi	r30, 0x56	; 86
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	80 68       	ori	r24, 0x80	; 128
    16d4:	8c 93       	st	X, r24
	// Wait
	//while (!GET_BIT(TWCR, 7))
	;
	//CLEAR Stop Condition
	//CLR_BIT(TWCR, 4);
}
    16d6:	cf 91       	pop	r28
    16d8:	df 91       	pop	r29
    16da:	08 95       	ret

000016dc <I2C_REPEATED_START_CONDITION>:
void I2C_REPEATED_START_CONDITION(uint8 Slave_Address, uint8 R_W) {
    16dc:	df 93       	push	r29
    16de:	cf 93       	push	r28
    16e0:	00 d0       	rcall	.+0      	; 0x16e2 <I2C_REPEATED_START_CONDITION+0x6>
    16e2:	cd b7       	in	r28, 0x3d	; 61
    16e4:	de b7       	in	r29, 0x3e	; 62
    16e6:	89 83       	std	Y+1, r24	; 0x01
    16e8:	6a 83       	std	Y+2, r22	; 0x02
	//Enable Start Condition
	SET_BIT(TWCR, 5);
    16ea:	a6 e5       	ldi	r26, 0x56	; 86
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e6 e5       	ldi	r30, 0x56	; 86
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	80 62       	ori	r24, 0x20	; 32
    16f6:	8c 93       	st	X, r24
	//Enable I2C
	SET_BIT(TWCR, 2);
    16f8:	a6 e5       	ldi	r26, 0x56	; 86
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	e6 e5       	ldi	r30, 0x56	; 86
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	84 60       	ori	r24, 0x04	; 4
    1704:	8c 93       	st	X, r24
	// Clear TWIN Flag
	SET_BIT(TWCR, 7);
    1706:	a6 e5       	ldi	r26, 0x56	; 86
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	e6 e5       	ldi	r30, 0x56	; 86
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	80 68       	ori	r24, 0x80	; 128
    1712:	8c 93       	st	X, r24
	// Wait
	while (!GET_BIT(TWCR, 7))
    1714:	e6 e5       	ldi	r30, 0x56	; 86
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	88 23       	and	r24, r24
    171c:	dc f7       	brge	.-10     	; 0x1714 <I2C_REPEATED_START_CONDITION+0x38>
	/*LCD_VIDSENDCOMMAND(LCD_Clear);
	 LCD_VIDSENDCHAR((GET_STATUS() / 100) + 48);
	 LCD_VIDSENDCHAR(((GET_STATUS() % 100) / 10) + 48);
	 LCD_VIDSENDCHAR(((GET_STATUS() % 100) % 10) + 48);*/
	//Send Slave Address
	TWDR = (Slave_Address << 1) | R_W;
    171e:	e3 e2       	ldi	r30, 0x23	; 35
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	88 2f       	mov	r24, r24
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	88 0f       	add	r24, r24
    172a:	99 1f       	adc	r25, r25
    172c:	98 2f       	mov	r25, r24
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	89 2b       	or	r24, r25
    1732:	80 83       	st	Z, r24
	//CLEAR Start Condition
	CLR_BIT(TWCR, 5);
    1734:	a6 e5       	ldi	r26, 0x56	; 86
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	e6 e5       	ldi	r30, 0x56	; 86
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	8f 7d       	andi	r24, 0xDF	; 223
    1740:	8c 93       	st	X, r24
	// Clear TWIN Flag
	SET_BIT(TWCR, 7);
    1742:	a6 e5       	ldi	r26, 0x56	; 86
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	e6 e5       	ldi	r30, 0x56	; 86
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	80 68       	ori	r24, 0x80	; 128
    174e:	8c 93       	st	X, r24
	//Enable I2C
	SET_BIT(TWCR, 2);
    1750:	a6 e5       	ldi	r26, 0x56	; 86
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	e6 e5       	ldi	r30, 0x56	; 86
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	84 60       	ori	r24, 0x04	; 4
    175c:	8c 93       	st	X, r24
	// Wait
	while (!GET_BIT(TWCR, 7))
    175e:	e6 e5       	ldi	r30, 0x56	; 86
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	88 23       	and	r24, r24
    1766:	dc f7       	brge	.-10     	; 0x175e <I2C_REPEATED_START_CONDITION+0x82>
		;
}
    1768:	0f 90       	pop	r0
    176a:	0f 90       	pop	r0
    176c:	cf 91       	pop	r28
    176e:	df 91       	pop	r29
    1770:	08 95       	ret

00001772 <I2C_READ_DATA_ACK>:
uint8 I2C_READ_DATA_ACK(void) {
    1772:	df 93       	push	r29
    1774:	cf 93       	push	r28
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62
	//Enable Acknowledge
	SET_BIT(TWCR, 6);
    177a:	a6 e5       	ldi	r26, 0x56	; 86
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e6 e5       	ldi	r30, 0x56	; 86
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	80 64       	ori	r24, 0x40	; 64
    1786:	8c 93       	st	X, r24
	//Enable I2C
	SET_BIT(TWCR, 2);
    1788:	a6 e5       	ldi	r26, 0x56	; 86
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	e6 e5       	ldi	r30, 0x56	; 86
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	84 60       	ori	r24, 0x04	; 4
    1794:	8c 93       	st	X, r24
	// Clear TWIN Flag
	SET_BIT(TWCR, 7);
    1796:	a6 e5       	ldi	r26, 0x56	; 86
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e6 e5       	ldi	r30, 0x56	; 86
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	80 68       	ori	r24, 0x80	; 128
    17a2:	8c 93       	st	X, r24
	// Wait
	while (!(GET_BIT(TWCR, 7)))
    17a4:	e6 e5       	ldi	r30, 0x56	; 86
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	88 23       	and	r24, r24
    17ac:	dc f7       	brge	.-10     	; 0x17a4 <I2C_READ_DATA_ACK+0x32>
		;
	TOGGLE_BIT(PORTB, 0);
    17ae:	a8 e3       	ldi	r26, 0x38	; 56
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	e8 e3       	ldi	r30, 0x38	; 56
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	90 81       	ld	r25, Z
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	89 27       	eor	r24, r25
    17bc:	8c 93       	st	X, r24
	return TWDR;
    17be:	e3 e2       	ldi	r30, 0x23	; 35
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
}
    17c4:	cf 91       	pop	r28
    17c6:	df 91       	pop	r29
    17c8:	08 95       	ret

000017ca <I2C_READ_DATA_NO_ACK>:

uint8 I2C_READ_DATA_NO_ACK(void) {
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
	//Enable NoAcknowledge
	CLR_BIT(TWCR, 6);
    17d2:	a6 e5       	ldi	r26, 0x56	; 86
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e6 e5       	ldi	r30, 0x56	; 86
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	8f 7b       	andi	r24, 0xBF	; 191
    17de:	8c 93       	st	X, r24
	//Enable I2C
	SET_BIT(TWCR, 2);
    17e0:	a6 e5       	ldi	r26, 0x56	; 86
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	e6 e5       	ldi	r30, 0x56	; 86
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	84 60       	ori	r24, 0x04	; 4
    17ec:	8c 93       	st	X, r24
	// Clear TWIN Flag
	SET_BIT(TWCR, 7);
    17ee:	a6 e5       	ldi	r26, 0x56	; 86
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	e6 e5       	ldi	r30, 0x56	; 86
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	80 68       	ori	r24, 0x80	; 128
    17fa:	8c 93       	st	X, r24
	// Wait
	while (!GET_BIT(TWCR, 7))
    17fc:	e6 e5       	ldi	r30, 0x56	; 86
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	88 23       	and	r24, r24
    1804:	dc f7       	brge	.-10     	; 0x17fc <I2C_READ_DATA_NO_ACK+0x32>
		;
	return TWDR;
    1806:	e3 e2       	ldi	r30, 0x23	; 35
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
}
    180c:	cf 91       	pop	r28
    180e:	df 91       	pop	r29
    1810:	08 95       	ret

00001812 <I2C_WRITE_DATA_ACK>:

void I2C_WRITE_DATA_ACK(uint8 Data) {
    1812:	df 93       	push	r29
    1814:	cf 93       	push	r28
    1816:	0f 92       	push	r0
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
    181c:	89 83       	std	Y+1, r24	; 0x01
	//Load Data
	TWDR = Data;
    181e:	e3 e2       	ldi	r30, 0x23	; 35
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	89 81       	ldd	r24, Y+1	; 0x01
    1824:	80 83       	st	Z, r24
	//Enable Acknowledge
	SET_BIT(TWCR, 6);
    1826:	a6 e5       	ldi	r26, 0x56	; 86
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	e6 e5       	ldi	r30, 0x56	; 86
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	80 64       	ori	r24, 0x40	; 64
    1832:	8c 93       	st	X, r24
	//Enable I2C
	SET_BIT(TWCR, 2);
    1834:	a6 e5       	ldi	r26, 0x56	; 86
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	e6 e5       	ldi	r30, 0x56	; 86
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	84 60       	ori	r24, 0x04	; 4
    1840:	8c 93       	st	X, r24
	// Clear TWIN Flag
	SET_BIT(TWCR, 7);
    1842:	a6 e5       	ldi	r26, 0x56	; 86
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	e6 e5       	ldi	r30, 0x56	; 86
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	80 68       	ori	r24, 0x80	; 128
    184e:	8c 93       	st	X, r24
	// Wait
	while (!GET_BIT(TWCR, 7))
    1850:	e6 e5       	ldi	r30, 0x56	; 86
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	88 23       	and	r24, r24
    1858:	dc f7       	brge	.-10     	; 0x1850 <I2C_WRITE_DATA_ACK+0x3e>
		;
}
    185a:	0f 90       	pop	r0
    185c:	cf 91       	pop	r28
    185e:	df 91       	pop	r29
    1860:	08 95       	ret

00001862 <I2C_WRITE_DATA_NO_ACK>:
void I2C_WRITE_DATA_NO_ACK(uint8 Data) {
    1862:	df 93       	push	r29
    1864:	cf 93       	push	r28
    1866:	0f 92       	push	r0
    1868:	cd b7       	in	r28, 0x3d	; 61
    186a:	de b7       	in	r29, 0x3e	; 62
    186c:	89 83       	std	Y+1, r24	; 0x01
	//Load Data
	TWDR = Data;
    186e:	e3 e2       	ldi	r30, 0x23	; 35
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	89 81       	ldd	r24, Y+1	; 0x01
    1874:	80 83       	st	Z, r24
	//Enable NoAcknowledge
	CLR_BIT(TWCR, 6);
    1876:	a6 e5       	ldi	r26, 0x56	; 86
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	e6 e5       	ldi	r30, 0x56	; 86
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	8f 7b       	andi	r24, 0xBF	; 191
    1882:	8c 93       	st	X, r24
	//Enable I2C
	SET_BIT(TWCR, 2);
    1884:	a6 e5       	ldi	r26, 0x56	; 86
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	e6 e5       	ldi	r30, 0x56	; 86
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	84 60       	ori	r24, 0x04	; 4
    1890:	8c 93       	st	X, r24
	// Clear TWIN Flag
		SET_BIT(TWCR, 7);
    1892:	a6 e5       	ldi	r26, 0x56	; 86
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	e6 e5       	ldi	r30, 0x56	; 86
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	80 68       	ori	r24, 0x80	; 128
    189e:	8c 93       	st	X, r24
	// Wait
	while (!GET_BIT(TWCR, 7))
    18a0:	e6 e5       	ldi	r30, 0x56	; 86
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	88 23       	and	r24, r24
    18a8:	dc f7       	brge	.-10     	; 0x18a0 <I2C_WRITE_DATA_NO_ACK+0x3e>
		;
}
    18aa:	0f 90       	pop	r0
    18ac:	cf 91       	pop	r28
    18ae:	df 91       	pop	r29
    18b0:	08 95       	ret

000018b2 <GET_STATUS>:

uint8 GET_STATUS(void) {
    18b2:	df 93       	push	r29
    18b4:	cf 93       	push	r28
    18b6:	cd b7       	in	r28, 0x3d	; 61
    18b8:	de b7       	in	r29, 0x3e	; 62
	return TWSR;
    18ba:	e1 e2       	ldi	r30, 0x21	; 33
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
}
    18c0:	cf 91       	pop	r28
    18c2:	df 91       	pop	r29
    18c4:	08 95       	ret

000018c6 <I2C_WRITE_STRING_ACK>:
void I2C_WRITE_STRING_ACK(uint8* Data) {
    18c6:	df 93       	push	r29
    18c8:	cf 93       	push	r28
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
    18ce:	61 97       	sbiw	r28, 0x11	; 17
    18d0:	0f b6       	in	r0, 0x3f	; 63
    18d2:	f8 94       	cli
    18d4:	de bf       	out	0x3e, r29	; 62
    18d6:	0f be       	out	0x3f, r0	; 63
    18d8:	cd bf       	out	0x3d, r28	; 61
    18da:	99 8b       	std	Y+17, r25	; 0x11
    18dc:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i = 0;
    18de:	1f 86       	std	Y+15, r1	; 0x0f
    18e0:	80 c0       	rjmp	.+256    	; 0x19e2 <I2C_WRITE_STRING_ACK+0x11c>
	while (Data[i] != '\0') {
		I2C_WRITE_DATA_ACK(Data[i]);
    18e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    18e4:	28 2f       	mov	r18, r24
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	88 89       	ldd	r24, Y+16	; 0x10
    18ea:	99 89       	ldd	r25, Y+17	; 0x11
    18ec:	fc 01       	movw	r30, r24
    18ee:	e2 0f       	add	r30, r18
    18f0:	f3 1f       	adc	r31, r19
    18f2:	80 81       	ld	r24, Z
    18f4:	0e 94 09 0c 	call	0x1812	; 0x1812 <I2C_WRITE_DATA_ACK>
		i++;
    18f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    18fa:	8f 5f       	subi	r24, 0xFF	; 255
    18fc:	8f 87       	std	Y+15, r24	; 0x0f
    18fe:	80 e0       	ldi	r24, 0x00	; 0
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	a8 ec       	ldi	r26, 0xC8	; 200
    1904:	b2 e4       	ldi	r27, 0x42	; 66
    1906:	8b 87       	std	Y+11, r24	; 0x0b
    1908:	9c 87       	std	Y+12, r25	; 0x0c
    190a:	ad 87       	std	Y+13, r26	; 0x0d
    190c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    190e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1910:	7c 85       	ldd	r23, Y+12	; 0x0c
    1912:	8d 85       	ldd	r24, Y+13	; 0x0d
    1914:	9e 85       	ldd	r25, Y+14	; 0x0e
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	4a e7       	ldi	r20, 0x7A	; 122
    191c:	55 e4       	ldi	r21, 0x45	; 69
    191e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1922:	dc 01       	movw	r26, r24
    1924:	cb 01       	movw	r24, r22
    1926:	8f 83       	std	Y+7, r24	; 0x07
    1928:	98 87       	std	Y+8, r25	; 0x08
    192a:	a9 87       	std	Y+9, r26	; 0x09
    192c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    192e:	6f 81       	ldd	r22, Y+7	; 0x07
    1930:	78 85       	ldd	r23, Y+8	; 0x08
    1932:	89 85       	ldd	r24, Y+9	; 0x09
    1934:	9a 85       	ldd	r25, Y+10	; 0x0a
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	40 e8       	ldi	r20, 0x80	; 128
    193c:	5f e3       	ldi	r21, 0x3F	; 63
    193e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1942:	88 23       	and	r24, r24
    1944:	2c f4       	brge	.+10     	; 0x1950 <I2C_WRITE_STRING_ACK+0x8a>
		__ticks = 1;
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	9e 83       	std	Y+6, r25	; 0x06
    194c:	8d 83       	std	Y+5, r24	; 0x05
    194e:	3f c0       	rjmp	.+126    	; 0x19ce <I2C_WRITE_STRING_ACK+0x108>
	else if (__tmp > 65535)
    1950:	6f 81       	ldd	r22, Y+7	; 0x07
    1952:	78 85       	ldd	r23, Y+8	; 0x08
    1954:	89 85       	ldd	r24, Y+9	; 0x09
    1956:	9a 85       	ldd	r25, Y+10	; 0x0a
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	3f ef       	ldi	r19, 0xFF	; 255
    195c:	4f e7       	ldi	r20, 0x7F	; 127
    195e:	57 e4       	ldi	r21, 0x47	; 71
    1960:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1964:	18 16       	cp	r1, r24
    1966:	4c f5       	brge	.+82     	; 0x19ba <I2C_WRITE_STRING_ACK+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1968:	6b 85       	ldd	r22, Y+11	; 0x0b
    196a:	7c 85       	ldd	r23, Y+12	; 0x0c
    196c:	8d 85       	ldd	r24, Y+13	; 0x0d
    196e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	40 e2       	ldi	r20, 0x20	; 32
    1976:	51 e4       	ldi	r21, 0x41	; 65
    1978:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    197c:	dc 01       	movw	r26, r24
    197e:	cb 01       	movw	r24, r22
    1980:	bc 01       	movw	r22, r24
    1982:	cd 01       	movw	r24, r26
    1984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	9e 83       	std	Y+6, r25	; 0x06
    198e:	8d 83       	std	Y+5, r24	; 0x05
    1990:	0f c0       	rjmp	.+30     	; 0x19b0 <I2C_WRITE_STRING_ACK+0xea>
    1992:	80 e9       	ldi	r24, 0x90	; 144
    1994:	91 e0       	ldi	r25, 0x01	; 1
    1996:	9c 83       	std	Y+4, r25	; 0x04
    1998:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    199a:	8b 81       	ldd	r24, Y+3	; 0x03
    199c:	9c 81       	ldd	r25, Y+4	; 0x04
    199e:	01 97       	sbiw	r24, 0x01	; 1
    19a0:	f1 f7       	brne	.-4      	; 0x199e <I2C_WRITE_STRING_ACK+0xd8>
    19a2:	9c 83       	std	Y+4, r25	; 0x04
    19a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a6:	8d 81       	ldd	r24, Y+5	; 0x05
    19a8:	9e 81       	ldd	r25, Y+6	; 0x06
    19aa:	01 97       	sbiw	r24, 0x01	; 1
    19ac:	9e 83       	std	Y+6, r25	; 0x06
    19ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b0:	8d 81       	ldd	r24, Y+5	; 0x05
    19b2:	9e 81       	ldd	r25, Y+6	; 0x06
    19b4:	00 97       	sbiw	r24, 0x00	; 0
    19b6:	69 f7       	brne	.-38     	; 0x1992 <I2C_WRITE_STRING_ACK+0xcc>
    19b8:	14 c0       	rjmp	.+40     	; 0x19e2 <I2C_WRITE_STRING_ACK+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ba:	6f 81       	ldd	r22, Y+7	; 0x07
    19bc:	78 85       	ldd	r23, Y+8	; 0x08
    19be:	89 85       	ldd	r24, Y+9	; 0x09
    19c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	9e 83       	std	Y+6, r25	; 0x06
    19cc:	8d 83       	std	Y+5, r24	; 0x05
    19ce:	8d 81       	ldd	r24, Y+5	; 0x05
    19d0:	9e 81       	ldd	r25, Y+6	; 0x06
    19d2:	9a 83       	std	Y+2, r25	; 0x02
    19d4:	89 83       	std	Y+1, r24	; 0x01
    19d6:	89 81       	ldd	r24, Y+1	; 0x01
    19d8:	9a 81       	ldd	r25, Y+2	; 0x02
    19da:	01 97       	sbiw	r24, 0x01	; 1
    19dc:	f1 f7       	brne	.-4      	; 0x19da <I2C_WRITE_STRING_ACK+0x114>
    19de:	9a 83       	std	Y+2, r25	; 0x02
    19e0:	89 83       	std	Y+1, r24	; 0x01
uint8 GET_STATUS(void) {
	return TWSR;
}
void I2C_WRITE_STRING_ACK(uint8* Data) {
	uint8 i = 0;
	while (Data[i] != '\0') {
    19e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    19e4:	28 2f       	mov	r18, r24
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	88 89       	ldd	r24, Y+16	; 0x10
    19ea:	99 89       	ldd	r25, Y+17	; 0x11
    19ec:	fc 01       	movw	r30, r24
    19ee:	e2 0f       	add	r30, r18
    19f0:	f3 1f       	adc	r31, r19
    19f2:	80 81       	ld	r24, Z
    19f4:	88 23       	and	r24, r24
    19f6:	09 f0       	breq	.+2      	; 0x19fa <I2C_WRITE_STRING_ACK+0x134>
    19f8:	74 cf       	rjmp	.-280    	; 0x18e2 <I2C_WRITE_STRING_ACK+0x1c>
		I2C_WRITE_DATA_ACK(Data[i]);
		i++;
		_delay_ms(100);
	}
	I2C_WRITE_DATA_ACK(Data[i]);
    19fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    19fc:	28 2f       	mov	r18, r24
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	88 89       	ldd	r24, Y+16	; 0x10
    1a02:	99 89       	ldd	r25, Y+17	; 0x11
    1a04:	fc 01       	movw	r30, r24
    1a06:	e2 0f       	add	r30, r18
    1a08:	f3 1f       	adc	r31, r19
    1a0a:	80 81       	ld	r24, Z
    1a0c:	0e 94 09 0c 	call	0x1812	; 0x1812 <I2C_WRITE_DATA_ACK>
}
    1a10:	61 96       	adiw	r28, 0x11	; 17
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	f8 94       	cli
    1a16:	de bf       	out	0x3e, r29	; 62
    1a18:	0f be       	out	0x3f, r0	; 63
    1a1a:	cd bf       	out	0x3d, r28	; 61
    1a1c:	cf 91       	pop	r28
    1a1e:	df 91       	pop	r29
    1a20:	08 95       	ret

00001a22 <I2C_READ_STRING_ACK>:

uint8* I2C_READ_STRING_ACK(void) {
    1a22:	df 93       	push	r29
    1a24:	cf 93       	push	r28
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
    1a2a:	61 97       	sbiw	r28, 0x11	; 17
    1a2c:	0f b6       	in	r0, 0x3f	; 63
    1a2e:	f8 94       	cli
    1a30:	de bf       	out	0x3e, r29	; 62
    1a32:	0f be       	out	0x3f, r0	; 63
    1a34:	cd bf       	out	0x3d, r28	; 61
	static uint8 Data[50], flag = 0;
	uint8 count = 0, d = 0, i = 0;
    1a36:	19 8a       	std	Y+17, r1	; 0x11
    1a38:	18 8a       	std	Y+16, r1	; 0x10
    1a3a:	1f 86       	std	Y+15, r1	; 0x0f
	d = I2C_READ_DATA_ACK();
    1a3c:	0e 94 b9 0b 	call	0x1772	; 0x1772 <I2C_READ_DATA_ACK>
    1a40:	88 8b       	std	Y+16, r24	; 0x10
    1a42:	8c c0       	rjmp	.+280    	; 0x1b5c <I2C_READ_STRING_ACK+0x13a>
	while (d != '\0' && count != 50) {
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	a8 ec       	ldi	r26, 0xC8	; 200
    1a4a:	b2 e4       	ldi	r27, 0x42	; 66
    1a4c:	8b 87       	std	Y+11, r24	; 0x0b
    1a4e:	9c 87       	std	Y+12, r25	; 0x0c
    1a50:	ad 87       	std	Y+13, r26	; 0x0d
    1a52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a54:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a56:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a58:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a5c:	20 e0       	ldi	r18, 0x00	; 0
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	4a e7       	ldi	r20, 0x7A	; 122
    1a62:	55 e4       	ldi	r21, 0x45	; 69
    1a64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a68:	dc 01       	movw	r26, r24
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	8f 83       	std	Y+7, r24	; 0x07
    1a6e:	98 87       	std	Y+8, r25	; 0x08
    1a70:	a9 87       	std	Y+9, r26	; 0x09
    1a72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a74:	6f 81       	ldd	r22, Y+7	; 0x07
    1a76:	78 85       	ldd	r23, Y+8	; 0x08
    1a78:	89 85       	ldd	r24, Y+9	; 0x09
    1a7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	40 e8       	ldi	r20, 0x80	; 128
    1a82:	5f e3       	ldi	r21, 0x3F	; 63
    1a84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a88:	88 23       	and	r24, r24
    1a8a:	2c f4       	brge	.+10     	; 0x1a96 <I2C_READ_STRING_ACK+0x74>
		__ticks = 1;
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	9e 83       	std	Y+6, r25	; 0x06
    1a92:	8d 83       	std	Y+5, r24	; 0x05
    1a94:	3f c0       	rjmp	.+126    	; 0x1b14 <I2C_READ_STRING_ACK+0xf2>
	else if (__tmp > 65535)
    1a96:	6f 81       	ldd	r22, Y+7	; 0x07
    1a98:	78 85       	ldd	r23, Y+8	; 0x08
    1a9a:	89 85       	ldd	r24, Y+9	; 0x09
    1a9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	3f ef       	ldi	r19, 0xFF	; 255
    1aa2:	4f e7       	ldi	r20, 0x7F	; 127
    1aa4:	57 e4       	ldi	r21, 0x47	; 71
    1aa6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aaa:	18 16       	cp	r1, r24
    1aac:	4c f5       	brge	.+82     	; 0x1b00 <I2C_READ_STRING_ACK+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aae:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	40 e2       	ldi	r20, 0x20	; 32
    1abc:	51 e4       	ldi	r21, 0x41	; 65
    1abe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	bc 01       	movw	r22, r24
    1ac8:	cd 01       	movw	r24, r26
    1aca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	9e 83       	std	Y+6, r25	; 0x06
    1ad4:	8d 83       	std	Y+5, r24	; 0x05
    1ad6:	0f c0       	rjmp	.+30     	; 0x1af6 <I2C_READ_STRING_ACK+0xd4>
    1ad8:	80 e9       	ldi	r24, 0x90	; 144
    1ada:	91 e0       	ldi	r25, 0x01	; 1
    1adc:	9c 83       	std	Y+4, r25	; 0x04
    1ade:	8b 83       	std	Y+3, r24	; 0x03
    1ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae4:	01 97       	sbiw	r24, 0x01	; 1
    1ae6:	f1 f7       	brne	.-4      	; 0x1ae4 <I2C_READ_STRING_ACK+0xc2>
    1ae8:	9c 83       	std	Y+4, r25	; 0x04
    1aea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aec:	8d 81       	ldd	r24, Y+5	; 0x05
    1aee:	9e 81       	ldd	r25, Y+6	; 0x06
    1af0:	01 97       	sbiw	r24, 0x01	; 1
    1af2:	9e 83       	std	Y+6, r25	; 0x06
    1af4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af6:	8d 81       	ldd	r24, Y+5	; 0x05
    1af8:	9e 81       	ldd	r25, Y+6	; 0x06
    1afa:	00 97       	sbiw	r24, 0x00	; 0
    1afc:	69 f7       	brne	.-38     	; 0x1ad8 <I2C_READ_STRING_ACK+0xb6>
    1afe:	14 c0       	rjmp	.+40     	; 0x1b28 <I2C_READ_STRING_ACK+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b00:	6f 81       	ldd	r22, Y+7	; 0x07
    1b02:	78 85       	ldd	r23, Y+8	; 0x08
    1b04:	89 85       	ldd	r24, Y+9	; 0x09
    1b06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	9e 83       	std	Y+6, r25	; 0x06
    1b12:	8d 83       	std	Y+5, r24	; 0x05
    1b14:	8d 81       	ldd	r24, Y+5	; 0x05
    1b16:	9e 81       	ldd	r25, Y+6	; 0x06
    1b18:	9a 83       	std	Y+2, r25	; 0x02
    1b1a:	89 83       	std	Y+1, r24	; 0x01
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b20:	01 97       	sbiw	r24, 0x01	; 1
    1b22:	f1 f7       	brne	.-4      	; 0x1b20 <I2C_READ_STRING_ACK+0xfe>
    1b24:	9a 83       	std	Y+2, r25	; 0x02
    1b26:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		Data[i] = d;
    1b28:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b2a:	88 2f       	mov	r24, r24
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	fc 01       	movw	r30, r24
    1b30:	e1 53       	subi	r30, 0x31	; 49
    1b32:	fe 4f       	sbci	r31, 0xFE	; 254
    1b34:	88 89       	ldd	r24, Y+16	; 0x10
    1b36:	80 83       	st	Z, r24
		LCD_VIDSENDCHAR(Data[i]);
    1b38:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b3a:	88 2f       	mov	r24, r24
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	fc 01       	movw	r30, r24
    1b40:	e1 53       	subi	r30, 0x31	; 49
    1b42:	fe 4f       	sbci	r31, 0xFE	; 254
    1b44:	80 81       	ld	r24, Z
    1b46:	0e 94 2f 14 	call	0x285e	; 0x285e <LCD_VIDSENDCHAR>
		d = I2C_READ_DATA_ACK();
    1b4a:	0e 94 b9 0b 	call	0x1772	; 0x1772 <I2C_READ_DATA_ACK>
    1b4e:	88 8b       	std	Y+16, r24	; 0x10
		count++;
    1b50:	89 89       	ldd	r24, Y+17	; 0x11
    1b52:	8f 5f       	subi	r24, 0xFF	; 255
    1b54:	89 8b       	std	Y+17, r24	; 0x11
		i++;
    1b56:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b58:	8f 5f       	subi	r24, 0xFF	; 255
    1b5a:	8f 87       	std	Y+15, r24	; 0x0f

uint8* I2C_READ_STRING_ACK(void) {
	static uint8 Data[50], flag = 0;
	uint8 count = 0, d = 0, i = 0;
	d = I2C_READ_DATA_ACK();
	while (d != '\0' && count != 50) {
    1b5c:	88 89       	ldd	r24, Y+16	; 0x10
    1b5e:	88 23       	and	r24, r24
    1b60:	21 f0       	breq	.+8      	; 0x1b6a <I2C_READ_STRING_ACK+0x148>
    1b62:	89 89       	ldd	r24, Y+17	; 0x11
    1b64:	82 33       	cpi	r24, 0x32	; 50
    1b66:	09 f0       	breq	.+2      	; 0x1b6a <I2C_READ_STRING_ACK+0x148>
    1b68:	6d cf       	rjmp	.-294    	; 0x1a44 <I2C_READ_STRING_ACK+0x22>
		LCD_VIDSENDCHAR(Data[i]);
		d = I2C_READ_DATA_ACK();
		count++;
		i++;
	}
	return Data;
    1b6a:	8f ec       	ldi	r24, 0xCF	; 207
    1b6c:	91 e0       	ldi	r25, 0x01	; 1
}
    1b6e:	61 96       	adiw	r28, 0x11	; 17
    1b70:	0f b6       	in	r0, 0x3f	; 63
    1b72:	f8 94       	cli
    1b74:	de bf       	out	0x3e, r29	; 62
    1b76:	0f be       	out	0x3f, r0	; 63
    1b78:	cd bf       	out	0x3d, r28	; 61
    1b7a:	cf 91       	pop	r28
    1b7c:	df 91       	pop	r29
    1b7e:	08 95       	ret

00001b80 <UART_INIT>:
#include "BIT_MATH.h"
#include "MEMMAP.h"
#include "DIO.h"
#include "UART.h"

void UART_INIT(void) {
    1b80:	df 93       	push	r29
    1b82:	cf 93       	push	r28
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62

//Set BaudRate
	UBRRL = Baudrate;
    1b88:	e9 e2       	ldi	r30, 0x29	; 41
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	87 e6       	ldi	r24, 0x67	; 103
    1b8e:	80 83       	st	Z, r24
//Set Frame
#if Data_Mode==Bits_8
	SET_BIT(UCSRC, 1);
    1b90:	a0 e4       	ldi	r26, 0x40	; 64
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	e0 e4       	ldi	r30, 0x40	; 64
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 81       	ld	r24, Z
    1b9a:	82 60       	ori	r24, 0x02	; 2
    1b9c:	8c 93       	st	X, r24
	SET_BIT(UCSRC, 2);
    1b9e:	a0 e4       	ldi	r26, 0x40	; 64
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	e0 e4       	ldi	r30, 0x40	; 64
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	84 60       	ori	r24, 0x04	; 4
    1baa:	8c 93       	st	X, r24
	CLR_BIT(UCSRB, 2);
    1bac:	aa e2       	ldi	r26, 0x2A	; 42
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	ea e2       	ldi	r30, 0x2A	; 42
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	8b 7f       	andi	r24, 0xFB	; 251
    1bb8:	8c 93       	st	X, r24

#endif
//set Stop Bit
#if Stop_Bits==2
	SET_BIT(UCSRC, 3);
    1bba:	a0 e4       	ldi	r26, 0x40	; 64
    1bbc:	b0 e0       	ldi	r27, 0x00	; 0
    1bbe:	e0 e4       	ldi	r30, 0x40	; 64
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	80 81       	ld	r24, Z
    1bc4:	88 60       	ori	r24, 0x08	; 8
    1bc6:	8c 93       	st	X, r24
#endif
//set Parity
#if Parity_Mode==No_Parity
	CLR_BIT(UCSRC, 4);
    1bc8:	a0 e4       	ldi	r26, 0x40	; 64
    1bca:	b0 e0       	ldi	r27, 0x00	; 0
    1bcc:	e0 e4       	ldi	r30, 0x40	; 64
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	80 81       	ld	r24, Z
    1bd2:	8f 7e       	andi	r24, 0xEF	; 239
    1bd4:	8c 93       	st	X, r24
	CLR_BIT(UCSRC, 5);
    1bd6:	a0 e4       	ldi	r26, 0x40	; 64
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	e0 e4       	ldi	r30, 0x40	; 64
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	8f 7d       	andi	r24, 0xDF	; 223
    1be2:	8c 93       	st	X, r24
#endif
//set Asynchronous Mode
	CLR_BIT(UCSRC, 6);
    1be4:	a0 e4       	ldi	r26, 0x40	; 64
    1be6:	b0 e0       	ldi	r27, 0x00	; 0
    1be8:	e0 e4       	ldi	r30, 0x40	; 64
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	80 81       	ld	r24, Z
    1bee:	8f 7b       	andi	r24, 0xBF	; 191
    1bf0:	8c 93       	st	X, r24
}
    1bf2:	cf 91       	pop	r28
    1bf4:	df 91       	pop	r29
    1bf6:	08 95       	ret

00001bf8 <UART_send_char>:

void UART_send_char(uint8 Data) {
    1bf8:	df 93       	push	r29
    1bfa:	cf 93       	push	r28
    1bfc:	0f 92       	push	r0
    1bfe:	cd b7       	in	r28, 0x3d	; 61
    1c00:	de b7       	in	r29, 0x3e	; 62
    1c02:	89 83       	std	Y+1, r24	; 0x01

	//Enable Transmitter
	SET_BIT(UCSRB, 3);
    1c04:	aa e2       	ldi	r26, 0x2A	; 42
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	ea e2       	ldi	r30, 0x2A	; 42
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	88 60       	ori	r24, 0x08	; 8
    1c10:	8c 93       	st	X, r24
	//Wait
	while (!(GET_BIT(UCSRA, 5)))
    1c12:	eb e2       	ldi	r30, 0x2B	; 43
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	82 95       	swap	r24
    1c1a:	86 95       	lsr	r24
    1c1c:	87 70       	andi	r24, 0x07	; 7
    1c1e:	88 2f       	mov	r24, r24
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	81 70       	andi	r24, 0x01	; 1
    1c24:	90 70       	andi	r25, 0x00	; 0
    1c26:	00 97       	sbiw	r24, 0x00	; 0
    1c28:	a1 f3       	breq	.-24     	; 0x1c12 <UART_send_char+0x1a>
		;
	//put Data
	UDR = Data;
    1c2a:	ec e2       	ldi	r30, 0x2C	; 44
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	89 81       	ldd	r24, Y+1	; 0x01
    1c30:	80 83       	st	Z, r24

}
    1c32:	0f 90       	pop	r0
    1c34:	cf 91       	pop	r28
    1c36:	df 91       	pop	r29
    1c38:	08 95       	ret

00001c3a <UART_recieve_char>:

uint8 UART_recieve_char(void) {
    1c3a:	df 93       	push	r29
    1c3c:	cf 93       	push	r28
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
	//Enable Reciever
	SET_BIT(UCSRB, 4);
    1c42:	aa e2       	ldi	r26, 0x2A	; 42
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	ea e2       	ldi	r30, 0x2A	; 42
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	80 61       	ori	r24, 0x10	; 16
    1c4e:	8c 93       	st	X, r24
	//Wait
	while (!(GET_BIT(UCSRA, 7)))
    1c50:	eb e2       	ldi	r30, 0x2B	; 43
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	88 23       	and	r24, r24
    1c58:	dc f7       	brge	.-10     	; 0x1c50 <UART_recieve_char+0x16>
		;
	//put Data
	return UDR;
    1c5a:	ec e2       	ldi	r30, 0x2C	; 44
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
}
    1c60:	cf 91       	pop	r28
    1c62:	df 91       	pop	r29
    1c64:	08 95       	ret

00001c66 <UART_recieve_char_with_Interrupt>:
void UART_recieve_char_with_Interrupt(void) {
    1c66:	df 93       	push	r29
    1c68:	cf 93       	push	r28
    1c6a:	cd b7       	in	r28, 0x3d	; 61
    1c6c:	de b7       	in	r29, 0x3e	; 62
	//Enable Reciever
	SET_BIT(UCSRB, 4);
    1c6e:	aa e2       	ldi	r26, 0x2A	; 42
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	ea e2       	ldi	r30, 0x2A	; 42
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	80 61       	ori	r24, 0x10	; 16
    1c7a:	8c 93       	st	X, r24
	//Enable RX Interrupt complete
	SET_BIT(UCSRB, 7);
    1c7c:	aa e2       	ldi	r26, 0x2A	; 42
    1c7e:	b0 e0       	ldi	r27, 0x00	; 0
    1c80:	ea e2       	ldi	r30, 0x2A	; 42
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	80 68       	ori	r24, 0x80	; 128
    1c88:	8c 93       	st	X, r24
	SET_BIT(SREG, 7);
    1c8a:	af e5       	ldi	r26, 0x5F	; 95
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	ef e5       	ldi	r30, 0x5F	; 95
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	80 68       	ori	r24, 0x80	; 128
    1c96:	8c 93       	st	X, r24

}
    1c98:	cf 91       	pop	r28
    1c9a:	df 91       	pop	r29
    1c9c:	08 95       	ret

00001c9e <UART_send_string>:
void UART_send_string(uint8* Data, uint8 len) {
    1c9e:	df 93       	push	r29
    1ca0:	cf 93       	push	r28
    1ca2:	cd b7       	in	r28, 0x3d	; 61
    1ca4:	de b7       	in	r29, 0x3e	; 62
    1ca6:	62 97       	sbiw	r28, 0x12	; 18
    1ca8:	0f b6       	in	r0, 0x3f	; 63
    1caa:	f8 94       	cli
    1cac:	de bf       	out	0x3e, r29	; 62
    1cae:	0f be       	out	0x3f, r0	; 63
    1cb0:	cd bf       	out	0x3d, r28	; 61
    1cb2:	99 8b       	std	Y+17, r25	; 0x11
    1cb4:	88 8b       	std	Y+16, r24	; 0x10
    1cb6:	6a 8b       	std	Y+18, r22	; 0x12
	uint8 i;
	for (i = 0; i < len; i++) {
    1cb8:	1f 86       	std	Y+15, r1	; 0x0f
    1cba:	80 c0       	rjmp	.+256    	; 0x1dbc <UART_send_string+0x11e>
		UART_send_char(Data[i]);
    1cbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cbe:	28 2f       	mov	r18, r24
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	88 89       	ldd	r24, Y+16	; 0x10
    1cc4:	99 89       	ldd	r25, Y+17	; 0x11
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	e2 0f       	add	r30, r18
    1cca:	f3 1f       	adc	r31, r19
    1ccc:	80 81       	ld	r24, Z
    1cce:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <UART_send_char>
    1cd2:	80 e0       	ldi	r24, 0x00	; 0
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	a0 e2       	ldi	r26, 0x20	; 32
    1cd8:	b1 e4       	ldi	r27, 0x41	; 65
    1cda:	8b 87       	std	Y+11, r24	; 0x0b
    1cdc:	9c 87       	std	Y+12, r25	; 0x0c
    1cde:	ad 87       	std	Y+13, r26	; 0x0d
    1ce0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ce4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ce6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ce8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	4a e7       	ldi	r20, 0x7A	; 122
    1cf0:	55 e4       	ldi	r21, 0x45	; 69
    1cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	8f 83       	std	Y+7, r24	; 0x07
    1cfc:	98 87       	std	Y+8, r25	; 0x08
    1cfe:	a9 87       	std	Y+9, r26	; 0x09
    1d00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d02:	6f 81       	ldd	r22, Y+7	; 0x07
    1d04:	78 85       	ldd	r23, Y+8	; 0x08
    1d06:	89 85       	ldd	r24, Y+9	; 0x09
    1d08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	40 e8       	ldi	r20, 0x80	; 128
    1d10:	5f e3       	ldi	r21, 0x3F	; 63
    1d12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d16:	88 23       	and	r24, r24
    1d18:	2c f4       	brge	.+10     	; 0x1d24 <UART_send_string+0x86>
		__ticks = 1;
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	9e 83       	std	Y+6, r25	; 0x06
    1d20:	8d 83       	std	Y+5, r24	; 0x05
    1d22:	3f c0       	rjmp	.+126    	; 0x1da2 <UART_send_string+0x104>
	else if (__tmp > 65535)
    1d24:	6f 81       	ldd	r22, Y+7	; 0x07
    1d26:	78 85       	ldd	r23, Y+8	; 0x08
    1d28:	89 85       	ldd	r24, Y+9	; 0x09
    1d2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	3f ef       	ldi	r19, 0xFF	; 255
    1d30:	4f e7       	ldi	r20, 0x7F	; 127
    1d32:	57 e4       	ldi	r21, 0x47	; 71
    1d34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d38:	18 16       	cp	r1, r24
    1d3a:	4c f5       	brge	.+82     	; 0x1d8e <UART_send_string+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	40 e2       	ldi	r20, 0x20	; 32
    1d4a:	51 e4       	ldi	r21, 0x41	; 65
    1d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	bc 01       	movw	r22, r24
    1d56:	cd 01       	movw	r24, r26
    1d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	9e 83       	std	Y+6, r25	; 0x06
    1d62:	8d 83       	std	Y+5, r24	; 0x05
    1d64:	0f c0       	rjmp	.+30     	; 0x1d84 <UART_send_string+0xe6>
    1d66:	80 e9       	ldi	r24, 0x90	; 144
    1d68:	91 e0       	ldi	r25, 0x01	; 1
    1d6a:	9c 83       	std	Y+4, r25	; 0x04
    1d6c:	8b 83       	std	Y+3, r24	; 0x03
    1d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d70:	9c 81       	ldd	r25, Y+4	; 0x04
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	f1 f7       	brne	.-4      	; 0x1d72 <UART_send_string+0xd4>
    1d76:	9c 83       	std	Y+4, r25	; 0x04
    1d78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7e:	01 97       	sbiw	r24, 0x01	; 1
    1d80:	9e 83       	std	Y+6, r25	; 0x06
    1d82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d84:	8d 81       	ldd	r24, Y+5	; 0x05
    1d86:	9e 81       	ldd	r25, Y+6	; 0x06
    1d88:	00 97       	sbiw	r24, 0x00	; 0
    1d8a:	69 f7       	brne	.-38     	; 0x1d66 <UART_send_string+0xc8>
    1d8c:	14 c0       	rjmp	.+40     	; 0x1db6 <UART_send_string+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d90:	78 85       	ldd	r23, Y+8	; 0x08
    1d92:	89 85       	ldd	r24, Y+9	; 0x09
    1d94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	9e 83       	std	Y+6, r25	; 0x06
    1da0:	8d 83       	std	Y+5, r24	; 0x05
    1da2:	8d 81       	ldd	r24, Y+5	; 0x05
    1da4:	9e 81       	ldd	r25, Y+6	; 0x06
    1da6:	9a 83       	std	Y+2, r25	; 0x02
    1da8:	89 83       	std	Y+1, r24	; 0x01
    1daa:	89 81       	ldd	r24, Y+1	; 0x01
    1dac:	9a 81       	ldd	r25, Y+2	; 0x02
    1dae:	01 97       	sbiw	r24, 0x01	; 1
    1db0:	f1 f7       	brne	.-4      	; 0x1dae <UART_send_string+0x110>
    1db2:	9a 83       	std	Y+2, r25	; 0x02
    1db4:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(SREG, 7);

}
void UART_send_string(uint8* Data, uint8 len) {
	uint8 i;
	for (i = 0; i < len; i++) {
    1db6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1db8:	8f 5f       	subi	r24, 0xFF	; 255
    1dba:	8f 87       	std	Y+15, r24	; 0x0f
    1dbc:	9f 85       	ldd	r25, Y+15	; 0x0f
    1dbe:	8a 89       	ldd	r24, Y+18	; 0x12
    1dc0:	98 17       	cp	r25, r24
    1dc2:	08 f4       	brcc	.+2      	; 0x1dc6 <UART_send_string+0x128>
    1dc4:	7b cf       	rjmp	.-266    	; 0x1cbc <UART_send_string+0x1e>
		UART_send_char(Data[i]);
		_delay_ms(10);
	}
}
    1dc6:	62 96       	adiw	r28, 0x12	; 18
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	f8 94       	cli
    1dcc:	de bf       	out	0x3e, r29	; 62
    1dce:	0f be       	out	0x3f, r0	; 63
    1dd0:	cd bf       	out	0x3d, r28	; 61
    1dd2:	cf 91       	pop	r28
    1dd4:	df 91       	pop	r29
    1dd6:	08 95       	ret

00001dd8 <UART_recieve_string>:
uint8* UART_recieve_string(void) {
    1dd8:	0f 93       	push	r16
    1dda:	1f 93       	push	r17
    1ddc:	df 93       	push	r29
    1dde:	cf 93       	push	r28
    1de0:	0f 92       	push	r0
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
	static uint8 data[50];
	uint8 count=0;
    1de6:	19 82       	std	Y+1, r1	; 0x01
	data[count]=UART_recieve_char();
    1de8:	89 81       	ldd	r24, Y+1	; 0x01
    1dea:	08 2f       	mov	r16, r24
    1dec:	10 e0       	ldi	r17, 0x00	; 0
    1dee:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <UART_recieve_char>
    1df2:	f8 01       	movw	r30, r16
    1df4:	ef 5f       	subi	r30, 0xFF	; 255
    1df6:	fd 4f       	sbci	r31, 0xFD	; 253
    1df8:	80 83       	st	Z, r24
    1dfa:	0c c0       	rjmp	.+24     	; 0x1e14 <UART_recieve_string+0x3c>
	while(count!=50 || data[count]!='\0'){
		(count)++;
    1dfc:	89 81       	ldd	r24, Y+1	; 0x01
    1dfe:	8f 5f       	subi	r24, 0xFF	; 255
    1e00:	89 83       	std	Y+1, r24	; 0x01
		data[count]=UART_recieve_char();
    1e02:	89 81       	ldd	r24, Y+1	; 0x01
    1e04:	08 2f       	mov	r16, r24
    1e06:	10 e0       	ldi	r17, 0x00	; 0
    1e08:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <UART_recieve_char>
    1e0c:	f8 01       	movw	r30, r16
    1e0e:	ef 5f       	subi	r30, 0xFF	; 255
    1e10:	fd 4f       	sbci	r31, 0xFD	; 253
    1e12:	80 83       	st	Z, r24
}
uint8* UART_recieve_string(void) {
	static uint8 data[50];
	uint8 count=0;
	data[count]=UART_recieve_char();
	while(count!=50 || data[count]!='\0'){
    1e14:	89 81       	ldd	r24, Y+1	; 0x01
    1e16:	82 33       	cpi	r24, 0x32	; 50
    1e18:	89 f7       	brne	.-30     	; 0x1dfc <UART_recieve_string+0x24>
    1e1a:	89 81       	ldd	r24, Y+1	; 0x01
    1e1c:	88 2f       	mov	r24, r24
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	fc 01       	movw	r30, r24
    1e22:	ef 5f       	subi	r30, 0xFF	; 255
    1e24:	fd 4f       	sbci	r31, 0xFD	; 253
    1e26:	80 81       	ld	r24, Z
    1e28:	88 23       	and	r24, r24
    1e2a:	41 f7       	brne	.-48     	; 0x1dfc <UART_recieve_string+0x24>
		(count)++;
		data[count]=UART_recieve_char();
	}
	return data;
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	92 e0       	ldi	r25, 0x02	; 2
}
    1e30:	0f 90       	pop	r0
    1e32:	cf 91       	pop	r28
    1e34:	df 91       	pop	r29
    1e36:	1f 91       	pop	r17
    1e38:	0f 91       	pop	r16
    1e3a:	08 95       	ret

00001e3c <WDG_ENABLE>:
#include "MEMMAP.h"
#include "DIO.h"
#include <util/delay.h>
#include"WDG.h"

void WDG_ENABLE(void) {
    1e3c:	df 93       	push	r29
    1e3e:	cf 93       	push	r28
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62
	//Timer Prescale Select
	SET_BIT(WDTCR, 0);
    1e44:	a1 e4       	ldi	r26, 0x41	; 65
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	e1 e4       	ldi	r30, 0x41	; 65
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	80 81       	ld	r24, Z
    1e4e:	81 60       	ori	r24, 0x01	; 1
    1e50:	8c 93       	st	X, r24
	SET_BIT(WDTCR, 1);
    1e52:	a1 e4       	ldi	r26, 0x41	; 65
    1e54:	b0 e0       	ldi	r27, 0x00	; 0
    1e56:	e1 e4       	ldi	r30, 0x41	; 65
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	82 60       	ori	r24, 0x02	; 2
    1e5e:	8c 93       	st	X, r24
	SET_BIT(WDTCR, 2);
    1e60:	a1 e4       	ldi	r26, 0x41	; 65
    1e62:	b0 e0       	ldi	r27, 0x00	; 0
    1e64:	e1 e4       	ldi	r30, 0x41	; 65
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	80 81       	ld	r24, Z
    1e6a:	84 60       	ori	r24, 0x04	; 4
    1e6c:	8c 93       	st	X, r24
	//Timer Enable
	SET_BIT(WDTCR, 3);
    1e6e:	a1 e4       	ldi	r26, 0x41	; 65
    1e70:	b0 e0       	ldi	r27, 0x00	; 0
    1e72:	e1 e4       	ldi	r30, 0x41	; 65
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	80 81       	ld	r24, Z
    1e78:	88 60       	ori	r24, 0x08	; 8
    1e7a:	8c 93       	st	X, r24
}
    1e7c:	cf 91       	pop	r28
    1e7e:	df 91       	pop	r29
    1e80:	08 95       	ret

00001e82 <WDG_DISABLE>:

void WDG_DISABLE(void) {
    1e82:	df 93       	push	r29
    1e84:	cf 93       	push	r28
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
	//Timer Enable Select
	SET_BIT(WDTCR, 3);
    1e8a:	a1 e4       	ldi	r26, 0x41	; 65
    1e8c:	b0 e0       	ldi	r27, 0x00	; 0
    1e8e:	e1 e4       	ldi	r30, 0x41	; 65
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	88 60       	ori	r24, 0x08	; 8
    1e96:	8c 93       	st	X, r24
	SET_BIT(WDTCR, 4);
    1e98:	a1 e4       	ldi	r26, 0x41	; 65
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	e1 e4       	ldi	r30, 0x41	; 65
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	80 81       	ld	r24, Z
    1ea2:	80 61       	ori	r24, 0x10	; 16
    1ea4:	8c 93       	st	X, r24
	//_delay_ms(1000);
	//Timer Disable Select
	CLR_BIT(WDTCR, 3);
    1ea6:	a1 e4       	ldi	r26, 0x41	; 65
    1ea8:	b0 e0       	ldi	r27, 0x00	; 0
    1eaa:	e1 e4       	ldi	r30, 0x41	; 65
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
    1eb0:	87 7f       	andi	r24, 0xF7	; 247
    1eb2:	8c 93       	st	X, r24
}
    1eb4:	cf 91       	pop	r28
    1eb6:	df 91       	pop	r29
    1eb8:	08 95       	ret

00001eba <WDG_REFRESH>:

void WDG_REFRESH(void){
    1eba:	df 93       	push	r29
    1ebc:	cf 93       	push	r28
    1ebe:	cd b7       	in	r28, 0x3d	; 61
    1ec0:	de b7       	in	r29, 0x3e	; 62
	asm volatile("wdr");
    1ec2:	a8 95       	wdr
}
    1ec4:	cf 91       	pop	r28
    1ec6:	df 91       	pop	r29
    1ec8:	08 95       	ret

00001eca <KEYPAD_READ>:

static uint8 KEYPAD_3[3][3] = { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } };
static uint8 KEYPAD_4[4][4] = { { 7, 8, 9, '/' }, { 4, 5, 6, '*' }, { 1, 2, 3,
		'-' }, { 'c', 0, '=', '+' } };

uint8 KEYPAD_READ(void) {
    1eca:	df 93       	push	r29
    1ecc:	cf 93       	push	r28
    1ece:	00 d0       	rcall	.+0      	; 0x1ed0 <KEYPAD_READ+0x6>
    1ed0:	0f 92       	push	r0
    1ed2:	cd b7       	in	r28, 0x3d	; 61
    1ed4:	de b7       	in	r29, 0x3e	; 62
	uint8 key = NOT_PRESSED, r, c;
    1ed6:	8d e6       	ldi	r24, 0x6D	; 109
    1ed8:	8b 83       	std	Y+3, r24	; 0x03
	DIO_WRITECHANNEL( KEYPAD_WRITEPORT, HIGH);
    1eda:	8c e0       	ldi	r24, 0x0C	; 12
    1edc:	61 e0       	ldi	r22, 0x01	; 1
    1ede:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
	DIO_WRITECHANNEL( KEYPAD_WRITEPORT + 1, HIGH);
    1ee2:	8d e0       	ldi	r24, 0x0D	; 13
    1ee4:	61 e0       	ldi	r22, 0x01	; 1
    1ee6:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
	DIO_WRITECHANNEL( KEYPAD_WRITEPORT + 2, HIGH);
    1eea:	8e e0       	ldi	r24, 0x0E	; 14
    1eec:	61 e0       	ldi	r22, 0x01	; 1
    1eee:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
	DIO_WRITECHANNEL( KEYPAD_WRITEPORT + 3, HIGH);
    1ef2:	8f e0       	ldi	r24, 0x0F	; 15
    1ef4:	61 e0       	ldi	r22, 0x01	; 1
    1ef6:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
		DIO_WRITECHANNEL(KEYPAD_WRITEPORT + r, HIGH);
	}

#elif KEYPAD_TYPE== KEYPAD_4_BY_4

	for (r = 0; r < 4; r++) {
    1efa:	1a 82       	std	Y+2, r1	; 0x02
    1efc:	33 c0       	rjmp	.+102    	; 0x1f64 <KEYPAD_READ+0x9a>
		DIO_WRITECHANNEL( KEYPAD_WRITEPORT + r, LOW);
    1efe:	8a 81       	ldd	r24, Y+2	; 0x02
    1f00:	84 5f       	subi	r24, 0xF4	; 244
    1f02:	60 e0       	ldi	r22, 0x00	; 0
    1f04:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
		for (c = 0; c < 4; c++) {
    1f08:	19 82       	std	Y+1, r1	; 0x01
    1f0a:	21 c0       	rjmp	.+66     	; 0x1f4e <KEYPAD_READ+0x84>
			if (!DIO_READCHANNEL(KEYPAD_READPORT + c)) {
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	86 5e       	subi	r24, 0xE6	; 230
    1f10:	0e 94 49 08 	call	0x1092	; 0x1092 <DIO_READCHANNEL>
    1f14:	88 23       	and	r24, r24
    1f16:	c1 f4       	brne	.+48     	; 0x1f48 <KEYPAD_READ+0x7e>
				key = KEYPAD_4[r][c];
    1f18:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1a:	48 2f       	mov	r20, r24
    1f1c:	50 e0       	ldi	r21, 0x00	; 0
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
    1f20:	28 2f       	mov	r18, r24
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	ca 01       	movw	r24, r20
    1f26:	88 0f       	add	r24, r24
    1f28:	99 1f       	adc	r25, r25
    1f2a:	88 0f       	add	r24, r24
    1f2c:	99 1f       	adc	r25, r25
    1f2e:	82 0f       	add	r24, r18
    1f30:	93 1f       	adc	r25, r19
    1f32:	fc 01       	movw	r30, r24
    1f34:	ef 5a       	subi	r30, 0xAF	; 175
    1f36:	fe 4f       	sbci	r31, 0xFE	; 254
    1f38:	80 81       	ld	r24, Z
    1f3a:	8b 83       	std	Y+3, r24	; 0x03
				while (!DIO_READCHANNEL(KEYPAD_READPORT+c))
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
    1f3e:	86 5e       	subi	r24, 0xE6	; 230
    1f40:	0e 94 49 08 	call	0x1092	; 0x1092 <DIO_READCHANNEL>
    1f44:	88 23       	and	r24, r24
    1f46:	d1 f3       	breq	.-12     	; 0x1f3c <KEYPAD_READ+0x72>

#elif KEYPAD_TYPE== KEYPAD_4_BY_4

	for (r = 0; r < 4; r++) {
		DIO_WRITECHANNEL( KEYPAD_WRITEPORT + r, LOW);
		for (c = 0; c < 4; c++) {
    1f48:	89 81       	ldd	r24, Y+1	; 0x01
    1f4a:	8f 5f       	subi	r24, 0xFF	; 255
    1f4c:	89 83       	std	Y+1, r24	; 0x01
    1f4e:	89 81       	ldd	r24, Y+1	; 0x01
    1f50:	84 30       	cpi	r24, 0x04	; 4
    1f52:	e0 f2       	brcs	.-72     	; 0x1f0c <KEYPAD_READ+0x42>
				key = KEYPAD_4[r][c];
				while (!DIO_READCHANNEL(KEYPAD_READPORT+c))
				;
			}
		}
		DIO_WRITECHANNEL(KEYPAD_WRITEPORT+r, HIGH);
    1f54:	8a 81       	ldd	r24, Y+2	; 0x02
    1f56:	84 5f       	subi	r24, 0xF4	; 244
    1f58:	61 e0       	ldi	r22, 0x01	; 1
    1f5a:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
		DIO_WRITECHANNEL(KEYPAD_WRITEPORT + r, HIGH);
	}

#elif KEYPAD_TYPE== KEYPAD_4_BY_4

	for (r = 0; r < 4; r++) {
    1f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f60:	8f 5f       	subi	r24, 0xFF	; 255
    1f62:	8a 83       	std	Y+2, r24	; 0x02
    1f64:	8a 81       	ldd	r24, Y+2	; 0x02
    1f66:	84 30       	cpi	r24, 0x04	; 4
    1f68:	50 f2       	brcs	.-108    	; 0x1efe <KEYPAD_READ+0x34>
			}
		}
		DIO_WRITECHANNEL(KEYPAD_WRITEPORT+r, HIGH);
	}
#endif
	return key;
    1f6a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1f6c:	0f 90       	pop	r0
    1f6e:	0f 90       	pop	r0
    1f70:	0f 90       	pop	r0
    1f72:	cf 91       	pop	r28
    1f74:	df 91       	pop	r29
    1f76:	08 95       	ret

00001f78 <KEYPAD_READDEBOUNCING>:
uint8 KEYPAD_READDEBOUNCING(void) {
    1f78:	df 93       	push	r29
    1f7a:	cf 93       	push	r28
    1f7c:	00 d0       	rcall	.+0      	; 0x1f7e <KEYPAD_READDEBOUNCING+0x6>
    1f7e:	00 d0       	rcall	.+0      	; 0x1f80 <KEYPAD_READDEBOUNCING+0x8>
    1f80:	cd b7       	in	r28, 0x3d	; 61
    1f82:	de b7       	in	r29, 0x3e	; 62
	uint8 key = NOT_PRESSED, r, c;
    1f84:	8d e6       	ldi	r24, 0x6D	; 109
    1f86:	8c 83       	std	Y+4, r24	; 0x04
	static uint8 PREVIOUS_KEY = NOT_PRESSED,count=0;
	uint8 CURRENT_KEY = NOT_PRESSED;
    1f88:	8d e6       	ldi	r24, 0x6D	; 109
    1f8a:	89 83       	std	Y+1, r24	; 0x01

	DIO_WRITECHANNEL( KEYPAD_WRITEPORT, HIGH);
    1f8c:	8c e0       	ldi	r24, 0x0C	; 12
    1f8e:	61 e0       	ldi	r22, 0x01	; 1
    1f90:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
	DIO_WRITECHANNEL( KEYPAD_WRITEPORT + 1, HIGH);
    1f94:	8d e0       	ldi	r24, 0x0D	; 13
    1f96:	61 e0       	ldi	r22, 0x01	; 1
    1f98:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
	DIO_WRITECHANNEL( KEYPAD_WRITEPORT + 2, HIGH);
    1f9c:	8e e0       	ldi	r24, 0x0E	; 14
    1f9e:	61 e0       	ldi	r22, 0x01	; 1
    1fa0:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
	DIO_WRITECHANNEL( KEYPAD_WRITEPORT + 3, HIGH);
    1fa4:	8f e0       	ldi	r24, 0x0F	; 15
    1fa6:	61 e0       	ldi	r22, 0x01	; 1
    1fa8:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
		DIO_WRITECHANNEL(KEYPAD_WRITEPORT + r, HIGH);
	}

#elif KEYPAD_TYPE== KEYPAD_4_BY_4

	for (r = 0; r < 4; r++) {
    1fac:	1b 82       	std	Y+3, r1	; 0x03
    1fae:	43 c0       	rjmp	.+134    	; 0x2036 <KEYPAD_READDEBOUNCING+0xbe>
		DIO_WRITECHANNEL( KEYPAD_WRITEPORT + r, LOW);
    1fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb2:	84 5f       	subi	r24, 0xF4	; 244
    1fb4:	60 e0       	ldi	r22, 0x00	; 0
    1fb6:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
		for (c = 0; c < 4; c++) {
    1fba:	1a 82       	std	Y+2, r1	; 0x02
    1fbc:	31 c0       	rjmp	.+98     	; 0x2020 <KEYPAD_READDEBOUNCING+0xa8>
			if (!DIO_READCHANNEL(KEYPAD_READPORT + c)) {
    1fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc0:	86 5e       	subi	r24, 0xE6	; 230
    1fc2:	0e 94 49 08 	call	0x1092	; 0x1092 <DIO_READCHANNEL>
    1fc6:	88 23       	and	r24, r24
    1fc8:	41 f5       	brne	.+80     	; 0x201a <KEYPAD_READDEBOUNCING+0xa2>
				CURRENT_KEY = KEYPAD_4[r][c];
    1fca:	8b 81       	ldd	r24, Y+3	; 0x03
    1fcc:	48 2f       	mov	r20, r24
    1fce:	50 e0       	ldi	r21, 0x00	; 0
    1fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd2:	28 2f       	mov	r18, r24
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	ca 01       	movw	r24, r20
    1fd8:	88 0f       	add	r24, r24
    1fda:	99 1f       	adc	r25, r25
    1fdc:	88 0f       	add	r24, r24
    1fde:	99 1f       	adc	r25, r25
    1fe0:	82 0f       	add	r24, r18
    1fe2:	93 1f       	adc	r25, r19
    1fe4:	fc 01       	movw	r30, r24
    1fe6:	ef 5a       	subi	r30, 0xAF	; 175
    1fe8:	fe 4f       	sbci	r31, 0xFE	; 254
    1fea:	80 81       	ld	r24, Z
    1fec:	89 83       	std	Y+1, r24	; 0x01
				if(PREVIOUS_KEY==CURRENT_KEY) {
    1fee:	90 91 61 01 	lds	r25, 0x0161
    1ff2:	89 81       	ldd	r24, Y+1	; 0x01
    1ff4:	98 17       	cp	r25, r24
    1ff6:	31 f4       	brne	.+12     	; 0x2004 <KEYPAD_READDEBOUNCING+0x8c>
					count++;
    1ff8:	80 91 33 02 	lds	r24, 0x0233
    1ffc:	8f 5f       	subi	r24, 0xFF	; 255
    1ffe:	80 93 33 02 	sts	0x0233, r24
    2002:	02 c0       	rjmp	.+4      	; 0x2008 <KEYPAD_READDEBOUNCING+0x90>
				}
				else {count=0;}
    2004:	10 92 33 02 	sts	0x0233, r1
				if(count==5) {
    2008:	80 91 33 02 	lds	r24, 0x0233
    200c:	85 30       	cpi	r24, 0x05	; 5
    200e:	11 f4       	brne	.+4      	; 0x2014 <KEYPAD_READDEBOUNCING+0x9c>
					key=CURRENT_KEY;
    2010:	89 81       	ldd	r24, Y+1	; 0x01
    2012:	8c 83       	std	Y+4, r24	; 0x04
				}
				PREVIOUS_KEY=CURRENT_KEY;
    2014:	89 81       	ldd	r24, Y+1	; 0x01
    2016:	80 93 61 01 	sts	0x0161, r24

#elif KEYPAD_TYPE== KEYPAD_4_BY_4

	for (r = 0; r < 4; r++) {
		DIO_WRITECHANNEL( KEYPAD_WRITEPORT + r, LOW);
		for (c = 0; c < 4; c++) {
    201a:	8a 81       	ldd	r24, Y+2	; 0x02
    201c:	8f 5f       	subi	r24, 0xFF	; 255
    201e:	8a 83       	std	Y+2, r24	; 0x02
    2020:	8a 81       	ldd	r24, Y+2	; 0x02
    2022:	84 30       	cpi	r24, 0x04	; 4
    2024:	60 f2       	brcs	.-104    	; 0x1fbe <KEYPAD_READDEBOUNCING+0x46>
				}
				PREVIOUS_KEY=CURRENT_KEY;
				//TOGGLE_BIT(PORTA,0);
			}
		}
		DIO_WRITECHANNEL(KEYPAD_WRITEPORT+r, HIGH);
    2026:	8b 81       	ldd	r24, Y+3	; 0x03
    2028:	84 5f       	subi	r24, 0xF4	; 244
    202a:	61 e0       	ldi	r22, 0x01	; 1
    202c:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
		DIO_WRITECHANNEL(KEYPAD_WRITEPORT + r, HIGH);
	}

#elif KEYPAD_TYPE== KEYPAD_4_BY_4

	for (r = 0; r < 4; r++) {
    2030:	8b 81       	ldd	r24, Y+3	; 0x03
    2032:	8f 5f       	subi	r24, 0xFF	; 255
    2034:	8b 83       	std	Y+3, r24	; 0x03
    2036:	8b 81       	ldd	r24, Y+3	; 0x03
    2038:	84 30       	cpi	r24, 0x04	; 4
    203a:	08 f4       	brcc	.+2      	; 0x203e <KEYPAD_READDEBOUNCING+0xc6>
    203c:	b9 cf       	rjmp	.-142    	; 0x1fb0 <KEYPAD_READDEBOUNCING+0x38>
			}
		}
		DIO_WRITECHANNEL(KEYPAD_WRITEPORT+r, HIGH);
	}
#endif
	return key;
    203e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2040:	0f 90       	pop	r0
    2042:	0f 90       	pop	r0
    2044:	0f 90       	pop	r0
    2046:	0f 90       	pop	r0
    2048:	cf 91       	pop	r28
    204a:	df 91       	pop	r29
    204c:	08 95       	ret

0000204e <LCD_VIDSENDCOMMAND>:
#include "MEMMAP.h"
#include <util/delay.h>
#include "DIO.h"
#include "LCD.h"

void LCD_VIDSENDCOMMAND(uint8 Command) {
    204e:	1f 93       	push	r17
    2050:	df 93       	push	r29
    2052:	cf 93       	push	r28
    2054:	cd b7       	in	r28, 0x3d	; 61
    2056:	de b7       	in	r29, 0x3e	; 62
    2058:	ea 97       	sbiw	r28, 0x3a	; 58
    205a:	0f b6       	in	r0, 0x3f	; 63
    205c:	f8 94       	cli
    205e:	de bf       	out	0x3e, r29	; 62
    2060:	0f be       	out	0x3f, r0	; 63
    2062:	cd bf       	out	0x3d, r28	; 61
    2064:	8a af       	std	Y+58, r24	; 0x3a
	_delay_ms(2);
	/* SET E to HIGH */
	DIO_WRITECHANNEL( E, HIGH);
	_delay_ms(5);
#elif LCD_MODE==_4BITMODE
	uint8 c=0;
    2066:	19 ae       	std	Y+57, r1	; 0x39
	/* SET RS to LOW */
	DIO_WRITECHANNEL(RS,LOW);
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	60 e0       	ldi	r22, 0x00	; 0
    206c:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
	/* SET R/W to LOW */
	DIO_WRITECHANNEL( RW ,LOW);
    2070:	81 e1       	ldi	r24, 0x11	; 17
    2072:	60 e0       	ldi	r22, 0x00	; 0
    2074:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
	/* SET E to HIGH */
	DIO_WRITECHANNEL( E ,HIGH);
    2078:	82 e0       	ldi	r24, 0x02	; 2
    207a:	61 e0       	ldi	r22, 0x01	; 1
    207c:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
	/* WRITE COMMAND */
	c=(((Command >>1)& 0x78)| 0x04)| DIO_READCHANNEL(PINA0);
    2080:	8a ad       	ldd	r24, Y+58	; 0x3a
    2082:	86 95       	lsr	r24
    2084:	88 77       	andi	r24, 0x78	; 120
    2086:	18 2f       	mov	r17, r24
    2088:	14 60       	ori	r17, 0x04	; 4
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	0e 94 49 08 	call	0x1092	; 0x1092 <DIO_READCHANNEL>
    2090:	81 2b       	or	r24, r17
    2092:	89 af       	std	Y+57, r24	; 0x39
	DIO_WRITEPORT( LCD_WRITE_PORT ,c);
    2094:	80 e0       	ldi	r24, 0x00	; 0
    2096:	69 ad       	ldd	r22, Y+57	; 0x39
    2098:	0e 94 08 08 	call	0x1010	; 0x1010 <DIO_WRITEPORT>
	/* SET E to LOW */
	DIO_WRITECHANNEL( E ,LOW);
    209c:	82 e0       	ldi	r24, 0x02	; 2
    209e:	60 e0       	ldi	r22, 0x00	; 0
    20a0:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	a0 e0       	ldi	r26, 0x00	; 0
    20aa:	b0 e4       	ldi	r27, 0x40	; 64
    20ac:	8d ab       	std	Y+53, r24	; 0x35
    20ae:	9e ab       	std	Y+54, r25	; 0x36
    20b0:	af ab       	std	Y+55, r26	; 0x37
    20b2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b4:	6d a9       	ldd	r22, Y+53	; 0x35
    20b6:	7e a9       	ldd	r23, Y+54	; 0x36
    20b8:	8f a9       	ldd	r24, Y+55	; 0x37
    20ba:	98 ad       	ldd	r25, Y+56	; 0x38
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	4a e7       	ldi	r20, 0x7A	; 122
    20c2:	55 e4       	ldi	r21, 0x45	; 69
    20c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	89 ab       	std	Y+49, r24	; 0x31
    20ce:	9a ab       	std	Y+50, r25	; 0x32
    20d0:	ab ab       	std	Y+51, r26	; 0x33
    20d2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    20d4:	69 a9       	ldd	r22, Y+49	; 0x31
    20d6:	7a a9       	ldd	r23, Y+50	; 0x32
    20d8:	8b a9       	ldd	r24, Y+51	; 0x33
    20da:	9c a9       	ldd	r25, Y+52	; 0x34
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	40 e8       	ldi	r20, 0x80	; 128
    20e2:	5f e3       	ldi	r21, 0x3F	; 63
    20e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20e8:	88 23       	and	r24, r24
    20ea:	2c f4       	brge	.+10     	; 0x20f6 <LCD_VIDSENDCOMMAND+0xa8>
		__ticks = 1;
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	98 ab       	std	Y+48, r25	; 0x30
    20f2:	8f a7       	std	Y+47, r24	; 0x2f
    20f4:	3f c0       	rjmp	.+126    	; 0x2174 <LCD_VIDSENDCOMMAND+0x126>
	else if (__tmp > 65535)
    20f6:	69 a9       	ldd	r22, Y+49	; 0x31
    20f8:	7a a9       	ldd	r23, Y+50	; 0x32
    20fa:	8b a9       	ldd	r24, Y+51	; 0x33
    20fc:	9c a9       	ldd	r25, Y+52	; 0x34
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	3f ef       	ldi	r19, 0xFF	; 255
    2102:	4f e7       	ldi	r20, 0x7F	; 127
    2104:	57 e4       	ldi	r21, 0x47	; 71
    2106:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    210a:	18 16       	cp	r1, r24
    210c:	4c f5       	brge	.+82     	; 0x2160 <LCD_VIDSENDCOMMAND+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    210e:	6d a9       	ldd	r22, Y+53	; 0x35
    2110:	7e a9       	ldd	r23, Y+54	; 0x36
    2112:	8f a9       	ldd	r24, Y+55	; 0x37
    2114:	98 ad       	ldd	r25, Y+56	; 0x38
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	40 e2       	ldi	r20, 0x20	; 32
    211c:	51 e4       	ldi	r21, 0x41	; 65
    211e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2122:	dc 01       	movw	r26, r24
    2124:	cb 01       	movw	r24, r22
    2126:	bc 01       	movw	r22, r24
    2128:	cd 01       	movw	r24, r26
    212a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	98 ab       	std	Y+48, r25	; 0x30
    2134:	8f a7       	std	Y+47, r24	; 0x2f
    2136:	0f c0       	rjmp	.+30     	; 0x2156 <LCD_VIDSENDCOMMAND+0x108>
    2138:	80 e9       	ldi	r24, 0x90	; 144
    213a:	91 e0       	ldi	r25, 0x01	; 1
    213c:	9e a7       	std	Y+46, r25	; 0x2e
    213e:	8d a7       	std	Y+45, r24	; 0x2d
    2140:	8d a5       	ldd	r24, Y+45	; 0x2d
    2142:	9e a5       	ldd	r25, Y+46	; 0x2e
    2144:	01 97       	sbiw	r24, 0x01	; 1
    2146:	f1 f7       	brne	.-4      	; 0x2144 <LCD_VIDSENDCOMMAND+0xf6>
    2148:	9e a7       	std	Y+46, r25	; 0x2e
    214a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    214c:	8f a5       	ldd	r24, Y+47	; 0x2f
    214e:	98 a9       	ldd	r25, Y+48	; 0x30
    2150:	01 97       	sbiw	r24, 0x01	; 1
    2152:	98 ab       	std	Y+48, r25	; 0x30
    2154:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2156:	8f a5       	ldd	r24, Y+47	; 0x2f
    2158:	98 a9       	ldd	r25, Y+48	; 0x30
    215a:	00 97       	sbiw	r24, 0x00	; 0
    215c:	69 f7       	brne	.-38     	; 0x2138 <LCD_VIDSENDCOMMAND+0xea>
    215e:	14 c0       	rjmp	.+40     	; 0x2188 <LCD_VIDSENDCOMMAND+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2160:	69 a9       	ldd	r22, Y+49	; 0x31
    2162:	7a a9       	ldd	r23, Y+50	; 0x32
    2164:	8b a9       	ldd	r24, Y+51	; 0x33
    2166:	9c a9       	ldd	r25, Y+52	; 0x34
    2168:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	98 ab       	std	Y+48, r25	; 0x30
    2172:	8f a7       	std	Y+47, r24	; 0x2f
    2174:	8f a5       	ldd	r24, Y+47	; 0x2f
    2176:	98 a9       	ldd	r25, Y+48	; 0x30
    2178:	9c a7       	std	Y+44, r25	; 0x2c
    217a:	8b a7       	std	Y+43, r24	; 0x2b
    217c:	8b a5       	ldd	r24, Y+43	; 0x2b
    217e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2180:	01 97       	sbiw	r24, 0x01	; 1
    2182:	f1 f7       	brne	.-4      	; 0x2180 <LCD_VIDSENDCOMMAND+0x132>
    2184:	9c a7       	std	Y+44, r25	; 0x2c
    2186:	8b a7       	std	Y+43, r24	; 0x2b
	/* wait for E to settle */
	_delay_ms(2);
	/* SET E to HIGH */
	DIO_WRITECHANNEL( E ,HIGH);
    2188:	82 e0       	ldi	r24, 0x02	; 2
    218a:	61 e0       	ldi	r22, 0x01	; 1
    218c:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
    2190:	80 e0       	ldi	r24, 0x00	; 0
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	a0 e8       	ldi	r26, 0x80	; 128
    2196:	bf e3       	ldi	r27, 0x3F	; 63
    2198:	8f a3       	std	Y+39, r24	; 0x27
    219a:	98 a7       	std	Y+40, r25	; 0x28
    219c:	a9 a7       	std	Y+41, r26	; 0x29
    219e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21a0:	6f a1       	ldd	r22, Y+39	; 0x27
    21a2:	78 a5       	ldd	r23, Y+40	; 0x28
    21a4:	89 a5       	ldd	r24, Y+41	; 0x29
    21a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    21a8:	20 e0       	ldi	r18, 0x00	; 0
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	4a e7       	ldi	r20, 0x7A	; 122
    21ae:	55 e4       	ldi	r21, 0x45	; 69
    21b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	8b a3       	std	Y+35, r24	; 0x23
    21ba:	9c a3       	std	Y+36, r25	; 0x24
    21bc:	ad a3       	std	Y+37, r26	; 0x25
    21be:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    21c0:	6b a1       	ldd	r22, Y+35	; 0x23
    21c2:	7c a1       	ldd	r23, Y+36	; 0x24
    21c4:	8d a1       	ldd	r24, Y+37	; 0x25
    21c6:	9e a1       	ldd	r25, Y+38	; 0x26
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	40 e8       	ldi	r20, 0x80	; 128
    21ce:	5f e3       	ldi	r21, 0x3F	; 63
    21d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21d4:	88 23       	and	r24, r24
    21d6:	2c f4       	brge	.+10     	; 0x21e2 <LCD_VIDSENDCOMMAND+0x194>
		__ticks = 1;
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	9a a3       	std	Y+34, r25	; 0x22
    21de:	89 a3       	std	Y+33, r24	; 0x21
    21e0:	3f c0       	rjmp	.+126    	; 0x2260 <LCD_VIDSENDCOMMAND+0x212>
	else if (__tmp > 65535)
    21e2:	6b a1       	ldd	r22, Y+35	; 0x23
    21e4:	7c a1       	ldd	r23, Y+36	; 0x24
    21e6:	8d a1       	ldd	r24, Y+37	; 0x25
    21e8:	9e a1       	ldd	r25, Y+38	; 0x26
    21ea:	20 e0       	ldi	r18, 0x00	; 0
    21ec:	3f ef       	ldi	r19, 0xFF	; 255
    21ee:	4f e7       	ldi	r20, 0x7F	; 127
    21f0:	57 e4       	ldi	r21, 0x47	; 71
    21f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21f6:	18 16       	cp	r1, r24
    21f8:	4c f5       	brge	.+82     	; 0x224c <LCD_VIDSENDCOMMAND+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21fa:	6f a1       	ldd	r22, Y+39	; 0x27
    21fc:	78 a5       	ldd	r23, Y+40	; 0x28
    21fe:	89 a5       	ldd	r24, Y+41	; 0x29
    2200:	9a a5       	ldd	r25, Y+42	; 0x2a
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	40 e2       	ldi	r20, 0x20	; 32
    2208:	51 e4       	ldi	r21, 0x41	; 65
    220a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220e:	dc 01       	movw	r26, r24
    2210:	cb 01       	movw	r24, r22
    2212:	bc 01       	movw	r22, r24
    2214:	cd 01       	movw	r24, r26
    2216:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	9a a3       	std	Y+34, r25	; 0x22
    2220:	89 a3       	std	Y+33, r24	; 0x21
    2222:	0f c0       	rjmp	.+30     	; 0x2242 <LCD_VIDSENDCOMMAND+0x1f4>
    2224:	80 e9       	ldi	r24, 0x90	; 144
    2226:	91 e0       	ldi	r25, 0x01	; 1
    2228:	98 a3       	std	Y+32, r25	; 0x20
    222a:	8f 8f       	std	Y+31, r24	; 0x1f
    222c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    222e:	98 a1       	ldd	r25, Y+32	; 0x20
    2230:	01 97       	sbiw	r24, 0x01	; 1
    2232:	f1 f7       	brne	.-4      	; 0x2230 <LCD_VIDSENDCOMMAND+0x1e2>
    2234:	98 a3       	std	Y+32, r25	; 0x20
    2236:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2238:	89 a1       	ldd	r24, Y+33	; 0x21
    223a:	9a a1       	ldd	r25, Y+34	; 0x22
    223c:	01 97       	sbiw	r24, 0x01	; 1
    223e:	9a a3       	std	Y+34, r25	; 0x22
    2240:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2242:	89 a1       	ldd	r24, Y+33	; 0x21
    2244:	9a a1       	ldd	r25, Y+34	; 0x22
    2246:	00 97       	sbiw	r24, 0x00	; 0
    2248:	69 f7       	brne	.-38     	; 0x2224 <LCD_VIDSENDCOMMAND+0x1d6>
    224a:	14 c0       	rjmp	.+40     	; 0x2274 <LCD_VIDSENDCOMMAND+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    224c:	6b a1       	ldd	r22, Y+35	; 0x23
    224e:	7c a1       	ldd	r23, Y+36	; 0x24
    2250:	8d a1       	ldd	r24, Y+37	; 0x25
    2252:	9e a1       	ldd	r25, Y+38	; 0x26
    2254:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	9a a3       	std	Y+34, r25	; 0x22
    225e:	89 a3       	std	Y+33, r24	; 0x21
    2260:	89 a1       	ldd	r24, Y+33	; 0x21
    2262:	9a a1       	ldd	r25, Y+34	; 0x22
    2264:	9e 8f       	std	Y+30, r25	; 0x1e
    2266:	8d 8f       	std	Y+29, r24	; 0x1d
    2268:	8d 8d       	ldd	r24, Y+29	; 0x1d
    226a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    226c:	01 97       	sbiw	r24, 0x01	; 1
    226e:	f1 f7       	brne	.-4      	; 0x226c <LCD_VIDSENDCOMMAND+0x21e>
    2270:	9e 8f       	std	Y+30, r25	; 0x1e
    2272:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/* WRITE COMMAND */
	//c=(Command & 0x0F);
	c=(((Command<<3)& 0x78)| 0x04)| DIO_READCHANNEL(PINA0);
    2274:	8a ad       	ldd	r24, Y+58	; 0x3a
    2276:	88 2f       	mov	r24, r24
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	88 0f       	add	r24, r24
    227c:	99 1f       	adc	r25, r25
    227e:	88 0f       	add	r24, r24
    2280:	99 1f       	adc	r25, r25
    2282:	88 0f       	add	r24, r24
    2284:	99 1f       	adc	r25, r25
    2286:	88 77       	andi	r24, 0x78	; 120
    2288:	18 2f       	mov	r17, r24
    228a:	14 60       	ori	r17, 0x04	; 4
    228c:	80 e0       	ldi	r24, 0x00	; 0
    228e:	0e 94 49 08 	call	0x1092	; 0x1092 <DIO_READCHANNEL>
    2292:	81 2b       	or	r24, r17
    2294:	89 af       	std	Y+57, r24	; 0x39
	DIO_WRITEPORT( LCD_WRITE_PORT ,c);
    2296:	80 e0       	ldi	r24, 0x00	; 0
    2298:	69 ad       	ldd	r22, Y+57	; 0x39
    229a:	0e 94 08 08 	call	0x1010	; 0x1010 <DIO_WRITEPORT>
	/* SET E to LOW */
	DIO_WRITECHANNEL( E ,LOW);
    229e:	82 e0       	ldi	r24, 0x02	; 2
    22a0:	60 e0       	ldi	r22, 0x00	; 0
    22a2:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	a0 e0       	ldi	r26, 0x00	; 0
    22ac:	b0 e4       	ldi	r27, 0x40	; 64
    22ae:	89 8f       	std	Y+25, r24	; 0x19
    22b0:	9a 8f       	std	Y+26, r25	; 0x1a
    22b2:	ab 8f       	std	Y+27, r26	; 0x1b
    22b4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b6:	69 8d       	ldd	r22, Y+25	; 0x19
    22b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	4a e7       	ldi	r20, 0x7A	; 122
    22c4:	55 e4       	ldi	r21, 0x45	; 69
    22c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ca:	dc 01       	movw	r26, r24
    22cc:	cb 01       	movw	r24, r22
    22ce:	8d 8b       	std	Y+21, r24	; 0x15
    22d0:	9e 8b       	std	Y+22, r25	; 0x16
    22d2:	af 8b       	std	Y+23, r26	; 0x17
    22d4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22d6:	6d 89       	ldd	r22, Y+21	; 0x15
    22d8:	7e 89       	ldd	r23, Y+22	; 0x16
    22da:	8f 89       	ldd	r24, Y+23	; 0x17
    22dc:	98 8d       	ldd	r25, Y+24	; 0x18
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	40 e8       	ldi	r20, 0x80	; 128
    22e4:	5f e3       	ldi	r21, 0x3F	; 63
    22e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22ea:	88 23       	and	r24, r24
    22ec:	2c f4       	brge	.+10     	; 0x22f8 <LCD_VIDSENDCOMMAND+0x2aa>
		__ticks = 1;
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	9c 8b       	std	Y+20, r25	; 0x14
    22f4:	8b 8b       	std	Y+19, r24	; 0x13
    22f6:	3f c0       	rjmp	.+126    	; 0x2376 <LCD_VIDSENDCOMMAND+0x328>
	else if (__tmp > 65535)
    22f8:	6d 89       	ldd	r22, Y+21	; 0x15
    22fa:	7e 89       	ldd	r23, Y+22	; 0x16
    22fc:	8f 89       	ldd	r24, Y+23	; 0x17
    22fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	3f ef       	ldi	r19, 0xFF	; 255
    2304:	4f e7       	ldi	r20, 0x7F	; 127
    2306:	57 e4       	ldi	r21, 0x47	; 71
    2308:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    230c:	18 16       	cp	r1, r24
    230e:	4c f5       	brge	.+82     	; 0x2362 <LCD_VIDSENDCOMMAND+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2310:	69 8d       	ldd	r22, Y+25	; 0x19
    2312:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2314:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2316:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	40 e2       	ldi	r20, 0x20	; 32
    231e:	51 e4       	ldi	r21, 0x41	; 65
    2320:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	bc 01       	movw	r22, r24
    232a:	cd 01       	movw	r24, r26
    232c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2330:	dc 01       	movw	r26, r24
    2332:	cb 01       	movw	r24, r22
    2334:	9c 8b       	std	Y+20, r25	; 0x14
    2336:	8b 8b       	std	Y+19, r24	; 0x13
    2338:	0f c0       	rjmp	.+30     	; 0x2358 <LCD_VIDSENDCOMMAND+0x30a>
    233a:	80 e9       	ldi	r24, 0x90	; 144
    233c:	91 e0       	ldi	r25, 0x01	; 1
    233e:	9a 8b       	std	Y+18, r25	; 0x12
    2340:	89 8b       	std	Y+17, r24	; 0x11
    2342:	89 89       	ldd	r24, Y+17	; 0x11
    2344:	9a 89       	ldd	r25, Y+18	; 0x12
    2346:	01 97       	sbiw	r24, 0x01	; 1
    2348:	f1 f7       	brne	.-4      	; 0x2346 <LCD_VIDSENDCOMMAND+0x2f8>
    234a:	9a 8b       	std	Y+18, r25	; 0x12
    234c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    234e:	8b 89       	ldd	r24, Y+19	; 0x13
    2350:	9c 89       	ldd	r25, Y+20	; 0x14
    2352:	01 97       	sbiw	r24, 0x01	; 1
    2354:	9c 8b       	std	Y+20, r25	; 0x14
    2356:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2358:	8b 89       	ldd	r24, Y+19	; 0x13
    235a:	9c 89       	ldd	r25, Y+20	; 0x14
    235c:	00 97       	sbiw	r24, 0x00	; 0
    235e:	69 f7       	brne	.-38     	; 0x233a <LCD_VIDSENDCOMMAND+0x2ec>
    2360:	14 c0       	rjmp	.+40     	; 0x238a <LCD_VIDSENDCOMMAND+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2362:	6d 89       	ldd	r22, Y+21	; 0x15
    2364:	7e 89       	ldd	r23, Y+22	; 0x16
    2366:	8f 89       	ldd	r24, Y+23	; 0x17
    2368:	98 8d       	ldd	r25, Y+24	; 0x18
    236a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	9c 8b       	std	Y+20, r25	; 0x14
    2374:	8b 8b       	std	Y+19, r24	; 0x13
    2376:	8b 89       	ldd	r24, Y+19	; 0x13
    2378:	9c 89       	ldd	r25, Y+20	; 0x14
    237a:	98 8b       	std	Y+16, r25	; 0x10
    237c:	8f 87       	std	Y+15, r24	; 0x0f
    237e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2380:	98 89       	ldd	r25, Y+16	; 0x10
    2382:	01 97       	sbiw	r24, 0x01	; 1
    2384:	f1 f7       	brne	.-4      	; 0x2382 <LCD_VIDSENDCOMMAND+0x334>
    2386:	98 8b       	std	Y+16, r25	; 0x10
    2388:	8f 87       	std	Y+15, r24	; 0x0f
	/* wait for E to settle */
	_delay_ms(2);
	/* SET E to HIGH */
	DIO_WRITECHANNEL( E ,HIGH);
    238a:	82 e0       	ldi	r24, 0x02	; 2
    238c:	61 e0       	ldi	r22, 0x01	; 1
    238e:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
    2392:	80 e0       	ldi	r24, 0x00	; 0
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	a0 ea       	ldi	r26, 0xA0	; 160
    2398:	b0 e4       	ldi	r27, 0x40	; 64
    239a:	8b 87       	std	Y+11, r24	; 0x0b
    239c:	9c 87       	std	Y+12, r25	; 0x0c
    239e:	ad 87       	std	Y+13, r26	; 0x0d
    23a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    23a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    23a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    23a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	4a e7       	ldi	r20, 0x7A	; 122
    23b0:	55 e4       	ldi	r21, 0x45	; 69
    23b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	8f 83       	std	Y+7, r24	; 0x07
    23bc:	98 87       	std	Y+8, r25	; 0x08
    23be:	a9 87       	std	Y+9, r26	; 0x09
    23c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23c2:	6f 81       	ldd	r22, Y+7	; 0x07
    23c4:	78 85       	ldd	r23, Y+8	; 0x08
    23c6:	89 85       	ldd	r24, Y+9	; 0x09
    23c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	40 e8       	ldi	r20, 0x80	; 128
    23d0:	5f e3       	ldi	r21, 0x3F	; 63
    23d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23d6:	88 23       	and	r24, r24
    23d8:	2c f4       	brge	.+10     	; 0x23e4 <LCD_VIDSENDCOMMAND+0x396>
		__ticks = 1;
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	9e 83       	std	Y+6, r25	; 0x06
    23e0:	8d 83       	std	Y+5, r24	; 0x05
    23e2:	3f c0       	rjmp	.+126    	; 0x2462 <LCD_VIDSENDCOMMAND+0x414>
	else if (__tmp > 65535)
    23e4:	6f 81       	ldd	r22, Y+7	; 0x07
    23e6:	78 85       	ldd	r23, Y+8	; 0x08
    23e8:	89 85       	ldd	r24, Y+9	; 0x09
    23ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	3f ef       	ldi	r19, 0xFF	; 255
    23f0:	4f e7       	ldi	r20, 0x7F	; 127
    23f2:	57 e4       	ldi	r21, 0x47	; 71
    23f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23f8:	18 16       	cp	r1, r24
    23fa:	4c f5       	brge	.+82     	; 0x244e <LCD_VIDSENDCOMMAND+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    23fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2400:	8d 85       	ldd	r24, Y+13	; 0x0d
    2402:	9e 85       	ldd	r25, Y+14	; 0x0e
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	40 e2       	ldi	r20, 0x20	; 32
    240a:	51 e4       	ldi	r21, 0x41	; 65
    240c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	bc 01       	movw	r22, r24
    2416:	cd 01       	movw	r24, r26
    2418:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	9e 83       	std	Y+6, r25	; 0x06
    2422:	8d 83       	std	Y+5, r24	; 0x05
    2424:	0f c0       	rjmp	.+30     	; 0x2444 <LCD_VIDSENDCOMMAND+0x3f6>
    2426:	80 e9       	ldi	r24, 0x90	; 144
    2428:	91 e0       	ldi	r25, 0x01	; 1
    242a:	9c 83       	std	Y+4, r25	; 0x04
    242c:	8b 83       	std	Y+3, r24	; 0x03
    242e:	8b 81       	ldd	r24, Y+3	; 0x03
    2430:	9c 81       	ldd	r25, Y+4	; 0x04
    2432:	01 97       	sbiw	r24, 0x01	; 1
    2434:	f1 f7       	brne	.-4      	; 0x2432 <LCD_VIDSENDCOMMAND+0x3e4>
    2436:	9c 83       	std	Y+4, r25	; 0x04
    2438:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    243a:	8d 81       	ldd	r24, Y+5	; 0x05
    243c:	9e 81       	ldd	r25, Y+6	; 0x06
    243e:	01 97       	sbiw	r24, 0x01	; 1
    2440:	9e 83       	std	Y+6, r25	; 0x06
    2442:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2444:	8d 81       	ldd	r24, Y+5	; 0x05
    2446:	9e 81       	ldd	r25, Y+6	; 0x06
    2448:	00 97       	sbiw	r24, 0x00	; 0
    244a:	69 f7       	brne	.-38     	; 0x2426 <LCD_VIDSENDCOMMAND+0x3d8>
    244c:	14 c0       	rjmp	.+40     	; 0x2476 <LCD_VIDSENDCOMMAND+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    244e:	6f 81       	ldd	r22, Y+7	; 0x07
    2450:	78 85       	ldd	r23, Y+8	; 0x08
    2452:	89 85       	ldd	r24, Y+9	; 0x09
    2454:	9a 85       	ldd	r25, Y+10	; 0x0a
    2456:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	9e 83       	std	Y+6, r25	; 0x06
    2460:	8d 83       	std	Y+5, r24	; 0x05
    2462:	8d 81       	ldd	r24, Y+5	; 0x05
    2464:	9e 81       	ldd	r25, Y+6	; 0x06
    2466:	9a 83       	std	Y+2, r25	; 0x02
    2468:	89 83       	std	Y+1, r24	; 0x01
    246a:	89 81       	ldd	r24, Y+1	; 0x01
    246c:	9a 81       	ldd	r25, Y+2	; 0x02
    246e:	01 97       	sbiw	r24, 0x01	; 1
    2470:	f1 f7       	brne	.-4      	; 0x246e <LCD_VIDSENDCOMMAND+0x420>
    2472:	9a 83       	std	Y+2, r25	; 0x02
    2474:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
#endif
}
    2476:	ea 96       	adiw	r28, 0x3a	; 58
    2478:	0f b6       	in	r0, 0x3f	; 63
    247a:	f8 94       	cli
    247c:	de bf       	out	0x3e, r29	; 62
    247e:	0f be       	out	0x3f, r0	; 63
    2480:	cd bf       	out	0x3d, r28	; 61
    2482:	cf 91       	pop	r28
    2484:	df 91       	pop	r29
    2486:	1f 91       	pop	r17
    2488:	08 95       	ret

0000248a <LCD_INIT>:

void LCD_INIT(void) {
    248a:	df 93       	push	r29
    248c:	cf 93       	push	r28
    248e:	cd b7       	in	r28, 0x3d	; 61
    2490:	de b7       	in	r29, 0x3e	; 62
    2492:	e8 97       	sbiw	r28, 0x38	; 56
    2494:	0f b6       	in	r0, 0x3f	; 63
    2496:	f8 94       	cli
    2498:	de bf       	out	0x3e, r29	; 62
    249a:	0f be       	out	0x3f, r0	; 63
    249c:	cd bf       	out	0x3d, r28	; 61
    249e:	80 e0       	ldi	r24, 0x00	; 0
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	a0 ef       	ldi	r26, 0xF0	; 240
    24a4:	b1 e4       	ldi	r27, 0x41	; 65
    24a6:	8d ab       	std	Y+53, r24	; 0x35
    24a8:	9e ab       	std	Y+54, r25	; 0x36
    24aa:	af ab       	std	Y+55, r26	; 0x37
    24ac:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ae:	6d a9       	ldd	r22, Y+53	; 0x35
    24b0:	7e a9       	ldd	r23, Y+54	; 0x36
    24b2:	8f a9       	ldd	r24, Y+55	; 0x37
    24b4:	98 ad       	ldd	r25, Y+56	; 0x38
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	4a e7       	ldi	r20, 0x7A	; 122
    24bc:	55 e4       	ldi	r21, 0x45	; 69
    24be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	89 ab       	std	Y+49, r24	; 0x31
    24c8:	9a ab       	std	Y+50, r25	; 0x32
    24ca:	ab ab       	std	Y+51, r26	; 0x33
    24cc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    24ce:	69 a9       	ldd	r22, Y+49	; 0x31
    24d0:	7a a9       	ldd	r23, Y+50	; 0x32
    24d2:	8b a9       	ldd	r24, Y+51	; 0x33
    24d4:	9c a9       	ldd	r25, Y+52	; 0x34
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	40 e8       	ldi	r20, 0x80	; 128
    24dc:	5f e3       	ldi	r21, 0x3F	; 63
    24de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24e2:	88 23       	and	r24, r24
    24e4:	2c f4       	brge	.+10     	; 0x24f0 <LCD_INIT+0x66>
		__ticks = 1;
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	98 ab       	std	Y+48, r25	; 0x30
    24ec:	8f a7       	std	Y+47, r24	; 0x2f
    24ee:	3f c0       	rjmp	.+126    	; 0x256e <LCD_INIT+0xe4>
	else if (__tmp > 65535)
    24f0:	69 a9       	ldd	r22, Y+49	; 0x31
    24f2:	7a a9       	ldd	r23, Y+50	; 0x32
    24f4:	8b a9       	ldd	r24, Y+51	; 0x33
    24f6:	9c a9       	ldd	r25, Y+52	; 0x34
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	3f ef       	ldi	r19, 0xFF	; 255
    24fc:	4f e7       	ldi	r20, 0x7F	; 127
    24fe:	57 e4       	ldi	r21, 0x47	; 71
    2500:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2504:	18 16       	cp	r1, r24
    2506:	4c f5       	brge	.+82     	; 0x255a <LCD_INIT+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2508:	6d a9       	ldd	r22, Y+53	; 0x35
    250a:	7e a9       	ldd	r23, Y+54	; 0x36
    250c:	8f a9       	ldd	r24, Y+55	; 0x37
    250e:	98 ad       	ldd	r25, Y+56	; 0x38
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	40 e2       	ldi	r20, 0x20	; 32
    2516:	51 e4       	ldi	r21, 0x41	; 65
    2518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	bc 01       	movw	r22, r24
    2522:	cd 01       	movw	r24, r26
    2524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	98 ab       	std	Y+48, r25	; 0x30
    252e:	8f a7       	std	Y+47, r24	; 0x2f
    2530:	0f c0       	rjmp	.+30     	; 0x2550 <LCD_INIT+0xc6>
    2532:	80 e9       	ldi	r24, 0x90	; 144
    2534:	91 e0       	ldi	r25, 0x01	; 1
    2536:	9e a7       	std	Y+46, r25	; 0x2e
    2538:	8d a7       	std	Y+45, r24	; 0x2d
    253a:	8d a5       	ldd	r24, Y+45	; 0x2d
    253c:	9e a5       	ldd	r25, Y+46	; 0x2e
    253e:	01 97       	sbiw	r24, 0x01	; 1
    2540:	f1 f7       	brne	.-4      	; 0x253e <LCD_INIT+0xb4>
    2542:	9e a7       	std	Y+46, r25	; 0x2e
    2544:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2546:	8f a5       	ldd	r24, Y+47	; 0x2f
    2548:	98 a9       	ldd	r25, Y+48	; 0x30
    254a:	01 97       	sbiw	r24, 0x01	; 1
    254c:	98 ab       	std	Y+48, r25	; 0x30
    254e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2550:	8f a5       	ldd	r24, Y+47	; 0x2f
    2552:	98 a9       	ldd	r25, Y+48	; 0x30
    2554:	00 97       	sbiw	r24, 0x00	; 0
    2556:	69 f7       	brne	.-38     	; 0x2532 <LCD_INIT+0xa8>
    2558:	14 c0       	rjmp	.+40     	; 0x2582 <LCD_INIT+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    255a:	69 a9       	ldd	r22, Y+49	; 0x31
    255c:	7a a9       	ldd	r23, Y+50	; 0x32
    255e:	8b a9       	ldd	r24, Y+51	; 0x33
    2560:	9c a9       	ldd	r25, Y+52	; 0x34
    2562:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2566:	dc 01       	movw	r26, r24
    2568:	cb 01       	movw	r24, r22
    256a:	98 ab       	std	Y+48, r25	; 0x30
    256c:	8f a7       	std	Y+47, r24	; 0x2f
    256e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2570:	98 a9       	ldd	r25, Y+48	; 0x30
    2572:	9c a7       	std	Y+44, r25	; 0x2c
    2574:	8b a7       	std	Y+43, r24	; 0x2b
    2576:	8b a5       	ldd	r24, Y+43	; 0x2b
    2578:	9c a5       	ldd	r25, Y+44	; 0x2c
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	f1 f7       	brne	.-4      	; 0x257a <LCD_INIT+0xf0>
    257e:	9c a7       	std	Y+44, r25	; 0x2c
    2580:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(30);
	/* RETURN_HOME */
	LCD_VIDSENDCOMMAND(LCD_Home);
    2582:	82 e0       	ldi	r24, 0x02	; 2
    2584:	0e 94 27 10 	call	0x204e	; 0x204e <LCD_VIDSENDCOMMAND>
    2588:	80 e0       	ldi	r24, 0x00	; 0
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	a0 e8       	ldi	r26, 0x80	; 128
    258e:	bf e3       	ldi	r27, 0x3F	; 63
    2590:	8f a3       	std	Y+39, r24	; 0x27
    2592:	98 a7       	std	Y+40, r25	; 0x28
    2594:	a9 a7       	std	Y+41, r26	; 0x29
    2596:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2598:	6f a1       	ldd	r22, Y+39	; 0x27
    259a:	78 a5       	ldd	r23, Y+40	; 0x28
    259c:	89 a5       	ldd	r24, Y+41	; 0x29
    259e:	9a a5       	ldd	r25, Y+42	; 0x2a
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	4a e7       	ldi	r20, 0x7A	; 122
    25a6:	55 e4       	ldi	r21, 0x45	; 69
    25a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	8b a3       	std	Y+35, r24	; 0x23
    25b2:	9c a3       	std	Y+36, r25	; 0x24
    25b4:	ad a3       	std	Y+37, r26	; 0x25
    25b6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25b8:	6b a1       	ldd	r22, Y+35	; 0x23
    25ba:	7c a1       	ldd	r23, Y+36	; 0x24
    25bc:	8d a1       	ldd	r24, Y+37	; 0x25
    25be:	9e a1       	ldd	r25, Y+38	; 0x26
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	40 e8       	ldi	r20, 0x80	; 128
    25c6:	5f e3       	ldi	r21, 0x3F	; 63
    25c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25cc:	88 23       	and	r24, r24
    25ce:	2c f4       	brge	.+10     	; 0x25da <LCD_INIT+0x150>
		__ticks = 1;
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	9a a3       	std	Y+34, r25	; 0x22
    25d6:	89 a3       	std	Y+33, r24	; 0x21
    25d8:	3f c0       	rjmp	.+126    	; 0x2658 <LCD_INIT+0x1ce>
	else if (__tmp > 65535)
    25da:	6b a1       	ldd	r22, Y+35	; 0x23
    25dc:	7c a1       	ldd	r23, Y+36	; 0x24
    25de:	8d a1       	ldd	r24, Y+37	; 0x25
    25e0:	9e a1       	ldd	r25, Y+38	; 0x26
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	3f ef       	ldi	r19, 0xFF	; 255
    25e6:	4f e7       	ldi	r20, 0x7F	; 127
    25e8:	57 e4       	ldi	r21, 0x47	; 71
    25ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25ee:	18 16       	cp	r1, r24
    25f0:	4c f5       	brge	.+82     	; 0x2644 <LCD_INIT+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25f2:	6f a1       	ldd	r22, Y+39	; 0x27
    25f4:	78 a5       	ldd	r23, Y+40	; 0x28
    25f6:	89 a5       	ldd	r24, Y+41	; 0x29
    25f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	40 e2       	ldi	r20, 0x20	; 32
    2600:	51 e4       	ldi	r21, 0x41	; 65
    2602:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2606:	dc 01       	movw	r26, r24
    2608:	cb 01       	movw	r24, r22
    260a:	bc 01       	movw	r22, r24
    260c:	cd 01       	movw	r24, r26
    260e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	9a a3       	std	Y+34, r25	; 0x22
    2618:	89 a3       	std	Y+33, r24	; 0x21
    261a:	0f c0       	rjmp	.+30     	; 0x263a <LCD_INIT+0x1b0>
    261c:	80 e9       	ldi	r24, 0x90	; 144
    261e:	91 e0       	ldi	r25, 0x01	; 1
    2620:	98 a3       	std	Y+32, r25	; 0x20
    2622:	8f 8f       	std	Y+31, r24	; 0x1f
    2624:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2626:	98 a1       	ldd	r25, Y+32	; 0x20
    2628:	01 97       	sbiw	r24, 0x01	; 1
    262a:	f1 f7       	brne	.-4      	; 0x2628 <LCD_INIT+0x19e>
    262c:	98 a3       	std	Y+32, r25	; 0x20
    262e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2630:	89 a1       	ldd	r24, Y+33	; 0x21
    2632:	9a a1       	ldd	r25, Y+34	; 0x22
    2634:	01 97       	sbiw	r24, 0x01	; 1
    2636:	9a a3       	std	Y+34, r25	; 0x22
    2638:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    263a:	89 a1       	ldd	r24, Y+33	; 0x21
    263c:	9a a1       	ldd	r25, Y+34	; 0x22
    263e:	00 97       	sbiw	r24, 0x00	; 0
    2640:	69 f7       	brne	.-38     	; 0x261c <LCD_INIT+0x192>
    2642:	14 c0       	rjmp	.+40     	; 0x266c <LCD_INIT+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2644:	6b a1       	ldd	r22, Y+35	; 0x23
    2646:	7c a1       	ldd	r23, Y+36	; 0x24
    2648:	8d a1       	ldd	r24, Y+37	; 0x25
    264a:	9e a1       	ldd	r25, Y+38	; 0x26
    264c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2650:	dc 01       	movw	r26, r24
    2652:	cb 01       	movw	r24, r22
    2654:	9a a3       	std	Y+34, r25	; 0x22
    2656:	89 a3       	std	Y+33, r24	; 0x21
    2658:	89 a1       	ldd	r24, Y+33	; 0x21
    265a:	9a a1       	ldd	r25, Y+34	; 0x22
    265c:	9e 8f       	std	Y+30, r25	; 0x1e
    265e:	8d 8f       	std	Y+29, r24	; 0x1d
    2660:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2662:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2664:	01 97       	sbiw	r24, 0x01	; 1
    2666:	f1 f7       	brne	.-4      	; 0x2664 <LCD_INIT+0x1da>
    2668:	9e 8f       	std	Y+30, r25	; 0x1e
    266a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/* FUNCTION SET */
#if LCD_MODE==_8BITMODE
	LCD_VIDSENDCOMMAND(LCD_FunctionSet8bit);
#elif LCD_MODE==_4BITMODE
	LCD_VIDSENDCOMMAND(LCD_FunctionSet4bit);
    266c:	88 e2       	ldi	r24, 0x28	; 40
    266e:	0e 94 27 10 	call	0x204e	; 0x204e <LCD_VIDSENDCOMMAND>
    2672:	80 e0       	ldi	r24, 0x00	; 0
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	a0 e8       	ldi	r26, 0x80	; 128
    2678:	bf e3       	ldi	r27, 0x3F	; 63
    267a:	89 8f       	std	Y+25, r24	; 0x19
    267c:	9a 8f       	std	Y+26, r25	; 0x1a
    267e:	ab 8f       	std	Y+27, r26	; 0x1b
    2680:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2682:	69 8d       	ldd	r22, Y+25	; 0x19
    2684:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2686:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2688:	9c 8d       	ldd	r25, Y+28	; 0x1c
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	4a e7       	ldi	r20, 0x7A	; 122
    2690:	55 e4       	ldi	r21, 0x45	; 69
    2692:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2696:	dc 01       	movw	r26, r24
    2698:	cb 01       	movw	r24, r22
    269a:	8d 8b       	std	Y+21, r24	; 0x15
    269c:	9e 8b       	std	Y+22, r25	; 0x16
    269e:	af 8b       	std	Y+23, r26	; 0x17
    26a0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26a2:	6d 89       	ldd	r22, Y+21	; 0x15
    26a4:	7e 89       	ldd	r23, Y+22	; 0x16
    26a6:	8f 89       	ldd	r24, Y+23	; 0x17
    26a8:	98 8d       	ldd	r25, Y+24	; 0x18
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	40 e8       	ldi	r20, 0x80	; 128
    26b0:	5f e3       	ldi	r21, 0x3F	; 63
    26b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26b6:	88 23       	and	r24, r24
    26b8:	2c f4       	brge	.+10     	; 0x26c4 <LCD_INIT+0x23a>
		__ticks = 1;
    26ba:	81 e0       	ldi	r24, 0x01	; 1
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	9c 8b       	std	Y+20, r25	; 0x14
    26c0:	8b 8b       	std	Y+19, r24	; 0x13
    26c2:	3f c0       	rjmp	.+126    	; 0x2742 <LCD_INIT+0x2b8>
	else if (__tmp > 65535)
    26c4:	6d 89       	ldd	r22, Y+21	; 0x15
    26c6:	7e 89       	ldd	r23, Y+22	; 0x16
    26c8:	8f 89       	ldd	r24, Y+23	; 0x17
    26ca:	98 8d       	ldd	r25, Y+24	; 0x18
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	3f ef       	ldi	r19, 0xFF	; 255
    26d0:	4f e7       	ldi	r20, 0x7F	; 127
    26d2:	57 e4       	ldi	r21, 0x47	; 71
    26d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26d8:	18 16       	cp	r1, r24
    26da:	4c f5       	brge	.+82     	; 0x272e <LCD_INIT+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26dc:	69 8d       	ldd	r22, Y+25	; 0x19
    26de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26e4:	20 e0       	ldi	r18, 0x00	; 0
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	40 e2       	ldi	r20, 0x20	; 32
    26ea:	51 e4       	ldi	r21, 0x41	; 65
    26ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f0:	dc 01       	movw	r26, r24
    26f2:	cb 01       	movw	r24, r22
    26f4:	bc 01       	movw	r22, r24
    26f6:	cd 01       	movw	r24, r26
    26f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26fc:	dc 01       	movw	r26, r24
    26fe:	cb 01       	movw	r24, r22
    2700:	9c 8b       	std	Y+20, r25	; 0x14
    2702:	8b 8b       	std	Y+19, r24	; 0x13
    2704:	0f c0       	rjmp	.+30     	; 0x2724 <LCD_INIT+0x29a>
    2706:	80 e9       	ldi	r24, 0x90	; 144
    2708:	91 e0       	ldi	r25, 0x01	; 1
    270a:	9a 8b       	std	Y+18, r25	; 0x12
    270c:	89 8b       	std	Y+17, r24	; 0x11
    270e:	89 89       	ldd	r24, Y+17	; 0x11
    2710:	9a 89       	ldd	r25, Y+18	; 0x12
    2712:	01 97       	sbiw	r24, 0x01	; 1
    2714:	f1 f7       	brne	.-4      	; 0x2712 <LCD_INIT+0x288>
    2716:	9a 8b       	std	Y+18, r25	; 0x12
    2718:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    271a:	8b 89       	ldd	r24, Y+19	; 0x13
    271c:	9c 89       	ldd	r25, Y+20	; 0x14
    271e:	01 97       	sbiw	r24, 0x01	; 1
    2720:	9c 8b       	std	Y+20, r25	; 0x14
    2722:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2724:	8b 89       	ldd	r24, Y+19	; 0x13
    2726:	9c 89       	ldd	r25, Y+20	; 0x14
    2728:	00 97       	sbiw	r24, 0x00	; 0
    272a:	69 f7       	brne	.-38     	; 0x2706 <LCD_INIT+0x27c>
    272c:	14 c0       	rjmp	.+40     	; 0x2756 <LCD_INIT+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    272e:	6d 89       	ldd	r22, Y+21	; 0x15
    2730:	7e 89       	ldd	r23, Y+22	; 0x16
    2732:	8f 89       	ldd	r24, Y+23	; 0x17
    2734:	98 8d       	ldd	r25, Y+24	; 0x18
    2736:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273a:	dc 01       	movw	r26, r24
    273c:	cb 01       	movw	r24, r22
    273e:	9c 8b       	std	Y+20, r25	; 0x14
    2740:	8b 8b       	std	Y+19, r24	; 0x13
    2742:	8b 89       	ldd	r24, Y+19	; 0x13
    2744:	9c 89       	ldd	r25, Y+20	; 0x14
    2746:	98 8b       	std	Y+16, r25	; 0x10
    2748:	8f 87       	std	Y+15, r24	; 0x0f
    274a:	8f 85       	ldd	r24, Y+15	; 0x0f
    274c:	98 89       	ldd	r25, Y+16	; 0x10
    274e:	01 97       	sbiw	r24, 0x01	; 1
    2750:	f1 f7       	brne	.-4      	; 0x274e <LCD_INIT+0x2c4>
    2752:	98 8b       	std	Y+16, r25	; 0x10
    2754:	8f 87       	std	Y+15, r24	; 0x0f
#endif
	_delay_ms(1);
	/* DISPLAY ON/OFF CONTROL */
	LCD_VIDSENDCOMMAND(LCD_DisplayOn);
    2756:	8c e0       	ldi	r24, 0x0C	; 12
    2758:	0e 94 27 10 	call	0x204e	; 0x204e <LCD_VIDSENDCOMMAND>
	/* CLEAR DISPLAY */
	LCD_VIDSENDCOMMAND(LCD_Clear);
    275c:	81 e0       	ldi	r24, 0x01	; 1
    275e:	0e 94 27 10 	call	0x204e	; 0x204e <LCD_VIDSENDCOMMAND>
	/* ENTRY MODE SET */
	LCD_VIDSENDCOMMAND(LCD_EntryMode);
    2762:	86 e0       	ldi	r24, 0x06	; 6
    2764:	0e 94 27 10 	call	0x204e	; 0x204e <LCD_VIDSENDCOMMAND>
    2768:	80 e0       	ldi	r24, 0x00	; 0
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	a0 e8       	ldi	r26, 0x80	; 128
    276e:	bf e3       	ldi	r27, 0x3F	; 63
    2770:	8b 87       	std	Y+11, r24	; 0x0b
    2772:	9c 87       	std	Y+12, r25	; 0x0c
    2774:	ad 87       	std	Y+13, r26	; 0x0d
    2776:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2778:	6b 85       	ldd	r22, Y+11	; 0x0b
    277a:	7c 85       	ldd	r23, Y+12	; 0x0c
    277c:	8d 85       	ldd	r24, Y+13	; 0x0d
    277e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	4a e7       	ldi	r20, 0x7A	; 122
    2786:	55 e4       	ldi	r21, 0x45	; 69
    2788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	8f 83       	std	Y+7, r24	; 0x07
    2792:	98 87       	std	Y+8, r25	; 0x08
    2794:	a9 87       	std	Y+9, r26	; 0x09
    2796:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2798:	6f 81       	ldd	r22, Y+7	; 0x07
    279a:	78 85       	ldd	r23, Y+8	; 0x08
    279c:	89 85       	ldd	r24, Y+9	; 0x09
    279e:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	40 e8       	ldi	r20, 0x80	; 128
    27a6:	5f e3       	ldi	r21, 0x3F	; 63
    27a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27ac:	88 23       	and	r24, r24
    27ae:	2c f4       	brge	.+10     	; 0x27ba <LCD_INIT+0x330>
		__ticks = 1;
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	9e 83       	std	Y+6, r25	; 0x06
    27b6:	8d 83       	std	Y+5, r24	; 0x05
    27b8:	3f c0       	rjmp	.+126    	; 0x2838 <LCD_INIT+0x3ae>
	else if (__tmp > 65535)
    27ba:	6f 81       	ldd	r22, Y+7	; 0x07
    27bc:	78 85       	ldd	r23, Y+8	; 0x08
    27be:	89 85       	ldd	r24, Y+9	; 0x09
    27c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	3f ef       	ldi	r19, 0xFF	; 255
    27c6:	4f e7       	ldi	r20, 0x7F	; 127
    27c8:	57 e4       	ldi	r21, 0x47	; 71
    27ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27ce:	18 16       	cp	r1, r24
    27d0:	4c f5       	brge	.+82     	; 0x2824 <LCD_INIT+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    27d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    27d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	40 e2       	ldi	r20, 0x20	; 32
    27e0:	51 e4       	ldi	r21, 0x41	; 65
    27e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e6:	dc 01       	movw	r26, r24
    27e8:	cb 01       	movw	r24, r22
    27ea:	bc 01       	movw	r22, r24
    27ec:	cd 01       	movw	r24, r26
    27ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	9e 83       	std	Y+6, r25	; 0x06
    27f8:	8d 83       	std	Y+5, r24	; 0x05
    27fa:	0f c0       	rjmp	.+30     	; 0x281a <LCD_INIT+0x390>
    27fc:	80 e9       	ldi	r24, 0x90	; 144
    27fe:	91 e0       	ldi	r25, 0x01	; 1
    2800:	9c 83       	std	Y+4, r25	; 0x04
    2802:	8b 83       	std	Y+3, r24	; 0x03
    2804:	8b 81       	ldd	r24, Y+3	; 0x03
    2806:	9c 81       	ldd	r25, Y+4	; 0x04
    2808:	01 97       	sbiw	r24, 0x01	; 1
    280a:	f1 f7       	brne	.-4      	; 0x2808 <LCD_INIT+0x37e>
    280c:	9c 83       	std	Y+4, r25	; 0x04
    280e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2810:	8d 81       	ldd	r24, Y+5	; 0x05
    2812:	9e 81       	ldd	r25, Y+6	; 0x06
    2814:	01 97       	sbiw	r24, 0x01	; 1
    2816:	9e 83       	std	Y+6, r25	; 0x06
    2818:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    281a:	8d 81       	ldd	r24, Y+5	; 0x05
    281c:	9e 81       	ldd	r25, Y+6	; 0x06
    281e:	00 97       	sbiw	r24, 0x00	; 0
    2820:	69 f7       	brne	.-38     	; 0x27fc <LCD_INIT+0x372>
    2822:	14 c0       	rjmp	.+40     	; 0x284c <LCD_INIT+0x3c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2824:	6f 81       	ldd	r22, Y+7	; 0x07
    2826:	78 85       	ldd	r23, Y+8	; 0x08
    2828:	89 85       	ldd	r24, Y+9	; 0x09
    282a:	9a 85       	ldd	r25, Y+10	; 0x0a
    282c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2830:	dc 01       	movw	r26, r24
    2832:	cb 01       	movw	r24, r22
    2834:	9e 83       	std	Y+6, r25	; 0x06
    2836:	8d 83       	std	Y+5, r24	; 0x05
    2838:	8d 81       	ldd	r24, Y+5	; 0x05
    283a:	9e 81       	ldd	r25, Y+6	; 0x06
    283c:	9a 83       	std	Y+2, r25	; 0x02
    283e:	89 83       	std	Y+1, r24	; 0x01
    2840:	89 81       	ldd	r24, Y+1	; 0x01
    2842:	9a 81       	ldd	r25, Y+2	; 0x02
    2844:	01 97       	sbiw	r24, 0x01	; 1
    2846:	f1 f7       	brne	.-4      	; 0x2844 <LCD_INIT+0x3ba>
    2848:	9a 83       	std	Y+2, r25	; 0x02
    284a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    284c:	e8 96       	adiw	r28, 0x38	; 56
    284e:	0f b6       	in	r0, 0x3f	; 63
    2850:	f8 94       	cli
    2852:	de bf       	out	0x3e, r29	; 62
    2854:	0f be       	out	0x3f, r0	; 63
    2856:	cd bf       	out	0x3d, r28	; 61
    2858:	cf 91       	pop	r28
    285a:	df 91       	pop	r29
    285c:	08 95       	ret

0000285e <LCD_VIDSENDCHAR>:
extern void LCD_VIDSENDCHAR(uint8 DATA) {
    285e:	1f 93       	push	r17
    2860:	df 93       	push	r29
    2862:	cf 93       	push	r28
    2864:	cd b7       	in	r28, 0x3d	; 61
    2866:	de b7       	in	r29, 0x3e	; 62
    2868:	e9 97       	sbiw	r28, 0x39	; 57
    286a:	0f b6       	in	r0, 0x3f	; 63
    286c:	f8 94       	cli
    286e:	de bf       	out	0x3e, r29	; 62
    2870:	0f be       	out	0x3f, r0	; 63
    2872:	cd bf       	out	0x3d, r28	; 61
    2874:	89 af       	std	Y+57, r24	; 0x39
	/* SET E to HIGH */
	DIO_WRITECHANNEL( E, HIGH);
	_delay_ms(5);
#elif LCD_MODE==_4BITMODE
	/* SET RS to HIGH */
	DIO_WRITECHANNEL(RS, HIGH);
    2876:	81 e0       	ldi	r24, 0x01	; 1
    2878:	61 e0       	ldi	r22, 0x01	; 1
    287a:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
	/* SET R/W to LOW */
	DIO_WRITECHANNEL( RW, LOW);
    287e:	81 e1       	ldi	r24, 0x11	; 17
    2880:	60 e0       	ldi	r22, 0x00	; 0
    2882:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
	/* SET E to HIGH */
	DIO_WRITECHANNEL( E, HIGH);
    2886:	82 e0       	ldi	r24, 0x02	; 2
    2888:	61 e0       	ldi	r22, 0x01	; 1
    288a:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
	/* WRITE COMMAND */
	DIO_WRITEPORT( LCD_WRITE_PORT, (((DATA >>1)& 0x78)|0x06)| DIO_READCHANNEL(PINA0));
    288e:	89 ad       	ldd	r24, Y+57	; 0x39
    2890:	86 95       	lsr	r24
    2892:	88 77       	andi	r24, 0x78	; 120
    2894:	18 2f       	mov	r17, r24
    2896:	16 60       	ori	r17, 0x06	; 6
    2898:	80 e0       	ldi	r24, 0x00	; 0
    289a:	0e 94 49 08 	call	0x1092	; 0x1092 <DIO_READCHANNEL>
    289e:	81 2b       	or	r24, r17
    28a0:	98 2f       	mov	r25, r24
    28a2:	80 e0       	ldi	r24, 0x00	; 0
    28a4:	69 2f       	mov	r22, r25
    28a6:	0e 94 08 08 	call	0x1010	; 0x1010 <DIO_WRITEPORT>
	/* SET E to LOW */
	DIO_WRITECHANNEL( E, LOW);
    28aa:	82 e0       	ldi	r24, 0x02	; 2
    28ac:	60 e0       	ldi	r22, 0x00	; 0
    28ae:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
    28b2:	80 e0       	ldi	r24, 0x00	; 0
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	a0 e0       	ldi	r26, 0x00	; 0
    28b8:	b0 e4       	ldi	r27, 0x40	; 64
    28ba:	8d ab       	std	Y+53, r24	; 0x35
    28bc:	9e ab       	std	Y+54, r25	; 0x36
    28be:	af ab       	std	Y+55, r26	; 0x37
    28c0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28c2:	6d a9       	ldd	r22, Y+53	; 0x35
    28c4:	7e a9       	ldd	r23, Y+54	; 0x36
    28c6:	8f a9       	ldd	r24, Y+55	; 0x37
    28c8:	98 ad       	ldd	r25, Y+56	; 0x38
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	4a e7       	ldi	r20, 0x7A	; 122
    28d0:	55 e4       	ldi	r21, 0x45	; 69
    28d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	89 ab       	std	Y+49, r24	; 0x31
    28dc:	9a ab       	std	Y+50, r25	; 0x32
    28de:	ab ab       	std	Y+51, r26	; 0x33
    28e0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28e2:	69 a9       	ldd	r22, Y+49	; 0x31
    28e4:	7a a9       	ldd	r23, Y+50	; 0x32
    28e6:	8b a9       	ldd	r24, Y+51	; 0x33
    28e8:	9c a9       	ldd	r25, Y+52	; 0x34
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	40 e8       	ldi	r20, 0x80	; 128
    28f0:	5f e3       	ldi	r21, 0x3F	; 63
    28f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28f6:	88 23       	and	r24, r24
    28f8:	2c f4       	brge	.+10     	; 0x2904 <LCD_VIDSENDCHAR+0xa6>
		__ticks = 1;
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	98 ab       	std	Y+48, r25	; 0x30
    2900:	8f a7       	std	Y+47, r24	; 0x2f
    2902:	3f c0       	rjmp	.+126    	; 0x2982 <LCD_VIDSENDCHAR+0x124>
	else if (__tmp > 65535)
    2904:	69 a9       	ldd	r22, Y+49	; 0x31
    2906:	7a a9       	ldd	r23, Y+50	; 0x32
    2908:	8b a9       	ldd	r24, Y+51	; 0x33
    290a:	9c a9       	ldd	r25, Y+52	; 0x34
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	3f ef       	ldi	r19, 0xFF	; 255
    2910:	4f e7       	ldi	r20, 0x7F	; 127
    2912:	57 e4       	ldi	r21, 0x47	; 71
    2914:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2918:	18 16       	cp	r1, r24
    291a:	4c f5       	brge	.+82     	; 0x296e <LCD_VIDSENDCHAR+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    291c:	6d a9       	ldd	r22, Y+53	; 0x35
    291e:	7e a9       	ldd	r23, Y+54	; 0x36
    2920:	8f a9       	ldd	r24, Y+55	; 0x37
    2922:	98 ad       	ldd	r25, Y+56	; 0x38
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	40 e2       	ldi	r20, 0x20	; 32
    292a:	51 e4       	ldi	r21, 0x41	; 65
    292c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2930:	dc 01       	movw	r26, r24
    2932:	cb 01       	movw	r24, r22
    2934:	bc 01       	movw	r22, r24
    2936:	cd 01       	movw	r24, r26
    2938:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    293c:	dc 01       	movw	r26, r24
    293e:	cb 01       	movw	r24, r22
    2940:	98 ab       	std	Y+48, r25	; 0x30
    2942:	8f a7       	std	Y+47, r24	; 0x2f
    2944:	0f c0       	rjmp	.+30     	; 0x2964 <LCD_VIDSENDCHAR+0x106>
    2946:	80 e9       	ldi	r24, 0x90	; 144
    2948:	91 e0       	ldi	r25, 0x01	; 1
    294a:	9e a7       	std	Y+46, r25	; 0x2e
    294c:	8d a7       	std	Y+45, r24	; 0x2d
    294e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2950:	9e a5       	ldd	r25, Y+46	; 0x2e
    2952:	01 97       	sbiw	r24, 0x01	; 1
    2954:	f1 f7       	brne	.-4      	; 0x2952 <LCD_VIDSENDCHAR+0xf4>
    2956:	9e a7       	std	Y+46, r25	; 0x2e
    2958:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    295a:	8f a5       	ldd	r24, Y+47	; 0x2f
    295c:	98 a9       	ldd	r25, Y+48	; 0x30
    295e:	01 97       	sbiw	r24, 0x01	; 1
    2960:	98 ab       	std	Y+48, r25	; 0x30
    2962:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2964:	8f a5       	ldd	r24, Y+47	; 0x2f
    2966:	98 a9       	ldd	r25, Y+48	; 0x30
    2968:	00 97       	sbiw	r24, 0x00	; 0
    296a:	69 f7       	brne	.-38     	; 0x2946 <LCD_VIDSENDCHAR+0xe8>
    296c:	14 c0       	rjmp	.+40     	; 0x2996 <LCD_VIDSENDCHAR+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    296e:	69 a9       	ldd	r22, Y+49	; 0x31
    2970:	7a a9       	ldd	r23, Y+50	; 0x32
    2972:	8b a9       	ldd	r24, Y+51	; 0x33
    2974:	9c a9       	ldd	r25, Y+52	; 0x34
    2976:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    297a:	dc 01       	movw	r26, r24
    297c:	cb 01       	movw	r24, r22
    297e:	98 ab       	std	Y+48, r25	; 0x30
    2980:	8f a7       	std	Y+47, r24	; 0x2f
    2982:	8f a5       	ldd	r24, Y+47	; 0x2f
    2984:	98 a9       	ldd	r25, Y+48	; 0x30
    2986:	9c a7       	std	Y+44, r25	; 0x2c
    2988:	8b a7       	std	Y+43, r24	; 0x2b
    298a:	8b a5       	ldd	r24, Y+43	; 0x2b
    298c:	9c a5       	ldd	r25, Y+44	; 0x2c
    298e:	01 97       	sbiw	r24, 0x01	; 1
    2990:	f1 f7       	brne	.-4      	; 0x298e <LCD_VIDSENDCHAR+0x130>
    2992:	9c a7       	std	Y+44, r25	; 0x2c
    2994:	8b a7       	std	Y+43, r24	; 0x2b
	/* wait for E to settle */
	_delay_ms(2);
	/* SET E to HIGH */
	DIO_WRITECHANNEL( E, HIGH);
    2996:	82 e0       	ldi	r24, 0x02	; 2
    2998:	61 e0       	ldi	r22, 0x01	; 1
    299a:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
    299e:	80 e0       	ldi	r24, 0x00	; 0
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	a0 e8       	ldi	r26, 0x80	; 128
    29a4:	bf e3       	ldi	r27, 0x3F	; 63
    29a6:	8f a3       	std	Y+39, r24	; 0x27
    29a8:	98 a7       	std	Y+40, r25	; 0x28
    29aa:	a9 a7       	std	Y+41, r26	; 0x29
    29ac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ae:	6f a1       	ldd	r22, Y+39	; 0x27
    29b0:	78 a5       	ldd	r23, Y+40	; 0x28
    29b2:	89 a5       	ldd	r24, Y+41	; 0x29
    29b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    29b6:	20 e0       	ldi	r18, 0x00	; 0
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	4a e7       	ldi	r20, 0x7A	; 122
    29bc:	55 e4       	ldi	r21, 0x45	; 69
    29be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c2:	dc 01       	movw	r26, r24
    29c4:	cb 01       	movw	r24, r22
    29c6:	8b a3       	std	Y+35, r24	; 0x23
    29c8:	9c a3       	std	Y+36, r25	; 0x24
    29ca:	ad a3       	std	Y+37, r26	; 0x25
    29cc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29ce:	6b a1       	ldd	r22, Y+35	; 0x23
    29d0:	7c a1       	ldd	r23, Y+36	; 0x24
    29d2:	8d a1       	ldd	r24, Y+37	; 0x25
    29d4:	9e a1       	ldd	r25, Y+38	; 0x26
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	40 e8       	ldi	r20, 0x80	; 128
    29dc:	5f e3       	ldi	r21, 0x3F	; 63
    29de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29e2:	88 23       	and	r24, r24
    29e4:	2c f4       	brge	.+10     	; 0x29f0 <LCD_VIDSENDCHAR+0x192>
		__ticks = 1;
    29e6:	81 e0       	ldi	r24, 0x01	; 1
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	9a a3       	std	Y+34, r25	; 0x22
    29ec:	89 a3       	std	Y+33, r24	; 0x21
    29ee:	3f c0       	rjmp	.+126    	; 0x2a6e <LCD_VIDSENDCHAR+0x210>
	else if (__tmp > 65535)
    29f0:	6b a1       	ldd	r22, Y+35	; 0x23
    29f2:	7c a1       	ldd	r23, Y+36	; 0x24
    29f4:	8d a1       	ldd	r24, Y+37	; 0x25
    29f6:	9e a1       	ldd	r25, Y+38	; 0x26
    29f8:	20 e0       	ldi	r18, 0x00	; 0
    29fa:	3f ef       	ldi	r19, 0xFF	; 255
    29fc:	4f e7       	ldi	r20, 0x7F	; 127
    29fe:	57 e4       	ldi	r21, 0x47	; 71
    2a00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a04:	18 16       	cp	r1, r24
    2a06:	4c f5       	brge	.+82     	; 0x2a5a <LCD_VIDSENDCHAR+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a08:	6f a1       	ldd	r22, Y+39	; 0x27
    2a0a:	78 a5       	ldd	r23, Y+40	; 0x28
    2a0c:	89 a5       	ldd	r24, Y+41	; 0x29
    2a0e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a10:	20 e0       	ldi	r18, 0x00	; 0
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	40 e2       	ldi	r20, 0x20	; 32
    2a16:	51 e4       	ldi	r21, 0x41	; 65
    2a18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a1c:	dc 01       	movw	r26, r24
    2a1e:	cb 01       	movw	r24, r22
    2a20:	bc 01       	movw	r22, r24
    2a22:	cd 01       	movw	r24, r26
    2a24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a28:	dc 01       	movw	r26, r24
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	9a a3       	std	Y+34, r25	; 0x22
    2a2e:	89 a3       	std	Y+33, r24	; 0x21
    2a30:	0f c0       	rjmp	.+30     	; 0x2a50 <LCD_VIDSENDCHAR+0x1f2>
    2a32:	80 e9       	ldi	r24, 0x90	; 144
    2a34:	91 e0       	ldi	r25, 0x01	; 1
    2a36:	98 a3       	std	Y+32, r25	; 0x20
    2a38:	8f 8f       	std	Y+31, r24	; 0x1f
    2a3a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a3c:	98 a1       	ldd	r25, Y+32	; 0x20
    2a3e:	01 97       	sbiw	r24, 0x01	; 1
    2a40:	f1 f7       	brne	.-4      	; 0x2a3e <LCD_VIDSENDCHAR+0x1e0>
    2a42:	98 a3       	std	Y+32, r25	; 0x20
    2a44:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a46:	89 a1       	ldd	r24, Y+33	; 0x21
    2a48:	9a a1       	ldd	r25, Y+34	; 0x22
    2a4a:	01 97       	sbiw	r24, 0x01	; 1
    2a4c:	9a a3       	std	Y+34, r25	; 0x22
    2a4e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a50:	89 a1       	ldd	r24, Y+33	; 0x21
    2a52:	9a a1       	ldd	r25, Y+34	; 0x22
    2a54:	00 97       	sbiw	r24, 0x00	; 0
    2a56:	69 f7       	brne	.-38     	; 0x2a32 <LCD_VIDSENDCHAR+0x1d4>
    2a58:	14 c0       	rjmp	.+40     	; 0x2a82 <LCD_VIDSENDCHAR+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a5a:	6b a1       	ldd	r22, Y+35	; 0x23
    2a5c:	7c a1       	ldd	r23, Y+36	; 0x24
    2a5e:	8d a1       	ldd	r24, Y+37	; 0x25
    2a60:	9e a1       	ldd	r25, Y+38	; 0x26
    2a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a66:	dc 01       	movw	r26, r24
    2a68:	cb 01       	movw	r24, r22
    2a6a:	9a a3       	std	Y+34, r25	; 0x22
    2a6c:	89 a3       	std	Y+33, r24	; 0x21
    2a6e:	89 a1       	ldd	r24, Y+33	; 0x21
    2a70:	9a a1       	ldd	r25, Y+34	; 0x22
    2a72:	9e 8f       	std	Y+30, r25	; 0x1e
    2a74:	8d 8f       	std	Y+29, r24	; 0x1d
    2a76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a78:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a7a:	01 97       	sbiw	r24, 0x01	; 1
    2a7c:	f1 f7       	brne	.-4      	; 0x2a7a <LCD_VIDSENDCHAR+0x21c>
    2a7e:	9e 8f       	std	Y+30, r25	; 0x1e
    2a80:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/* WRITE COMMAND */
	DIO_WRITEPORT( LCD_WRITE_PORT, (((DATA <<3)& 0x78)| 0x06)| DIO_READCHANNEL(PINA0));
    2a82:	89 ad       	ldd	r24, Y+57	; 0x39
    2a84:	88 2f       	mov	r24, r24
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	88 0f       	add	r24, r24
    2a8a:	99 1f       	adc	r25, r25
    2a8c:	88 0f       	add	r24, r24
    2a8e:	99 1f       	adc	r25, r25
    2a90:	88 0f       	add	r24, r24
    2a92:	99 1f       	adc	r25, r25
    2a94:	88 77       	andi	r24, 0x78	; 120
    2a96:	18 2f       	mov	r17, r24
    2a98:	16 60       	ori	r17, 0x06	; 6
    2a9a:	80 e0       	ldi	r24, 0x00	; 0
    2a9c:	0e 94 49 08 	call	0x1092	; 0x1092 <DIO_READCHANNEL>
    2aa0:	81 2b       	or	r24, r17
    2aa2:	98 2f       	mov	r25, r24
    2aa4:	80 e0       	ldi	r24, 0x00	; 0
    2aa6:	69 2f       	mov	r22, r25
    2aa8:	0e 94 08 08 	call	0x1010	; 0x1010 <DIO_WRITEPORT>
	/* SET E to LOW */
	DIO_WRITECHANNEL( E, LOW);
    2aac:	82 e0       	ldi	r24, 0x02	; 2
    2aae:	60 e0       	ldi	r22, 0x00	; 0
    2ab0:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
    2ab4:	80 e0       	ldi	r24, 0x00	; 0
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	a0 e0       	ldi	r26, 0x00	; 0
    2aba:	b0 e4       	ldi	r27, 0x40	; 64
    2abc:	89 8f       	std	Y+25, r24	; 0x19
    2abe:	9a 8f       	std	Y+26, r25	; 0x1a
    2ac0:	ab 8f       	std	Y+27, r26	; 0x1b
    2ac2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ac4:	69 8d       	ldd	r22, Y+25	; 0x19
    2ac6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ac8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2aca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2acc:	20 e0       	ldi	r18, 0x00	; 0
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	4a e7       	ldi	r20, 0x7A	; 122
    2ad2:	55 e4       	ldi	r21, 0x45	; 69
    2ad4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad8:	dc 01       	movw	r26, r24
    2ada:	cb 01       	movw	r24, r22
    2adc:	8d 8b       	std	Y+21, r24	; 0x15
    2ade:	9e 8b       	std	Y+22, r25	; 0x16
    2ae0:	af 8b       	std	Y+23, r26	; 0x17
    2ae2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ae4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ae6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ae8:	8f 89       	ldd	r24, Y+23	; 0x17
    2aea:	98 8d       	ldd	r25, Y+24	; 0x18
    2aec:	20 e0       	ldi	r18, 0x00	; 0
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	40 e8       	ldi	r20, 0x80	; 128
    2af2:	5f e3       	ldi	r21, 0x3F	; 63
    2af4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2af8:	88 23       	and	r24, r24
    2afa:	2c f4       	brge	.+10     	; 0x2b06 <LCD_VIDSENDCHAR+0x2a8>
		__ticks = 1;
    2afc:	81 e0       	ldi	r24, 0x01	; 1
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	9c 8b       	std	Y+20, r25	; 0x14
    2b02:	8b 8b       	std	Y+19, r24	; 0x13
    2b04:	3f c0       	rjmp	.+126    	; 0x2b84 <LCD_VIDSENDCHAR+0x326>
	else if (__tmp > 65535)
    2b06:	6d 89       	ldd	r22, Y+21	; 0x15
    2b08:	7e 89       	ldd	r23, Y+22	; 0x16
    2b0a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b0c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b0e:	20 e0       	ldi	r18, 0x00	; 0
    2b10:	3f ef       	ldi	r19, 0xFF	; 255
    2b12:	4f e7       	ldi	r20, 0x7F	; 127
    2b14:	57 e4       	ldi	r21, 0x47	; 71
    2b16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b1a:	18 16       	cp	r1, r24
    2b1c:	4c f5       	brge	.+82     	; 0x2b70 <LCD_VIDSENDCHAR+0x312>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b1e:	69 8d       	ldd	r22, Y+25	; 0x19
    2b20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	40 e2       	ldi	r20, 0x20	; 32
    2b2c:	51 e4       	ldi	r21, 0x41	; 65
    2b2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b32:	dc 01       	movw	r26, r24
    2b34:	cb 01       	movw	r24, r22
    2b36:	bc 01       	movw	r22, r24
    2b38:	cd 01       	movw	r24, r26
    2b3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b3e:	dc 01       	movw	r26, r24
    2b40:	cb 01       	movw	r24, r22
    2b42:	9c 8b       	std	Y+20, r25	; 0x14
    2b44:	8b 8b       	std	Y+19, r24	; 0x13
    2b46:	0f c0       	rjmp	.+30     	; 0x2b66 <LCD_VIDSENDCHAR+0x308>
    2b48:	80 e9       	ldi	r24, 0x90	; 144
    2b4a:	91 e0       	ldi	r25, 0x01	; 1
    2b4c:	9a 8b       	std	Y+18, r25	; 0x12
    2b4e:	89 8b       	std	Y+17, r24	; 0x11
    2b50:	89 89       	ldd	r24, Y+17	; 0x11
    2b52:	9a 89       	ldd	r25, Y+18	; 0x12
    2b54:	01 97       	sbiw	r24, 0x01	; 1
    2b56:	f1 f7       	brne	.-4      	; 0x2b54 <LCD_VIDSENDCHAR+0x2f6>
    2b58:	9a 8b       	std	Y+18, r25	; 0x12
    2b5a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b5c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b5e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b60:	01 97       	sbiw	r24, 0x01	; 1
    2b62:	9c 8b       	std	Y+20, r25	; 0x14
    2b64:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b66:	8b 89       	ldd	r24, Y+19	; 0x13
    2b68:	9c 89       	ldd	r25, Y+20	; 0x14
    2b6a:	00 97       	sbiw	r24, 0x00	; 0
    2b6c:	69 f7       	brne	.-38     	; 0x2b48 <LCD_VIDSENDCHAR+0x2ea>
    2b6e:	14 c0       	rjmp	.+40     	; 0x2b98 <LCD_VIDSENDCHAR+0x33a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b70:	6d 89       	ldd	r22, Y+21	; 0x15
    2b72:	7e 89       	ldd	r23, Y+22	; 0x16
    2b74:	8f 89       	ldd	r24, Y+23	; 0x17
    2b76:	98 8d       	ldd	r25, Y+24	; 0x18
    2b78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b7c:	dc 01       	movw	r26, r24
    2b7e:	cb 01       	movw	r24, r22
    2b80:	9c 8b       	std	Y+20, r25	; 0x14
    2b82:	8b 8b       	std	Y+19, r24	; 0x13
    2b84:	8b 89       	ldd	r24, Y+19	; 0x13
    2b86:	9c 89       	ldd	r25, Y+20	; 0x14
    2b88:	98 8b       	std	Y+16, r25	; 0x10
    2b8a:	8f 87       	std	Y+15, r24	; 0x0f
    2b8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b8e:	98 89       	ldd	r25, Y+16	; 0x10
    2b90:	01 97       	sbiw	r24, 0x01	; 1
    2b92:	f1 f7       	brne	.-4      	; 0x2b90 <LCD_VIDSENDCHAR+0x332>
    2b94:	98 8b       	std	Y+16, r25	; 0x10
    2b96:	8f 87       	std	Y+15, r24	; 0x0f
	/* wait for E to settle */
	_delay_ms(2);
	/* SET E to HIGH */
	DIO_WRITECHANNEL( E, HIGH);
    2b98:	82 e0       	ldi	r24, 0x02	; 2
    2b9a:	61 e0       	ldi	r22, 0x01	; 1
    2b9c:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
    2ba0:	80 e0       	ldi	r24, 0x00	; 0
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	a0 ea       	ldi	r26, 0xA0	; 160
    2ba6:	b0 e4       	ldi	r27, 0x40	; 64
    2ba8:	8b 87       	std	Y+11, r24	; 0x0b
    2baa:	9c 87       	std	Y+12, r25	; 0x0c
    2bac:	ad 87       	std	Y+13, r26	; 0x0d
    2bae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bb8:	20 e0       	ldi	r18, 0x00	; 0
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	4a e7       	ldi	r20, 0x7A	; 122
    2bbe:	55 e4       	ldi	r21, 0x45	; 69
    2bc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc4:	dc 01       	movw	r26, r24
    2bc6:	cb 01       	movw	r24, r22
    2bc8:	8f 83       	std	Y+7, r24	; 0x07
    2bca:	98 87       	std	Y+8, r25	; 0x08
    2bcc:	a9 87       	std	Y+9, r26	; 0x09
    2bce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bd0:	6f 81       	ldd	r22, Y+7	; 0x07
    2bd2:	78 85       	ldd	r23, Y+8	; 0x08
    2bd4:	89 85       	ldd	r24, Y+9	; 0x09
    2bd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bd8:	20 e0       	ldi	r18, 0x00	; 0
    2bda:	30 e0       	ldi	r19, 0x00	; 0
    2bdc:	40 e8       	ldi	r20, 0x80	; 128
    2bde:	5f e3       	ldi	r21, 0x3F	; 63
    2be0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2be4:	88 23       	and	r24, r24
    2be6:	2c f4       	brge	.+10     	; 0x2bf2 <LCD_VIDSENDCHAR+0x394>
		__ticks = 1;
    2be8:	81 e0       	ldi	r24, 0x01	; 1
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	9e 83       	std	Y+6, r25	; 0x06
    2bee:	8d 83       	std	Y+5, r24	; 0x05
    2bf0:	3f c0       	rjmp	.+126    	; 0x2c70 <LCD_VIDSENDCHAR+0x412>
	else if (__tmp > 65535)
    2bf2:	6f 81       	ldd	r22, Y+7	; 0x07
    2bf4:	78 85       	ldd	r23, Y+8	; 0x08
    2bf6:	89 85       	ldd	r24, Y+9	; 0x09
    2bf8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bfa:	20 e0       	ldi	r18, 0x00	; 0
    2bfc:	3f ef       	ldi	r19, 0xFF	; 255
    2bfe:	4f e7       	ldi	r20, 0x7F	; 127
    2c00:	57 e4       	ldi	r21, 0x47	; 71
    2c02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c06:	18 16       	cp	r1, r24
    2c08:	4c f5       	brge	.+82     	; 0x2c5c <LCD_VIDSENDCHAR+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c10:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c12:	20 e0       	ldi	r18, 0x00	; 0
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	40 e2       	ldi	r20, 0x20	; 32
    2c18:	51 e4       	ldi	r21, 0x41	; 65
    2c1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c1e:	dc 01       	movw	r26, r24
    2c20:	cb 01       	movw	r24, r22
    2c22:	bc 01       	movw	r22, r24
    2c24:	cd 01       	movw	r24, r26
    2c26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c2a:	dc 01       	movw	r26, r24
    2c2c:	cb 01       	movw	r24, r22
    2c2e:	9e 83       	std	Y+6, r25	; 0x06
    2c30:	8d 83       	std	Y+5, r24	; 0x05
    2c32:	0f c0       	rjmp	.+30     	; 0x2c52 <LCD_VIDSENDCHAR+0x3f4>
    2c34:	80 e9       	ldi	r24, 0x90	; 144
    2c36:	91 e0       	ldi	r25, 0x01	; 1
    2c38:	9c 83       	std	Y+4, r25	; 0x04
    2c3a:	8b 83       	std	Y+3, r24	; 0x03
    2c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c40:	01 97       	sbiw	r24, 0x01	; 1
    2c42:	f1 f7       	brne	.-4      	; 0x2c40 <LCD_VIDSENDCHAR+0x3e2>
    2c44:	9c 83       	std	Y+4, r25	; 0x04
    2c46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c48:	8d 81       	ldd	r24, Y+5	; 0x05
    2c4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c4c:	01 97       	sbiw	r24, 0x01	; 1
    2c4e:	9e 83       	std	Y+6, r25	; 0x06
    2c50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c52:	8d 81       	ldd	r24, Y+5	; 0x05
    2c54:	9e 81       	ldd	r25, Y+6	; 0x06
    2c56:	00 97       	sbiw	r24, 0x00	; 0
    2c58:	69 f7       	brne	.-38     	; 0x2c34 <LCD_VIDSENDCHAR+0x3d6>
    2c5a:	14 c0       	rjmp	.+40     	; 0x2c84 <LCD_VIDSENDCHAR+0x426>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c5c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c5e:	78 85       	ldd	r23, Y+8	; 0x08
    2c60:	89 85       	ldd	r24, Y+9	; 0x09
    2c62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c68:	dc 01       	movw	r26, r24
    2c6a:	cb 01       	movw	r24, r22
    2c6c:	9e 83       	std	Y+6, r25	; 0x06
    2c6e:	8d 83       	std	Y+5, r24	; 0x05
    2c70:	8d 81       	ldd	r24, Y+5	; 0x05
    2c72:	9e 81       	ldd	r25, Y+6	; 0x06
    2c74:	9a 83       	std	Y+2, r25	; 0x02
    2c76:	89 83       	std	Y+1, r24	; 0x01
    2c78:	89 81       	ldd	r24, Y+1	; 0x01
    2c7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c7c:	01 97       	sbiw	r24, 0x01	; 1
    2c7e:	f1 f7       	brne	.-4      	; 0x2c7c <LCD_VIDSENDCHAR+0x41e>
    2c80:	9a 83       	std	Y+2, r25	; 0x02
    2c82:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
#endif
}
    2c84:	e9 96       	adiw	r28, 0x39	; 57
    2c86:	0f b6       	in	r0, 0x3f	; 63
    2c88:	f8 94       	cli
    2c8a:	de bf       	out	0x3e, r29	; 62
    2c8c:	0f be       	out	0x3f, r0	; 63
    2c8e:	cd bf       	out	0x3d, r28	; 61
    2c90:	cf 91       	pop	r28
    2c92:	df 91       	pop	r29
    2c94:	1f 91       	pop	r17
    2c96:	08 95       	ret

00002c98 <LCD_VIDGOTOXY>:

void LCD_VIDGOTOXY(uint8 x, uint8 y) {
    2c98:	df 93       	push	r29
    2c9a:	cf 93       	push	r28
    2c9c:	00 d0       	rcall	.+0      	; 0x2c9e <LCD_VIDGOTOXY+0x6>
    2c9e:	00 d0       	rcall	.+0      	; 0x2ca0 <LCD_VIDGOTOXY+0x8>
    2ca0:	cd b7       	in	r28, 0x3d	; 61
    2ca2:	de b7       	in	r29, 0x3e	; 62
    2ca4:	89 83       	std	Y+1, r24	; 0x01
    2ca6:	6a 83       	std	Y+2, r22	; 0x02
	if (y >= 0 && y < 16) {
    2ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    2caa:	80 31       	cpi	r24, 0x10	; 16
    2cac:	c0 f4       	brcc	.+48     	; 0x2cde <LCD_VIDGOTOXY+0x46>
		switch (x) {
    2cae:	89 81       	ldd	r24, Y+1	; 0x01
    2cb0:	28 2f       	mov	r18, r24
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	3c 83       	std	Y+4, r19	; 0x04
    2cb6:	2b 83       	std	Y+3, r18	; 0x03
    2cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cba:	9c 81       	ldd	r25, Y+4	; 0x04
    2cbc:	00 97       	sbiw	r24, 0x00	; 0
    2cbe:	31 f0       	breq	.+12     	; 0x2ccc <LCD_VIDGOTOXY+0x34>
    2cc0:	2b 81       	ldd	r18, Y+3	; 0x03
    2cc2:	3c 81       	ldd	r19, Y+4	; 0x04
    2cc4:	21 30       	cpi	r18, 0x01	; 1
    2cc6:	31 05       	cpc	r19, r1
    2cc8:	31 f0       	breq	.+12     	; 0x2cd6 <LCD_VIDGOTOXY+0x3e>
    2cca:	09 c0       	rjmp	.+18     	; 0x2cde <LCD_VIDGOTOXY+0x46>
		case 0:
			LCD_VIDSENDCOMMAND(y + LCD_FIRSTROW);
    2ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cce:	80 58       	subi	r24, 0x80	; 128
    2cd0:	0e 94 27 10 	call	0x204e	; 0x204e <LCD_VIDSENDCOMMAND>
    2cd4:	04 c0       	rjmp	.+8      	; 0x2cde <LCD_VIDGOTOXY+0x46>
			break;
		case 1:
			LCD_VIDSENDCOMMAND(y + LCD_SECONDROW);
    2cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd8:	80 54       	subi	r24, 0x40	; 64
    2cda:	0e 94 27 10 	call	0x204e	; 0x204e <LCD_VIDSENDCOMMAND>
			break;
		}
	}
}
    2cde:	0f 90       	pop	r0
    2ce0:	0f 90       	pop	r0
    2ce2:	0f 90       	pop	r0
    2ce4:	0f 90       	pop	r0
    2ce6:	cf 91       	pop	r28
    2ce8:	df 91       	pop	r29
    2cea:	08 95       	ret

00002cec <LCD_VIDSENDSTRING>:

void LCD_VIDSENDSTRING(uint8* STRING, uint8 MAX) {
    2cec:	df 93       	push	r29
    2cee:	cf 93       	push	r28
    2cf0:	cd b7       	in	r28, 0x3d	; 61
    2cf2:	de b7       	in	r29, 0x3e	; 62
    2cf4:	62 97       	sbiw	r28, 0x12	; 18
    2cf6:	0f b6       	in	r0, 0x3f	; 63
    2cf8:	f8 94       	cli
    2cfa:	de bf       	out	0x3e, r29	; 62
    2cfc:	0f be       	out	0x3f, r0	; 63
    2cfe:	cd bf       	out	0x3d, r28	; 61
    2d00:	99 8b       	std	Y+17, r25	; 0x11
    2d02:	88 8b       	std	Y+16, r24	; 0x10
    2d04:	6a 8b       	std	Y+18, r22	; 0x12
	uint8 i = 0;
    2d06:	1f 86       	std	Y+15, r1	; 0x0f
	for (i = 0; i < MAX; i++) {
    2d08:	1f 86       	std	Y+15, r1	; 0x0f
    2d0a:	0e c0       	rjmp	.+28     	; 0x2d28 <LCD_VIDSENDSTRING+0x3c>
		LCD_VIDSENDCHAR(STRING[i]);
    2d0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d0e:	28 2f       	mov	r18, r24
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	88 89       	ldd	r24, Y+16	; 0x10
    2d14:	99 89       	ldd	r25, Y+17	; 0x11
    2d16:	fc 01       	movw	r30, r24
    2d18:	e2 0f       	add	r30, r18
    2d1a:	f3 1f       	adc	r31, r19
    2d1c:	80 81       	ld	r24, Z
    2d1e:	0e 94 2f 14 	call	0x285e	; 0x285e <LCD_VIDSENDCHAR>
	}
}

void LCD_VIDSENDSTRING(uint8* STRING, uint8 MAX) {
	uint8 i = 0;
	for (i = 0; i < MAX; i++) {
    2d22:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d24:	8f 5f       	subi	r24, 0xFF	; 255
    2d26:	8f 87       	std	Y+15, r24	; 0x0f
    2d28:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d2a:	8a 89       	ldd	r24, Y+18	; 0x12
    2d2c:	98 17       	cp	r25, r24
    2d2e:	70 f3       	brcs	.-36     	; 0x2d0c <LCD_VIDSENDSTRING+0x20>
    2d30:	80 e0       	ldi	r24, 0x00	; 0
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	a0 e0       	ldi	r26, 0x00	; 0
    2d36:	b0 e4       	ldi	r27, 0x40	; 64
    2d38:	8b 87       	std	Y+11, r24	; 0x0b
    2d3a:	9c 87       	std	Y+12, r25	; 0x0c
    2d3c:	ad 87       	std	Y+13, r26	; 0x0d
    2d3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d40:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d42:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d44:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d46:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d48:	20 e0       	ldi	r18, 0x00	; 0
    2d4a:	30 e0       	ldi	r19, 0x00	; 0
    2d4c:	4a e7       	ldi	r20, 0x7A	; 122
    2d4e:	55 e4       	ldi	r21, 0x45	; 69
    2d50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d54:	dc 01       	movw	r26, r24
    2d56:	cb 01       	movw	r24, r22
    2d58:	8f 83       	std	Y+7, r24	; 0x07
    2d5a:	98 87       	std	Y+8, r25	; 0x08
    2d5c:	a9 87       	std	Y+9, r26	; 0x09
    2d5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d60:	6f 81       	ldd	r22, Y+7	; 0x07
    2d62:	78 85       	ldd	r23, Y+8	; 0x08
    2d64:	89 85       	ldd	r24, Y+9	; 0x09
    2d66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d68:	20 e0       	ldi	r18, 0x00	; 0
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	40 e8       	ldi	r20, 0x80	; 128
    2d6e:	5f e3       	ldi	r21, 0x3F	; 63
    2d70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d74:	88 23       	and	r24, r24
    2d76:	2c f4       	brge	.+10     	; 0x2d82 <LCD_VIDSENDSTRING+0x96>
		__ticks = 1;
    2d78:	81 e0       	ldi	r24, 0x01	; 1
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	9e 83       	std	Y+6, r25	; 0x06
    2d7e:	8d 83       	std	Y+5, r24	; 0x05
    2d80:	3f c0       	rjmp	.+126    	; 0x2e00 <LCD_VIDSENDSTRING+0x114>
	else if (__tmp > 65535)
    2d82:	6f 81       	ldd	r22, Y+7	; 0x07
    2d84:	78 85       	ldd	r23, Y+8	; 0x08
    2d86:	89 85       	ldd	r24, Y+9	; 0x09
    2d88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d8a:	20 e0       	ldi	r18, 0x00	; 0
    2d8c:	3f ef       	ldi	r19, 0xFF	; 255
    2d8e:	4f e7       	ldi	r20, 0x7F	; 127
    2d90:	57 e4       	ldi	r21, 0x47	; 71
    2d92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d96:	18 16       	cp	r1, r24
    2d98:	4c f5       	brge	.+82     	; 0x2dec <LCD_VIDSENDSTRING+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2da0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2da2:	20 e0       	ldi	r18, 0x00	; 0
    2da4:	30 e0       	ldi	r19, 0x00	; 0
    2da6:	40 e2       	ldi	r20, 0x20	; 32
    2da8:	51 e4       	ldi	r21, 0x41	; 65
    2daa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dae:	dc 01       	movw	r26, r24
    2db0:	cb 01       	movw	r24, r22
    2db2:	bc 01       	movw	r22, r24
    2db4:	cd 01       	movw	r24, r26
    2db6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dba:	dc 01       	movw	r26, r24
    2dbc:	cb 01       	movw	r24, r22
    2dbe:	9e 83       	std	Y+6, r25	; 0x06
    2dc0:	8d 83       	std	Y+5, r24	; 0x05
    2dc2:	0f c0       	rjmp	.+30     	; 0x2de2 <LCD_VIDSENDSTRING+0xf6>
    2dc4:	80 e9       	ldi	r24, 0x90	; 144
    2dc6:	91 e0       	ldi	r25, 0x01	; 1
    2dc8:	9c 83       	std	Y+4, r25	; 0x04
    2dca:	8b 83       	std	Y+3, r24	; 0x03
    2dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dce:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd0:	01 97       	sbiw	r24, 0x01	; 1
    2dd2:	f1 f7       	brne	.-4      	; 0x2dd0 <LCD_VIDSENDSTRING+0xe4>
    2dd4:	9c 83       	std	Y+4, r25	; 0x04
    2dd6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dd8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dda:	9e 81       	ldd	r25, Y+6	; 0x06
    2ddc:	01 97       	sbiw	r24, 0x01	; 1
    2dde:	9e 83       	std	Y+6, r25	; 0x06
    2de0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2de2:	8d 81       	ldd	r24, Y+5	; 0x05
    2de4:	9e 81       	ldd	r25, Y+6	; 0x06
    2de6:	00 97       	sbiw	r24, 0x00	; 0
    2de8:	69 f7       	brne	.-38     	; 0x2dc4 <LCD_VIDSENDSTRING+0xd8>
    2dea:	14 c0       	rjmp	.+40     	; 0x2e14 <LCD_VIDSENDSTRING+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dec:	6f 81       	ldd	r22, Y+7	; 0x07
    2dee:	78 85       	ldd	r23, Y+8	; 0x08
    2df0:	89 85       	ldd	r24, Y+9	; 0x09
    2df2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2df4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df8:	dc 01       	movw	r26, r24
    2dfa:	cb 01       	movw	r24, r22
    2dfc:	9e 83       	std	Y+6, r25	; 0x06
    2dfe:	8d 83       	std	Y+5, r24	; 0x05
    2e00:	8d 81       	ldd	r24, Y+5	; 0x05
    2e02:	9e 81       	ldd	r25, Y+6	; 0x06
    2e04:	9a 83       	std	Y+2, r25	; 0x02
    2e06:	89 83       	std	Y+1, r24	; 0x01
    2e08:	89 81       	ldd	r24, Y+1	; 0x01
    2e0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e0c:	01 97       	sbiw	r24, 0x01	; 1
    2e0e:	f1 f7       	brne	.-4      	; 0x2e0c <LCD_VIDSENDSTRING+0x120>
    2e10:	9a 83       	std	Y+2, r25	; 0x02
    2e12:	89 83       	std	Y+1, r24	; 0x01
		LCD_VIDSENDCHAR(STRING[i]);
	}
	_delay_ms(2);
}
    2e14:	62 96       	adiw	r28, 0x12	; 18
    2e16:	0f b6       	in	r0, 0x3f	; 63
    2e18:	f8 94       	cli
    2e1a:	de bf       	out	0x3e, r29	; 62
    2e1c:	0f be       	out	0x3f, r0	; 63
    2e1e:	cd bf       	out	0x3d, r28	; 61
    2e20:	cf 91       	pop	r28
    2e22:	df 91       	pop	r29
    2e24:	08 95       	ret

00002e26 <LCD_WRITEEXTRACHAR>:
void LCD_WRITEEXTRACHAR(uint8 Row,uint8 Col){
    2e26:	df 93       	push	r29
    2e28:	cf 93       	push	r28
    2e2a:	00 d0       	rcall	.+0      	; 0x2e2c <LCD_WRITEEXTRACHAR+0x6>
    2e2c:	00 d0       	rcall	.+0      	; 0x2e2e <LCD_WRITEEXTRACHAR+0x8>
    2e2e:	cd b7       	in	r28, 0x3d	; 61
    2e30:	de b7       	in	r29, 0x3e	; 62
    2e32:	8b 83       	std	Y+3, r24	; 0x03
    2e34:	6c 83       	std	Y+4, r22	; 0x04
uint8 iteration1,iteration2;
if((Col>=0 && Col<16)&& ((Row==0 || Row==1))){
    2e36:	8c 81       	ldd	r24, Y+4	; 0x04
    2e38:	80 31       	cpi	r24, 0x10	; 16
    2e3a:	60 f5       	brcc	.+88     	; 0x2e94 <LCD_WRITEEXTRACHAR+0x6e>
    2e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3e:	88 23       	and	r24, r24
    2e40:	19 f0       	breq	.+6      	; 0x2e48 <LCD_WRITEEXTRACHAR+0x22>
    2e42:	8b 81       	ldd	r24, Y+3	; 0x03
    2e44:	81 30       	cpi	r24, 0x01	; 1
    2e46:	31 f5       	brne	.+76     	; 0x2e94 <LCD_WRITEEXTRACHAR+0x6e>
	//DIO_WRITECHANNEL(PINC0,HIGH);
	LCD_VIDSENDCOMMAND(0x40);
    2e48:	80 e4       	ldi	r24, 0x40	; 64
    2e4a:	0e 94 27 10 	call	0x204e	; 0x204e <LCD_VIDSENDCOMMAND>
	for(iteration1=0;iteration1<64;iteration1++){
    2e4e:	1a 82       	std	Y+2, r1	; 0x02
    2e50:	0c c0       	rjmp	.+24     	; 0x2e6a <LCD_WRITEEXTRACHAR+0x44>
		LCD_VIDSENDCHAR(ExtraChar[iteration1]);
    2e52:	8a 81       	ldd	r24, Y+2	; 0x02
    2e54:	88 2f       	mov	r24, r24
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	fc 01       	movw	r30, r24
    2e5a:	ee 57       	subi	r30, 0x7E	; 126
    2e5c:	fe 4f       	sbci	r31, 0xFE	; 254
    2e5e:	80 81       	ld	r24, Z
    2e60:	0e 94 2f 14 	call	0x285e	; 0x285e <LCD_VIDSENDCHAR>
void LCD_WRITEEXTRACHAR(uint8 Row,uint8 Col){
uint8 iteration1,iteration2;
if((Col>=0 && Col<16)&& ((Row==0 || Row==1))){
	//DIO_WRITECHANNEL(PINC0,HIGH);
	LCD_VIDSENDCOMMAND(0x40);
	for(iteration1=0;iteration1<64;iteration1++){
    2e64:	8a 81       	ldd	r24, Y+2	; 0x02
    2e66:	8f 5f       	subi	r24, 0xFF	; 255
    2e68:	8a 83       	std	Y+2, r24	; 0x02
    2e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e6c:	80 34       	cpi	r24, 0x40	; 64
    2e6e:	88 f3       	brcs	.-30     	; 0x2e52 <LCD_WRITEEXTRACHAR+0x2c>
		LCD_VIDSENDCHAR(ExtraChar[iteration1]);
	}
LCD_VIDSENDCOMMAND(0x80);
    2e70:	80 e8       	ldi	r24, 0x80	; 128
    2e72:	0e 94 27 10 	call	0x204e	; 0x204e <LCD_VIDSENDCOMMAND>
LCD_VIDGOTOXY(Row,Col);
    2e76:	8b 81       	ldd	r24, Y+3	; 0x03
    2e78:	6c 81       	ldd	r22, Y+4	; 0x04
    2e7a:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
for(iteration2=0;iteration2<8;iteration2++){
    2e7e:	19 82       	std	Y+1, r1	; 0x01
    2e80:	06 c0       	rjmp	.+12     	; 0x2e8e <LCD_WRITEEXTRACHAR+0x68>

		LCD_VIDSENDCHAR(iteration2);}
    2e82:	89 81       	ldd	r24, Y+1	; 0x01
    2e84:	0e 94 2f 14 	call	0x285e	; 0x285e <LCD_VIDSENDCHAR>
	for(iteration1=0;iteration1<64;iteration1++){
		LCD_VIDSENDCHAR(ExtraChar[iteration1]);
	}
LCD_VIDSENDCOMMAND(0x80);
LCD_VIDGOTOXY(Row,Col);
for(iteration2=0;iteration2<8;iteration2++){
    2e88:	89 81       	ldd	r24, Y+1	; 0x01
    2e8a:	8f 5f       	subi	r24, 0xFF	; 255
    2e8c:	89 83       	std	Y+1, r24	; 0x01
    2e8e:	89 81       	ldd	r24, Y+1	; 0x01
    2e90:	88 30       	cpi	r24, 0x08	; 8
    2e92:	b8 f3       	brcs	.-18     	; 0x2e82 <LCD_WRITEEXTRACHAR+0x5c>

		LCD_VIDSENDCHAR(iteration2);}

}

}
    2e94:	0f 90       	pop	r0
    2e96:	0f 90       	pop	r0
    2e98:	0f 90       	pop	r0
    2e9a:	0f 90       	pop	r0
    2e9c:	cf 91       	pop	r28
    2e9e:	df 91       	pop	r29
    2ea0:	08 95       	ret

00002ea2 <NEW_PASSWORD>:
#define  ADMIN 2022
static uint8 password[4], i = 0, confirm[4], mypassword[4], x = 0, admin[4],
		count = 0;
uint8 Status;

void NEW_PASSWORD(uint8 pass) {
    2ea2:	df 93       	push	r29
    2ea4:	cf 93       	push	r28
    2ea6:	cd b7       	in	r28, 0x3d	; 61
    2ea8:	de b7       	in	r29, 0x3e	; 62
    2eaa:	2f 97       	sbiw	r28, 0x0f	; 15
    2eac:	0f b6       	in	r0, 0x3f	; 63
    2eae:	f8 94       	cli
    2eb0:	de bf       	out	0x3e, r29	; 62
    2eb2:	0f be       	out	0x3f, r0	; 63
    2eb4:	cd bf       	out	0x3d, r28	; 61
    2eb6:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_VIDGOTOXY(0, 0);
    2eb8:	80 e0       	ldi	r24, 0x00	; 0
    2eba:	60 e0       	ldi	r22, 0x00	; 0
    2ebc:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
	LCD_VIDSENDSTRING("New Password:", 13);
    2ec0:	80 e6       	ldi	r24, 0x60	; 96
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	6d e0       	ldi	r22, 0x0D	; 13
    2ec6:	0e 94 76 16 	call	0x2cec	; 0x2cec <LCD_VIDSENDSTRING>
	LCD_VIDGOTOXY(1, 0);
    2eca:	81 e0       	ldi	r24, 0x01	; 1
    2ecc:	60 e0       	ldi	r22, 0x00	; 0
    2ece:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
	//pass = KEYPAD_READ();
	if (pass >= 0 && pass <= 9 && i<4) {
    2ed2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ed4:	8a 30       	cpi	r24, 0x0A	; 10
    2ed6:	68 f5       	brcc	.+90     	; 0x2f32 <NEW_PASSWORD+0x90>
    2ed8:	80 91 34 02 	lds	r24, 0x0234
    2edc:	84 30       	cpi	r24, 0x04	; 4
    2ede:	48 f5       	brcc	.+82     	; 0x2f32 <NEW_PASSWORD+0x90>

		password[i] = pass;
    2ee0:	80 91 34 02 	lds	r24, 0x0234
    2ee4:	88 2f       	mov	r24, r24
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	fc 01       	movw	r30, r24
    2eea:	e9 5c       	subi	r30, 0xC9	; 201
    2eec:	fd 4f       	sbci	r31, 0xFD	; 253
    2eee:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ef0:	80 83       	st	Z, r24
		LCD_VIDGOTOXY(1, i);
    2ef2:	90 91 34 02 	lds	r25, 0x0234
    2ef6:	81 e0       	ldi	r24, 0x01	; 1
    2ef8:	69 2f       	mov	r22, r25
    2efa:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
		LCD_VIDSENDCHAR(password[i] + 48);
    2efe:	80 91 34 02 	lds	r24, 0x0234
    2f02:	88 2f       	mov	r24, r24
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	fc 01       	movw	r30, r24
    2f08:	e9 5c       	subi	r30, 0xC9	; 201
    2f0a:	fd 4f       	sbci	r31, 0xFD	; 253
    2f0c:	80 81       	ld	r24, Z
    2f0e:	80 5d       	subi	r24, 0xD0	; 208
    2f10:	0e 94 2f 14 	call	0x285e	; 0x285e <LCD_VIDSENDCHAR>
		LCD_VIDGOTOXY(1, i);
    2f14:	90 91 34 02 	lds	r25, 0x0234
    2f18:	81 e0       	ldi	r24, 0x01	; 1
    2f1a:	69 2f       	mov	r22, r25
    2f1c:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
		LCD_VIDSENDCHAR('*');
    2f20:	8a e2       	ldi	r24, 0x2A	; 42
    2f22:	0e 94 2f 14 	call	0x285e	; 0x285e <LCD_VIDSENDCHAR>
		i++;
    2f26:	80 91 34 02 	lds	r24, 0x0234
    2f2a:	8f 5f       	subi	r24, 0xFF	; 255
    2f2c:	80 93 34 02 	sts	0x0234, r24
    2f30:	15 c0       	rjmp	.+42     	; 0x2f5c <NEW_PASSWORD+0xba>
	} else if (pass == 'c' && i > 0) {
    2f32:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f34:	83 36       	cpi	r24, 0x63	; 99
    2f36:	91 f4       	brne	.+36     	; 0x2f5c <NEW_PASSWORD+0xba>
    2f38:	80 91 34 02 	lds	r24, 0x0234
    2f3c:	88 23       	and	r24, r24
    2f3e:	71 f0       	breq	.+28     	; 0x2f5c <NEW_PASSWORD+0xba>
		i--;
    2f40:	80 91 34 02 	lds	r24, 0x0234
    2f44:	81 50       	subi	r24, 0x01	; 1
    2f46:	80 93 34 02 	sts	0x0234, r24
		LCD_VIDGOTOXY(1, i);
    2f4a:	90 91 34 02 	lds	r25, 0x0234
    2f4e:	81 e0       	ldi	r24, 0x01	; 1
    2f50:	69 2f       	mov	r22, r25
    2f52:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
		LCD_VIDSENDCHAR(' ');
    2f56:	80 e2       	ldi	r24, 0x20	; 32
    2f58:	0e 94 2f 14 	call	0x285e	; 0x285e <LCD_VIDSENDCHAR>
	}
	if (pass == '+' && i == 4) {
    2f5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f5e:	8b 32       	cpi	r24, 0x2B	; 43
    2f60:	69 f4       	brne	.+26     	; 0x2f7c <NEW_PASSWORD+0xda>
    2f62:	80 91 34 02 	lds	r24, 0x0234
    2f66:	84 30       	cpi	r24, 0x04	; 4
    2f68:	49 f4       	brne	.+18     	; 0x2f7c <NEW_PASSWORD+0xda>
		Status = Confirm_Password;
    2f6a:	81 e0       	ldi	r24, 0x01	; 1
    2f6c:	80 93 49 02 	sts	0x0249, r24
		LCD_VIDSENDCOMMAND(LCD_Clear);
    2f70:	81 e0       	ldi	r24, 0x01	; 1
    2f72:	0e 94 27 10 	call	0x204e	; 0x204e <LCD_VIDSENDCOMMAND>
		i = 0;
    2f76:	10 92 34 02 	sts	0x0234, r1
    2f7a:	9c c0       	rjmp	.+312    	; 0x30b4 <NEW_PASSWORD+0x212>
	} else if (pass == '+' && i != 4) {
    2f7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f7e:	8b 32       	cpi	r24, 0x2B	; 43
    2f80:	09 f0       	breq	.+2      	; 0x2f84 <NEW_PASSWORD+0xe2>
    2f82:	98 c0       	rjmp	.+304    	; 0x30b4 <NEW_PASSWORD+0x212>
    2f84:	80 91 34 02 	lds	r24, 0x0234
    2f88:	84 30       	cpi	r24, 0x04	; 4
    2f8a:	09 f4       	brne	.+2      	; 0x2f8e <NEW_PASSWORD+0xec>
    2f8c:	93 c0       	rjmp	.+294    	; 0x30b4 <NEW_PASSWORD+0x212>
		LCD_VIDGOTOXY(1, 0);
    2f8e:	81 e0       	ldi	r24, 0x01	; 1
    2f90:	60 e0       	ldi	r22, 0x00	; 0
    2f92:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
		LCD_VIDSENDSTRING("                           ", 16);
    2f96:	8e e6       	ldi	r24, 0x6E	; 110
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	60 e1       	ldi	r22, 0x10	; 16
    2f9c:	0e 94 76 16 	call	0x2cec	; 0x2cec <LCD_VIDSENDSTRING>
		LCD_VIDGOTOXY(1, 0);
    2fa0:	81 e0       	ldi	r24, 0x01	; 1
    2fa2:	60 e0       	ldi	r22, 0x00	; 0
    2fa4:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
		LCD_VIDSENDSTRING("PasswordSize== 4", 16);
    2fa8:	8a e8       	ldi	r24, 0x8A	; 138
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	60 e1       	ldi	r22, 0x10	; 16
    2fae:	0e 94 76 16 	call	0x2cec	; 0x2cec <LCD_VIDSENDSTRING>
    2fb2:	80 e0       	ldi	r24, 0x00	; 0
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	aa e7       	ldi	r26, 0x7A	; 122
    2fb8:	b4 e4       	ldi	r27, 0x44	; 68
    2fba:	8b 87       	std	Y+11, r24	; 0x0b
    2fbc:	9c 87       	std	Y+12, r25	; 0x0c
    2fbe:	ad 87       	std	Y+13, r26	; 0x0d
    2fc0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fca:	20 e0       	ldi	r18, 0x00	; 0
    2fcc:	30 e0       	ldi	r19, 0x00	; 0
    2fce:	4a e7       	ldi	r20, 0x7A	; 122
    2fd0:	55 e4       	ldi	r21, 0x45	; 69
    2fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd6:	dc 01       	movw	r26, r24
    2fd8:	cb 01       	movw	r24, r22
    2fda:	8f 83       	std	Y+7, r24	; 0x07
    2fdc:	98 87       	std	Y+8, r25	; 0x08
    2fde:	a9 87       	std	Y+9, r26	; 0x09
    2fe0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fe2:	6f 81       	ldd	r22, Y+7	; 0x07
    2fe4:	78 85       	ldd	r23, Y+8	; 0x08
    2fe6:	89 85       	ldd	r24, Y+9	; 0x09
    2fe8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fea:	20 e0       	ldi	r18, 0x00	; 0
    2fec:	30 e0       	ldi	r19, 0x00	; 0
    2fee:	40 e8       	ldi	r20, 0x80	; 128
    2ff0:	5f e3       	ldi	r21, 0x3F	; 63
    2ff2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ff6:	88 23       	and	r24, r24
    2ff8:	2c f4       	brge	.+10     	; 0x3004 <NEW_PASSWORD+0x162>
		__ticks = 1;
    2ffa:	81 e0       	ldi	r24, 0x01	; 1
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	9e 83       	std	Y+6, r25	; 0x06
    3000:	8d 83       	std	Y+5, r24	; 0x05
    3002:	3f c0       	rjmp	.+126    	; 0x3082 <NEW_PASSWORD+0x1e0>
	else if (__tmp > 65535)
    3004:	6f 81       	ldd	r22, Y+7	; 0x07
    3006:	78 85       	ldd	r23, Y+8	; 0x08
    3008:	89 85       	ldd	r24, Y+9	; 0x09
    300a:	9a 85       	ldd	r25, Y+10	; 0x0a
    300c:	20 e0       	ldi	r18, 0x00	; 0
    300e:	3f ef       	ldi	r19, 0xFF	; 255
    3010:	4f e7       	ldi	r20, 0x7F	; 127
    3012:	57 e4       	ldi	r21, 0x47	; 71
    3014:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3018:	18 16       	cp	r1, r24
    301a:	4c f5       	brge	.+82     	; 0x306e <NEW_PASSWORD+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    301c:	6b 85       	ldd	r22, Y+11	; 0x0b
    301e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3020:	8d 85       	ldd	r24, Y+13	; 0x0d
    3022:	9e 85       	ldd	r25, Y+14	; 0x0e
    3024:	20 e0       	ldi	r18, 0x00	; 0
    3026:	30 e0       	ldi	r19, 0x00	; 0
    3028:	40 e2       	ldi	r20, 0x20	; 32
    302a:	51 e4       	ldi	r21, 0x41	; 65
    302c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3030:	dc 01       	movw	r26, r24
    3032:	cb 01       	movw	r24, r22
    3034:	bc 01       	movw	r22, r24
    3036:	cd 01       	movw	r24, r26
    3038:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    303c:	dc 01       	movw	r26, r24
    303e:	cb 01       	movw	r24, r22
    3040:	9e 83       	std	Y+6, r25	; 0x06
    3042:	8d 83       	std	Y+5, r24	; 0x05
    3044:	0f c0       	rjmp	.+30     	; 0x3064 <NEW_PASSWORD+0x1c2>
    3046:	80 e9       	ldi	r24, 0x90	; 144
    3048:	91 e0       	ldi	r25, 0x01	; 1
    304a:	9c 83       	std	Y+4, r25	; 0x04
    304c:	8b 83       	std	Y+3, r24	; 0x03
    304e:	8b 81       	ldd	r24, Y+3	; 0x03
    3050:	9c 81       	ldd	r25, Y+4	; 0x04
    3052:	01 97       	sbiw	r24, 0x01	; 1
    3054:	f1 f7       	brne	.-4      	; 0x3052 <NEW_PASSWORD+0x1b0>
    3056:	9c 83       	std	Y+4, r25	; 0x04
    3058:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    305a:	8d 81       	ldd	r24, Y+5	; 0x05
    305c:	9e 81       	ldd	r25, Y+6	; 0x06
    305e:	01 97       	sbiw	r24, 0x01	; 1
    3060:	9e 83       	std	Y+6, r25	; 0x06
    3062:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3064:	8d 81       	ldd	r24, Y+5	; 0x05
    3066:	9e 81       	ldd	r25, Y+6	; 0x06
    3068:	00 97       	sbiw	r24, 0x00	; 0
    306a:	69 f7       	brne	.-38     	; 0x3046 <NEW_PASSWORD+0x1a4>
    306c:	14 c0       	rjmp	.+40     	; 0x3096 <NEW_PASSWORD+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    306e:	6f 81       	ldd	r22, Y+7	; 0x07
    3070:	78 85       	ldd	r23, Y+8	; 0x08
    3072:	89 85       	ldd	r24, Y+9	; 0x09
    3074:	9a 85       	ldd	r25, Y+10	; 0x0a
    3076:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    307a:	dc 01       	movw	r26, r24
    307c:	cb 01       	movw	r24, r22
    307e:	9e 83       	std	Y+6, r25	; 0x06
    3080:	8d 83       	std	Y+5, r24	; 0x05
    3082:	8d 81       	ldd	r24, Y+5	; 0x05
    3084:	9e 81       	ldd	r25, Y+6	; 0x06
    3086:	9a 83       	std	Y+2, r25	; 0x02
    3088:	89 83       	std	Y+1, r24	; 0x01
    308a:	89 81       	ldd	r24, Y+1	; 0x01
    308c:	9a 81       	ldd	r25, Y+2	; 0x02
    308e:	01 97       	sbiw	r24, 0x01	; 1
    3090:	f1 f7       	brne	.-4      	; 0x308e <NEW_PASSWORD+0x1ec>
    3092:	9a 83       	std	Y+2, r25	; 0x02
    3094:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		LCD_VIDGOTOXY(1, 0);
    3096:	81 e0       	ldi	r24, 0x01	; 1
    3098:	60 e0       	ldi	r22, 0x00	; 0
    309a:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
		LCD_VIDSENDSTRING("                           ", 16);
    309e:	8e e6       	ldi	r24, 0x6E	; 110
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	60 e1       	ldi	r22, 0x10	; 16
    30a4:	0e 94 76 16 	call	0x2cec	; 0x2cec <LCD_VIDSENDSTRING>
		LCD_VIDGOTOXY(1, 0);
    30a8:	81 e0       	ldi	r24, 0x01	; 1
    30aa:	60 e0       	ldi	r22, 0x00	; 0
    30ac:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
		i = 0;
    30b0:	10 92 34 02 	sts	0x0234, r1
	}
}
    30b4:	2f 96       	adiw	r28, 0x0f	; 15
    30b6:	0f b6       	in	r0, 0x3f	; 63
    30b8:	f8 94       	cli
    30ba:	de bf       	out	0x3e, r29	; 62
    30bc:	0f be       	out	0x3f, r0	; 63
    30be:	cd bf       	out	0x3d, r28	; 61
    30c0:	cf 91       	pop	r28
    30c2:	df 91       	pop	r29
    30c4:	08 95       	ret

000030c6 <Confirm_PASSWORD>:
void Confirm_PASSWORD(uint8 con) {
    30c6:	df 93       	push	r29
    30c8:	cf 93       	push	r28
    30ca:	cd b7       	in	r28, 0x3d	; 61
    30cc:	de b7       	in	r29, 0x3e	; 62
    30ce:	2f 97       	sbiw	r28, 0x0f	; 15
    30d0:	0f b6       	in	r0, 0x3f	; 63
    30d2:	f8 94       	cli
    30d4:	de bf       	out	0x3e, r29	; 62
    30d6:	0f be       	out	0x3f, r0	; 63
    30d8:	cd bf       	out	0x3d, r28	; 61
    30da:	8f 87       	std	Y+15, r24	; 0x0f

	LCD_VIDGOTOXY(0, 0);
    30dc:	80 e0       	ldi	r24, 0x00	; 0
    30de:	60 e0       	ldi	r22, 0x00	; 0
    30e0:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
	LCD_VIDSENDSTRING("Confirm Password", 16);
    30e4:	8b e9       	ldi	r24, 0x9B	; 155
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	60 e1       	ldi	r22, 0x10	; 16
    30ea:	0e 94 76 16 	call	0x2cec	; 0x2cec <LCD_VIDSENDSTRING>
	LCD_VIDGOTOXY(1, 0);
    30ee:	81 e0       	ldi	r24, 0x01	; 1
    30f0:	60 e0       	ldi	r22, 0x00	; 0
    30f2:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
	//con = KEYPAD_READ();
	if (con >= 0 && con <= 9 && i < 4) {
    30f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    30f8:	8a 30       	cpi	r24, 0x0A	; 10
    30fa:	68 f5       	brcc	.+90     	; 0x3156 <Confirm_PASSWORD+0x90>
    30fc:	80 91 34 02 	lds	r24, 0x0234
    3100:	84 30       	cpi	r24, 0x04	; 4
    3102:	48 f5       	brcc	.+82     	; 0x3156 <Confirm_PASSWORD+0x90>
		confirm[i] = con;
    3104:	80 91 34 02 	lds	r24, 0x0234
    3108:	88 2f       	mov	r24, r24
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	fc 01       	movw	r30, r24
    310e:	e5 5c       	subi	r30, 0xC5	; 197
    3110:	fd 4f       	sbci	r31, 0xFD	; 253
    3112:	8f 85       	ldd	r24, Y+15	; 0x0f
    3114:	80 83       	st	Z, r24
		LCD_VIDGOTOXY(1, i);
    3116:	90 91 34 02 	lds	r25, 0x0234
    311a:	81 e0       	ldi	r24, 0x01	; 1
    311c:	69 2f       	mov	r22, r25
    311e:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
		LCD_VIDSENDCHAR(confirm[i] + 48);
    3122:	80 91 34 02 	lds	r24, 0x0234
    3126:	88 2f       	mov	r24, r24
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	fc 01       	movw	r30, r24
    312c:	e5 5c       	subi	r30, 0xC5	; 197
    312e:	fd 4f       	sbci	r31, 0xFD	; 253
    3130:	80 81       	ld	r24, Z
    3132:	80 5d       	subi	r24, 0xD0	; 208
    3134:	0e 94 2f 14 	call	0x285e	; 0x285e <LCD_VIDSENDCHAR>
		LCD_VIDGOTOXY(1, i);
    3138:	90 91 34 02 	lds	r25, 0x0234
    313c:	81 e0       	ldi	r24, 0x01	; 1
    313e:	69 2f       	mov	r22, r25
    3140:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
		LCD_VIDSENDCHAR('*');
    3144:	8a e2       	ldi	r24, 0x2A	; 42
    3146:	0e 94 2f 14 	call	0x285e	; 0x285e <LCD_VIDSENDCHAR>
		i++;
    314a:	80 91 34 02 	lds	r24, 0x0234
    314e:	8f 5f       	subi	r24, 0xFF	; 255
    3150:	80 93 34 02 	sts	0x0234, r24
    3154:	15 c0       	rjmp	.+42     	; 0x3180 <Confirm_PASSWORD+0xba>
	} else if (con == 'c' && i > 0) {
    3156:	8f 85       	ldd	r24, Y+15	; 0x0f
    3158:	83 36       	cpi	r24, 0x63	; 99
    315a:	91 f4       	brne	.+36     	; 0x3180 <Confirm_PASSWORD+0xba>
    315c:	80 91 34 02 	lds	r24, 0x0234
    3160:	88 23       	and	r24, r24
    3162:	71 f0       	breq	.+28     	; 0x3180 <Confirm_PASSWORD+0xba>
		i--;
    3164:	80 91 34 02 	lds	r24, 0x0234
    3168:	81 50       	subi	r24, 0x01	; 1
    316a:	80 93 34 02 	sts	0x0234, r24
		LCD_VIDGOTOXY(1, i);
    316e:	90 91 34 02 	lds	r25, 0x0234
    3172:	81 e0       	ldi	r24, 0x01	; 1
    3174:	69 2f       	mov	r22, r25
    3176:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
		LCD_VIDSENDCHAR(' ');
    317a:	80 e2       	ldi	r24, 0x20	; 32
    317c:	0e 94 2f 14 	call	0x285e	; 0x285e <LCD_VIDSENDCHAR>
	}
	if (con == '+') {
    3180:	8f 85       	ldd	r24, Y+15	; 0x0f
    3182:	8b 32       	cpi	r24, 0x2B	; 43
    3184:	09 f0       	breq	.+2      	; 0x3188 <Confirm_PASSWORD+0xc2>
    3186:	be c0       	rjmp	.+380    	; 0x3304 <Confirm_PASSWORD+0x23e>
		Status = Motor_Open;
    3188:	82 e0       	ldi	r24, 0x02	; 2
    318a:	80 93 49 02 	sts	0x0249, r24
		for (i = 0; i < 4; i++) {
    318e:	10 92 34 02 	sts	0x0234, r1
    3192:	19 c0       	rjmp	.+50     	; 0x31c6 <Confirm_PASSWORD+0x100>
			if (confirm[i] != password[i]) {
    3194:	80 91 34 02 	lds	r24, 0x0234
    3198:	88 2f       	mov	r24, r24
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	fc 01       	movw	r30, r24
    319e:	e5 5c       	subi	r30, 0xC5	; 197
    31a0:	fd 4f       	sbci	r31, 0xFD	; 253
    31a2:	20 81       	ld	r18, Z
    31a4:	80 91 34 02 	lds	r24, 0x0234
    31a8:	88 2f       	mov	r24, r24
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	fc 01       	movw	r30, r24
    31ae:	e9 5c       	subi	r30, 0xC9	; 201
    31b0:	fd 4f       	sbci	r31, 0xFD	; 253
    31b2:	80 81       	ld	r24, Z
    31b4:	28 17       	cp	r18, r24
    31b6:	11 f0       	breq	.+4      	; 0x31bc <Confirm_PASSWORD+0xf6>
				Status = New_Password;
    31b8:	10 92 49 02 	sts	0x0249, r1
		LCD_VIDGOTOXY(1, i);
		LCD_VIDSENDCHAR(' ');
	}
	if (con == '+') {
		Status = Motor_Open;
		for (i = 0; i < 4; i++) {
    31bc:	80 91 34 02 	lds	r24, 0x0234
    31c0:	8f 5f       	subi	r24, 0xFF	; 255
    31c2:	80 93 34 02 	sts	0x0234, r24
    31c6:	80 91 34 02 	lds	r24, 0x0234
    31ca:	84 30       	cpi	r24, 0x04	; 4
    31cc:	18 f3       	brcs	.-58     	; 0x3194 <Confirm_PASSWORD+0xce>
			if (confirm[i] != password[i]) {
				Status = New_Password;
				//DIO_WRITECHANNEL(PINC3, HIGH);
			}
		}
		if (Status == New_Password) {
    31ce:	80 91 49 02 	lds	r24, 0x0249
    31d2:	88 23       	and	r24, r24
    31d4:	09 f0       	breq	.+2      	; 0x31d8 <Confirm_PASSWORD+0x112>
    31d6:	91 c0       	rjmp	.+290    	; 0x32fa <Confirm_PASSWORD+0x234>
			LCD_VIDGOTOXY(1, 0);
    31d8:	81 e0       	ldi	r24, 0x01	; 1
    31da:	60 e0       	ldi	r22, 0x00	; 0
    31dc:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
			LCD_VIDSENDSTRING("                           ", 16);
    31e0:	8e e6       	ldi	r24, 0x6E	; 110
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	60 e1       	ldi	r22, 0x10	; 16
    31e6:	0e 94 76 16 	call	0x2cec	; 0x2cec <LCD_VIDSENDSTRING>
			LCD_VIDGOTOXY(1, 0);
    31ea:	81 e0       	ldi	r24, 0x01	; 1
    31ec:	60 e0       	ldi	r22, 0x00	; 0
    31ee:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
			LCD_VIDSENDSTRING("Not Correct", 11);
    31f2:	8c ea       	ldi	r24, 0xAC	; 172
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	6b e0       	ldi	r22, 0x0B	; 11
    31f8:	0e 94 76 16 	call	0x2cec	; 0x2cec <LCD_VIDSENDSTRING>
    31fc:	80 e0       	ldi	r24, 0x00	; 0
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	aa e7       	ldi	r26, 0x7A	; 122
    3202:	b4 e4       	ldi	r27, 0x44	; 68
    3204:	8b 87       	std	Y+11, r24	; 0x0b
    3206:	9c 87       	std	Y+12, r25	; 0x0c
    3208:	ad 87       	std	Y+13, r26	; 0x0d
    320a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    320c:	6b 85       	ldd	r22, Y+11	; 0x0b
    320e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3210:	8d 85       	ldd	r24, Y+13	; 0x0d
    3212:	9e 85       	ldd	r25, Y+14	; 0x0e
    3214:	20 e0       	ldi	r18, 0x00	; 0
    3216:	30 e0       	ldi	r19, 0x00	; 0
    3218:	4a e7       	ldi	r20, 0x7A	; 122
    321a:	55 e4       	ldi	r21, 0x45	; 69
    321c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3220:	dc 01       	movw	r26, r24
    3222:	cb 01       	movw	r24, r22
    3224:	8f 83       	std	Y+7, r24	; 0x07
    3226:	98 87       	std	Y+8, r25	; 0x08
    3228:	a9 87       	std	Y+9, r26	; 0x09
    322a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    322c:	6f 81       	ldd	r22, Y+7	; 0x07
    322e:	78 85       	ldd	r23, Y+8	; 0x08
    3230:	89 85       	ldd	r24, Y+9	; 0x09
    3232:	9a 85       	ldd	r25, Y+10	; 0x0a
    3234:	20 e0       	ldi	r18, 0x00	; 0
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	40 e8       	ldi	r20, 0x80	; 128
    323a:	5f e3       	ldi	r21, 0x3F	; 63
    323c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3240:	88 23       	and	r24, r24
    3242:	2c f4       	brge	.+10     	; 0x324e <Confirm_PASSWORD+0x188>
		__ticks = 1;
    3244:	81 e0       	ldi	r24, 0x01	; 1
    3246:	90 e0       	ldi	r25, 0x00	; 0
    3248:	9e 83       	std	Y+6, r25	; 0x06
    324a:	8d 83       	std	Y+5, r24	; 0x05
    324c:	3f c0       	rjmp	.+126    	; 0x32cc <Confirm_PASSWORD+0x206>
	else if (__tmp > 65535)
    324e:	6f 81       	ldd	r22, Y+7	; 0x07
    3250:	78 85       	ldd	r23, Y+8	; 0x08
    3252:	89 85       	ldd	r24, Y+9	; 0x09
    3254:	9a 85       	ldd	r25, Y+10	; 0x0a
    3256:	20 e0       	ldi	r18, 0x00	; 0
    3258:	3f ef       	ldi	r19, 0xFF	; 255
    325a:	4f e7       	ldi	r20, 0x7F	; 127
    325c:	57 e4       	ldi	r21, 0x47	; 71
    325e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3262:	18 16       	cp	r1, r24
    3264:	4c f5       	brge	.+82     	; 0x32b8 <Confirm_PASSWORD+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3266:	6b 85       	ldd	r22, Y+11	; 0x0b
    3268:	7c 85       	ldd	r23, Y+12	; 0x0c
    326a:	8d 85       	ldd	r24, Y+13	; 0x0d
    326c:	9e 85       	ldd	r25, Y+14	; 0x0e
    326e:	20 e0       	ldi	r18, 0x00	; 0
    3270:	30 e0       	ldi	r19, 0x00	; 0
    3272:	40 e2       	ldi	r20, 0x20	; 32
    3274:	51 e4       	ldi	r21, 0x41	; 65
    3276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    327a:	dc 01       	movw	r26, r24
    327c:	cb 01       	movw	r24, r22
    327e:	bc 01       	movw	r22, r24
    3280:	cd 01       	movw	r24, r26
    3282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3286:	dc 01       	movw	r26, r24
    3288:	cb 01       	movw	r24, r22
    328a:	9e 83       	std	Y+6, r25	; 0x06
    328c:	8d 83       	std	Y+5, r24	; 0x05
    328e:	0f c0       	rjmp	.+30     	; 0x32ae <Confirm_PASSWORD+0x1e8>
    3290:	80 e9       	ldi	r24, 0x90	; 144
    3292:	91 e0       	ldi	r25, 0x01	; 1
    3294:	9c 83       	std	Y+4, r25	; 0x04
    3296:	8b 83       	std	Y+3, r24	; 0x03
    3298:	8b 81       	ldd	r24, Y+3	; 0x03
    329a:	9c 81       	ldd	r25, Y+4	; 0x04
    329c:	01 97       	sbiw	r24, 0x01	; 1
    329e:	f1 f7       	brne	.-4      	; 0x329c <Confirm_PASSWORD+0x1d6>
    32a0:	9c 83       	std	Y+4, r25	; 0x04
    32a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32a4:	8d 81       	ldd	r24, Y+5	; 0x05
    32a6:	9e 81       	ldd	r25, Y+6	; 0x06
    32a8:	01 97       	sbiw	r24, 0x01	; 1
    32aa:	9e 83       	std	Y+6, r25	; 0x06
    32ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32ae:	8d 81       	ldd	r24, Y+5	; 0x05
    32b0:	9e 81       	ldd	r25, Y+6	; 0x06
    32b2:	00 97       	sbiw	r24, 0x00	; 0
    32b4:	69 f7       	brne	.-38     	; 0x3290 <Confirm_PASSWORD+0x1ca>
    32b6:	14 c0       	rjmp	.+40     	; 0x32e0 <Confirm_PASSWORD+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32b8:	6f 81       	ldd	r22, Y+7	; 0x07
    32ba:	78 85       	ldd	r23, Y+8	; 0x08
    32bc:	89 85       	ldd	r24, Y+9	; 0x09
    32be:	9a 85       	ldd	r25, Y+10	; 0x0a
    32c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32c4:	dc 01       	movw	r26, r24
    32c6:	cb 01       	movw	r24, r22
    32c8:	9e 83       	std	Y+6, r25	; 0x06
    32ca:	8d 83       	std	Y+5, r24	; 0x05
    32cc:	8d 81       	ldd	r24, Y+5	; 0x05
    32ce:	9e 81       	ldd	r25, Y+6	; 0x06
    32d0:	9a 83       	std	Y+2, r25	; 0x02
    32d2:	89 83       	std	Y+1, r24	; 0x01
    32d4:	89 81       	ldd	r24, Y+1	; 0x01
    32d6:	9a 81       	ldd	r25, Y+2	; 0x02
    32d8:	01 97       	sbiw	r24, 0x01	; 1
    32da:	f1 f7       	brne	.-4      	; 0x32d8 <Confirm_PASSWORD+0x212>
    32dc:	9a 83       	std	Y+2, r25	; 0x02
    32de:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			LCD_VIDGOTOXY(1, 0);
    32e0:	81 e0       	ldi	r24, 0x01	; 1
    32e2:	60 e0       	ldi	r22, 0x00	; 0
    32e4:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
			LCD_VIDSENDSTRING("                           ", 16);
    32e8:	8e e6       	ldi	r24, 0x6E	; 110
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	60 e1       	ldi	r22, 0x10	; 16
    32ee:	0e 94 76 16 	call	0x2cec	; 0x2cec <LCD_VIDSENDSTRING>
			LCD_VIDGOTOXY(1, 0);
    32f2:	81 e0       	ldi	r24, 0x01	; 1
    32f4:	60 e0       	ldi	r22, 0x00	; 0
    32f6:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
		}
		i = 0;
    32fa:	10 92 34 02 	sts	0x0234, r1
		LCD_VIDSENDCOMMAND(LCD_Clear);
    32fe:	81 e0       	ldi	r24, 0x01	; 1
    3300:	0e 94 27 10 	call	0x204e	; 0x204e <LCD_VIDSENDCOMMAND>
	}

}
    3304:	2f 96       	adiw	r28, 0x0f	; 15
    3306:	0f b6       	in	r0, 0x3f	; 63
    3308:	f8 94       	cli
    330a:	de bf       	out	0x3e, r29	; 62
    330c:	0f be       	out	0x3f, r0	; 63
    330e:	cd bf       	out	0x3d, r28	; 61
    3310:	cf 91       	pop	r28
    3312:	df 91       	pop	r29
    3314:	08 95       	ret

00003316 <OPEN_MOTOR>:

void OPEN_MOTOR(void) {
    3316:	df 93       	push	r29
    3318:	cf 93       	push	r28
    331a:	cd b7       	in	r28, 0x3d	; 61
    331c:	de b7       	in	r29, 0x3e	; 62
    331e:	2e 97       	sbiw	r28, 0x0e	; 14
    3320:	0f b6       	in	r0, 0x3f	; 63
    3322:	f8 94       	cli
    3324:	de bf       	out	0x3e, r29	; 62
    3326:	0f be       	out	0x3f, r0	; 63
    3328:	cd bf       	out	0x3d, r28	; 61
	if (i == 0) {
    332a:	80 91 34 02 	lds	r24, 0x0234
    332e:	88 23       	and	r24, r24
    3330:	09 f0       	breq	.+2      	; 0x3334 <OPEN_MOTOR+0x1e>
    3332:	9b c0       	rjmp	.+310    	; 0x346a <OPEN_MOTOR+0x154>
		LCD_VIDSENDCOMMAND(LCD_Clear);
    3334:	81 e0       	ldi	r24, 0x01	; 1
    3336:	0e 94 27 10 	call	0x204e	; 0x204e <LCD_VIDSENDCOMMAND>
		LCD_VIDGOTOXY(0, 0);
    333a:	80 e0       	ldi	r24, 0x00	; 0
    333c:	60 e0       	ldi	r22, 0x00	; 0
    333e:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
		LCD_VIDSENDSTRING("WELCOME <3", 10);
    3342:	88 eb       	ldi	r24, 0xB8	; 184
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	6a e0       	ldi	r22, 0x0A	; 10
    3348:	0e 94 76 16 	call	0x2cec	; 0x2cec <LCD_VIDSENDSTRING>
		LCD_VIDGOTOXY(1, 0);
    334c:	81 e0       	ldi	r24, 0x01	; 1
    334e:	60 e0       	ldi	r22, 0x00	; 0
    3350:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
		LCD_VIDSENDSTRING("(-)Close", 8);
    3354:	83 ec       	ldi	r24, 0xC3	; 195
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	68 e0       	ldi	r22, 0x08	; 8
    335a:	0e 94 76 16 	call	0x2cec	; 0x2cec <LCD_VIDSENDSTRING>
		LCD_VIDGOTOXY(1, 10);
    335e:	81 e0       	ldi	r24, 0x01	; 1
    3360:	6a e0       	ldi	r22, 0x0A	; 10
    3362:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
		LCD_VIDSENDSTRING("(=)Rst", 6);
    3366:	8c ec       	ldi	r24, 0xCC	; 204
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	66 e0       	ldi	r22, 0x06	; 6
    336c:	0e 94 76 16 	call	0x2cec	; 0x2cec <LCD_VIDSENDSTRING>
		DIO_WRITEPORT(PORT_C, 0x08);
    3370:	82 e0       	ldi	r24, 0x02	; 2
    3372:	68 e0       	ldi	r22, 0x08	; 8
    3374:	0e 94 08 08 	call	0x1010	; 0x1010 <DIO_WRITEPORT>
    3378:	80 e0       	ldi	r24, 0x00	; 0
    337a:	90 e8       	ldi	r25, 0x80	; 128
    337c:	ab e3       	ldi	r26, 0x3B	; 59
    337e:	b5 e4       	ldi	r27, 0x45	; 69
    3380:	8b 87       	std	Y+11, r24	; 0x0b
    3382:	9c 87       	std	Y+12, r25	; 0x0c
    3384:	ad 87       	std	Y+13, r26	; 0x0d
    3386:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3388:	6b 85       	ldd	r22, Y+11	; 0x0b
    338a:	7c 85       	ldd	r23, Y+12	; 0x0c
    338c:	8d 85       	ldd	r24, Y+13	; 0x0d
    338e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3390:	20 e0       	ldi	r18, 0x00	; 0
    3392:	30 e0       	ldi	r19, 0x00	; 0
    3394:	4a e7       	ldi	r20, 0x7A	; 122
    3396:	55 e4       	ldi	r21, 0x45	; 69
    3398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    339c:	dc 01       	movw	r26, r24
    339e:	cb 01       	movw	r24, r22
    33a0:	8f 83       	std	Y+7, r24	; 0x07
    33a2:	98 87       	std	Y+8, r25	; 0x08
    33a4:	a9 87       	std	Y+9, r26	; 0x09
    33a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33a8:	6f 81       	ldd	r22, Y+7	; 0x07
    33aa:	78 85       	ldd	r23, Y+8	; 0x08
    33ac:	89 85       	ldd	r24, Y+9	; 0x09
    33ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    33b0:	20 e0       	ldi	r18, 0x00	; 0
    33b2:	30 e0       	ldi	r19, 0x00	; 0
    33b4:	40 e8       	ldi	r20, 0x80	; 128
    33b6:	5f e3       	ldi	r21, 0x3F	; 63
    33b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33bc:	88 23       	and	r24, r24
    33be:	2c f4       	brge	.+10     	; 0x33ca <OPEN_MOTOR+0xb4>
		__ticks = 1;
    33c0:	81 e0       	ldi	r24, 0x01	; 1
    33c2:	90 e0       	ldi	r25, 0x00	; 0
    33c4:	9e 83       	std	Y+6, r25	; 0x06
    33c6:	8d 83       	std	Y+5, r24	; 0x05
    33c8:	3f c0       	rjmp	.+126    	; 0x3448 <OPEN_MOTOR+0x132>
	else if (__tmp > 65535)
    33ca:	6f 81       	ldd	r22, Y+7	; 0x07
    33cc:	78 85       	ldd	r23, Y+8	; 0x08
    33ce:	89 85       	ldd	r24, Y+9	; 0x09
    33d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    33d2:	20 e0       	ldi	r18, 0x00	; 0
    33d4:	3f ef       	ldi	r19, 0xFF	; 255
    33d6:	4f e7       	ldi	r20, 0x7F	; 127
    33d8:	57 e4       	ldi	r21, 0x47	; 71
    33da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33de:	18 16       	cp	r1, r24
    33e0:	4c f5       	brge	.+82     	; 0x3434 <OPEN_MOTOR+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    33e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    33e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    33e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    33ea:	20 e0       	ldi	r18, 0x00	; 0
    33ec:	30 e0       	ldi	r19, 0x00	; 0
    33ee:	40 e2       	ldi	r20, 0x20	; 32
    33f0:	51 e4       	ldi	r21, 0x41	; 65
    33f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33f6:	dc 01       	movw	r26, r24
    33f8:	cb 01       	movw	r24, r22
    33fa:	bc 01       	movw	r22, r24
    33fc:	cd 01       	movw	r24, r26
    33fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3402:	dc 01       	movw	r26, r24
    3404:	cb 01       	movw	r24, r22
    3406:	9e 83       	std	Y+6, r25	; 0x06
    3408:	8d 83       	std	Y+5, r24	; 0x05
    340a:	0f c0       	rjmp	.+30     	; 0x342a <OPEN_MOTOR+0x114>
    340c:	80 e9       	ldi	r24, 0x90	; 144
    340e:	91 e0       	ldi	r25, 0x01	; 1
    3410:	9c 83       	std	Y+4, r25	; 0x04
    3412:	8b 83       	std	Y+3, r24	; 0x03
    3414:	8b 81       	ldd	r24, Y+3	; 0x03
    3416:	9c 81       	ldd	r25, Y+4	; 0x04
    3418:	01 97       	sbiw	r24, 0x01	; 1
    341a:	f1 f7       	brne	.-4      	; 0x3418 <OPEN_MOTOR+0x102>
    341c:	9c 83       	std	Y+4, r25	; 0x04
    341e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3420:	8d 81       	ldd	r24, Y+5	; 0x05
    3422:	9e 81       	ldd	r25, Y+6	; 0x06
    3424:	01 97       	sbiw	r24, 0x01	; 1
    3426:	9e 83       	std	Y+6, r25	; 0x06
    3428:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    342a:	8d 81       	ldd	r24, Y+5	; 0x05
    342c:	9e 81       	ldd	r25, Y+6	; 0x06
    342e:	00 97       	sbiw	r24, 0x00	; 0
    3430:	69 f7       	brne	.-38     	; 0x340c <OPEN_MOTOR+0xf6>
    3432:	14 c0       	rjmp	.+40     	; 0x345c <OPEN_MOTOR+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3434:	6f 81       	ldd	r22, Y+7	; 0x07
    3436:	78 85       	ldd	r23, Y+8	; 0x08
    3438:	89 85       	ldd	r24, Y+9	; 0x09
    343a:	9a 85       	ldd	r25, Y+10	; 0x0a
    343c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3440:	dc 01       	movw	r26, r24
    3442:	cb 01       	movw	r24, r22
    3444:	9e 83       	std	Y+6, r25	; 0x06
    3446:	8d 83       	std	Y+5, r24	; 0x05
    3448:	8d 81       	ldd	r24, Y+5	; 0x05
    344a:	9e 81       	ldd	r25, Y+6	; 0x06
    344c:	9a 83       	std	Y+2, r25	; 0x02
    344e:	89 83       	std	Y+1, r24	; 0x01
    3450:	89 81       	ldd	r24, Y+1	; 0x01
    3452:	9a 81       	ldd	r25, Y+2	; 0x02
    3454:	01 97       	sbiw	r24, 0x01	; 1
    3456:	f1 f7       	brne	.-4      	; 0x3454 <OPEN_MOTOR+0x13e>
    3458:	9a 83       	std	Y+2, r25	; 0x02
    345a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(3000);
		DIO_WRITEPORT(PORT_C, 0x00);
    345c:	82 e0       	ldi	r24, 0x02	; 2
    345e:	60 e0       	ldi	r22, 0x00	; 0
    3460:	0e 94 08 08 	call	0x1010	; 0x1010 <DIO_WRITEPORT>
		i = 1;
    3464:	81 e0       	ldi	r24, 0x01	; 1
    3466:	80 93 34 02 	sts	0x0234, r24
	}
}
    346a:	2e 96       	adiw	r28, 0x0e	; 14
    346c:	0f b6       	in	r0, 0x3f	; 63
    346e:	f8 94       	cli
    3470:	de bf       	out	0x3e, r29	; 62
    3472:	0f be       	out	0x3f, r0	; 63
    3474:	cd bf       	out	0x3d, r28	; 61
    3476:	cf 91       	pop	r28
    3478:	df 91       	pop	r29
    347a:	08 95       	ret

0000347c <CLOSE_MOTOR>:
void CLOSE_MOTOR(void) {
    347c:	df 93       	push	r29
    347e:	cf 93       	push	r28
    3480:	cd b7       	in	r28, 0x3d	; 61
    3482:	de b7       	in	r29, 0x3e	; 62
    3484:	2e 97       	sbiw	r28, 0x0e	; 14
    3486:	0f b6       	in	r0, 0x3f	; 63
    3488:	f8 94       	cli
    348a:	de bf       	out	0x3e, r29	; 62
    348c:	0f be       	out	0x3f, r0	; 63
    348e:	cd bf       	out	0x3d, r28	; 61
	DIO_WRITEPORT(PORT_C, 0x10);
    3490:	82 e0       	ldi	r24, 0x02	; 2
    3492:	60 e1       	ldi	r22, 0x10	; 16
    3494:	0e 94 08 08 	call	0x1010	; 0x1010 <DIO_WRITEPORT>
    3498:	80 e0       	ldi	r24, 0x00	; 0
    349a:	90 e8       	ldi	r25, 0x80	; 128
    349c:	ab e3       	ldi	r26, 0x3B	; 59
    349e:	b5 e4       	ldi	r27, 0x45	; 69
    34a0:	8b 87       	std	Y+11, r24	; 0x0b
    34a2:	9c 87       	std	Y+12, r25	; 0x0c
    34a4:	ad 87       	std	Y+13, r26	; 0x0d
    34a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    34aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    34ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    34ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    34b0:	20 e0       	ldi	r18, 0x00	; 0
    34b2:	30 e0       	ldi	r19, 0x00	; 0
    34b4:	4a e7       	ldi	r20, 0x7A	; 122
    34b6:	55 e4       	ldi	r21, 0x45	; 69
    34b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34bc:	dc 01       	movw	r26, r24
    34be:	cb 01       	movw	r24, r22
    34c0:	8f 83       	std	Y+7, r24	; 0x07
    34c2:	98 87       	std	Y+8, r25	; 0x08
    34c4:	a9 87       	std	Y+9, r26	; 0x09
    34c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34c8:	6f 81       	ldd	r22, Y+7	; 0x07
    34ca:	78 85       	ldd	r23, Y+8	; 0x08
    34cc:	89 85       	ldd	r24, Y+9	; 0x09
    34ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    34d0:	20 e0       	ldi	r18, 0x00	; 0
    34d2:	30 e0       	ldi	r19, 0x00	; 0
    34d4:	40 e8       	ldi	r20, 0x80	; 128
    34d6:	5f e3       	ldi	r21, 0x3F	; 63
    34d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34dc:	88 23       	and	r24, r24
    34de:	2c f4       	brge	.+10     	; 0x34ea <CLOSE_MOTOR+0x6e>
		__ticks = 1;
    34e0:	81 e0       	ldi	r24, 0x01	; 1
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	9e 83       	std	Y+6, r25	; 0x06
    34e6:	8d 83       	std	Y+5, r24	; 0x05
    34e8:	3f c0       	rjmp	.+126    	; 0x3568 <CLOSE_MOTOR+0xec>
	else if (__tmp > 65535)
    34ea:	6f 81       	ldd	r22, Y+7	; 0x07
    34ec:	78 85       	ldd	r23, Y+8	; 0x08
    34ee:	89 85       	ldd	r24, Y+9	; 0x09
    34f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    34f2:	20 e0       	ldi	r18, 0x00	; 0
    34f4:	3f ef       	ldi	r19, 0xFF	; 255
    34f6:	4f e7       	ldi	r20, 0x7F	; 127
    34f8:	57 e4       	ldi	r21, 0x47	; 71
    34fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34fe:	18 16       	cp	r1, r24
    3500:	4c f5       	brge	.+82     	; 0x3554 <CLOSE_MOTOR+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3502:	6b 85       	ldd	r22, Y+11	; 0x0b
    3504:	7c 85       	ldd	r23, Y+12	; 0x0c
    3506:	8d 85       	ldd	r24, Y+13	; 0x0d
    3508:	9e 85       	ldd	r25, Y+14	; 0x0e
    350a:	20 e0       	ldi	r18, 0x00	; 0
    350c:	30 e0       	ldi	r19, 0x00	; 0
    350e:	40 e2       	ldi	r20, 0x20	; 32
    3510:	51 e4       	ldi	r21, 0x41	; 65
    3512:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3516:	dc 01       	movw	r26, r24
    3518:	cb 01       	movw	r24, r22
    351a:	bc 01       	movw	r22, r24
    351c:	cd 01       	movw	r24, r26
    351e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3522:	dc 01       	movw	r26, r24
    3524:	cb 01       	movw	r24, r22
    3526:	9e 83       	std	Y+6, r25	; 0x06
    3528:	8d 83       	std	Y+5, r24	; 0x05
    352a:	0f c0       	rjmp	.+30     	; 0x354a <CLOSE_MOTOR+0xce>
    352c:	80 e9       	ldi	r24, 0x90	; 144
    352e:	91 e0       	ldi	r25, 0x01	; 1
    3530:	9c 83       	std	Y+4, r25	; 0x04
    3532:	8b 83       	std	Y+3, r24	; 0x03
    3534:	8b 81       	ldd	r24, Y+3	; 0x03
    3536:	9c 81       	ldd	r25, Y+4	; 0x04
    3538:	01 97       	sbiw	r24, 0x01	; 1
    353a:	f1 f7       	brne	.-4      	; 0x3538 <CLOSE_MOTOR+0xbc>
    353c:	9c 83       	std	Y+4, r25	; 0x04
    353e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3540:	8d 81       	ldd	r24, Y+5	; 0x05
    3542:	9e 81       	ldd	r25, Y+6	; 0x06
    3544:	01 97       	sbiw	r24, 0x01	; 1
    3546:	9e 83       	std	Y+6, r25	; 0x06
    3548:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    354a:	8d 81       	ldd	r24, Y+5	; 0x05
    354c:	9e 81       	ldd	r25, Y+6	; 0x06
    354e:	00 97       	sbiw	r24, 0x00	; 0
    3550:	69 f7       	brne	.-38     	; 0x352c <CLOSE_MOTOR+0xb0>
    3552:	14 c0       	rjmp	.+40     	; 0x357c <CLOSE_MOTOR+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3554:	6f 81       	ldd	r22, Y+7	; 0x07
    3556:	78 85       	ldd	r23, Y+8	; 0x08
    3558:	89 85       	ldd	r24, Y+9	; 0x09
    355a:	9a 85       	ldd	r25, Y+10	; 0x0a
    355c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3560:	dc 01       	movw	r26, r24
    3562:	cb 01       	movw	r24, r22
    3564:	9e 83       	std	Y+6, r25	; 0x06
    3566:	8d 83       	std	Y+5, r24	; 0x05
    3568:	8d 81       	ldd	r24, Y+5	; 0x05
    356a:	9e 81       	ldd	r25, Y+6	; 0x06
    356c:	9a 83       	std	Y+2, r25	; 0x02
    356e:	89 83       	std	Y+1, r24	; 0x01
    3570:	89 81       	ldd	r24, Y+1	; 0x01
    3572:	9a 81       	ldd	r25, Y+2	; 0x02
    3574:	01 97       	sbiw	r24, 0x01	; 1
    3576:	f1 f7       	brne	.-4      	; 0x3574 <CLOSE_MOTOR+0xf8>
    3578:	9a 83       	std	Y+2, r25	; 0x02
    357a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3000);
	DIO_WRITEPORT(PORT_C, 0);
    357c:	82 e0       	ldi	r24, 0x02	; 2
    357e:	60 e0       	ldi	r22, 0x00	; 0
    3580:	0e 94 08 08 	call	0x1010	; 0x1010 <DIO_WRITEPORT>
	Status = Enter_Password;
    3584:	85 e0       	ldi	r24, 0x05	; 5
    3586:	80 93 49 02 	sts	0x0249, r24
	LCD_VIDSENDCOMMAND(LCD_Clear);
    358a:	81 e0       	ldi	r24, 0x01	; 1
    358c:	0e 94 27 10 	call	0x204e	; 0x204e <LCD_VIDSENDCOMMAND>
	i = 0;
    3590:	10 92 34 02 	sts	0x0234, r1
}
    3594:	2e 96       	adiw	r28, 0x0e	; 14
    3596:	0f b6       	in	r0, 0x3f	; 63
    3598:	f8 94       	cli
    359a:	de bf       	out	0x3e, r29	; 62
    359c:	0f be       	out	0x3f, r0	; 63
    359e:	cd bf       	out	0x3d, r28	; 61
    35a0:	cf 91       	pop	r28
    35a2:	df 91       	pop	r29
    35a4:	08 95       	ret

000035a6 <ENTER_PASSWORD>:
void ENTER_PASSWORD(uint8 pass) {
    35a6:	df 93       	push	r29
    35a8:	cf 93       	push	r28
    35aa:	cd b7       	in	r28, 0x3d	; 61
    35ac:	de b7       	in	r29, 0x3e	; 62
    35ae:	2f 97       	sbiw	r28, 0x0f	; 15
    35b0:	0f b6       	in	r0, 0x3f	; 63
    35b2:	f8 94       	cli
    35b4:	de bf       	out	0x3e, r29	; 62
    35b6:	0f be       	out	0x3f, r0	; 63
    35b8:	cd bf       	out	0x3d, r28	; 61
    35ba:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_VIDGOTOXY(0, 0);
    35bc:	80 e0       	ldi	r24, 0x00	; 0
    35be:	60 e0       	ldi	r22, 0x00	; 0
    35c0:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
	LCD_VIDSENDSTRING("Enter Password:", 15);
    35c4:	83 ed       	ldi	r24, 0xD3	; 211
    35c6:	90 e0       	ldi	r25, 0x00	; 0
    35c8:	6f e0       	ldi	r22, 0x0F	; 15
    35ca:	0e 94 76 16 	call	0x2cec	; 0x2cec <LCD_VIDSENDSTRING>
	LCD_VIDGOTOXY(1, 0);
    35ce:	81 e0       	ldi	r24, 0x01	; 1
    35d0:	60 e0       	ldi	r22, 0x00	; 0
    35d2:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
	if (pass >= 0 && pass <= 9 && i < 4) {
    35d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    35d8:	8a 30       	cpi	r24, 0x0A	; 10
    35da:	68 f5       	brcc	.+90     	; 0x3636 <ENTER_PASSWORD+0x90>
    35dc:	80 91 34 02 	lds	r24, 0x0234
    35e0:	84 30       	cpi	r24, 0x04	; 4
    35e2:	48 f5       	brcc	.+82     	; 0x3636 <ENTER_PASSWORD+0x90>
		mypassword[i] = pass;
    35e4:	80 91 34 02 	lds	r24, 0x0234
    35e8:	88 2f       	mov	r24, r24
    35ea:	90 e0       	ldi	r25, 0x00	; 0
    35ec:	fc 01       	movw	r30, r24
    35ee:	e1 5c       	subi	r30, 0xC1	; 193
    35f0:	fd 4f       	sbci	r31, 0xFD	; 253
    35f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    35f4:	80 83       	st	Z, r24
		LCD_VIDGOTOXY(1, i);
    35f6:	90 91 34 02 	lds	r25, 0x0234
    35fa:	81 e0       	ldi	r24, 0x01	; 1
    35fc:	69 2f       	mov	r22, r25
    35fe:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
		LCD_VIDSENDCHAR(mypassword[i] + 48);
    3602:	80 91 34 02 	lds	r24, 0x0234
    3606:	88 2f       	mov	r24, r24
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	fc 01       	movw	r30, r24
    360c:	e1 5c       	subi	r30, 0xC1	; 193
    360e:	fd 4f       	sbci	r31, 0xFD	; 253
    3610:	80 81       	ld	r24, Z
    3612:	80 5d       	subi	r24, 0xD0	; 208
    3614:	0e 94 2f 14 	call	0x285e	; 0x285e <LCD_VIDSENDCHAR>
		LCD_VIDGOTOXY(1, i);
    3618:	90 91 34 02 	lds	r25, 0x0234
    361c:	81 e0       	ldi	r24, 0x01	; 1
    361e:	69 2f       	mov	r22, r25
    3620:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
		LCD_VIDSENDCHAR('*');
    3624:	8a e2       	ldi	r24, 0x2A	; 42
    3626:	0e 94 2f 14 	call	0x285e	; 0x285e <LCD_VIDSENDCHAR>
		i++;
    362a:	80 91 34 02 	lds	r24, 0x0234
    362e:	8f 5f       	subi	r24, 0xFF	; 255
    3630:	80 93 34 02 	sts	0x0234, r24
    3634:	15 c0       	rjmp	.+42     	; 0x3660 <ENTER_PASSWORD+0xba>
	} else if (pass == 'c' && i > 0) {
    3636:	8f 85       	ldd	r24, Y+15	; 0x0f
    3638:	83 36       	cpi	r24, 0x63	; 99
    363a:	91 f4       	brne	.+36     	; 0x3660 <ENTER_PASSWORD+0xba>
    363c:	80 91 34 02 	lds	r24, 0x0234
    3640:	88 23       	and	r24, r24
    3642:	71 f0       	breq	.+28     	; 0x3660 <ENTER_PASSWORD+0xba>
		i--;
    3644:	80 91 34 02 	lds	r24, 0x0234
    3648:	81 50       	subi	r24, 0x01	; 1
    364a:	80 93 34 02 	sts	0x0234, r24
		LCD_VIDGOTOXY(1, i);
    364e:	90 91 34 02 	lds	r25, 0x0234
    3652:	81 e0       	ldi	r24, 0x01	; 1
    3654:	69 2f       	mov	r22, r25
    3656:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
		LCD_VIDSENDCHAR(' ');
    365a:	80 e2       	ldi	r24, 0x20	; 32
    365c:	0e 94 2f 14 	call	0x285e	; 0x285e <LCD_VIDSENDCHAR>
	}

	if (pass == '+') {
    3660:	8f 85       	ldd	r24, Y+15	; 0x0f
    3662:	8b 32       	cpi	r24, 0x2B	; 43
    3664:	09 f0       	breq	.+2      	; 0x3668 <ENTER_PASSWORD+0xc2>
    3666:	c7 c0       	rjmp	.+398    	; 0x37f6 <ENTER_PASSWORD+0x250>
		Status = Motor_Open;
    3668:	82 e0       	ldi	r24, 0x02	; 2
    366a:	80 93 49 02 	sts	0x0249, r24
		count++;
    366e:	80 91 36 02 	lds	r24, 0x0236
    3672:	8f 5f       	subi	r24, 0xFF	; 255
    3674:	80 93 36 02 	sts	0x0236, r24
		for (i = 0; i < 4; i++) {
    3678:	10 92 34 02 	sts	0x0234, r1
    367c:	1a c0       	rjmp	.+52     	; 0x36b2 <ENTER_PASSWORD+0x10c>
			if (mypassword[i] != password[i]) {
    367e:	80 91 34 02 	lds	r24, 0x0234
    3682:	88 2f       	mov	r24, r24
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	fc 01       	movw	r30, r24
    3688:	e1 5c       	subi	r30, 0xC1	; 193
    368a:	fd 4f       	sbci	r31, 0xFD	; 253
    368c:	20 81       	ld	r18, Z
    368e:	80 91 34 02 	lds	r24, 0x0234
    3692:	88 2f       	mov	r24, r24
    3694:	90 e0       	ldi	r25, 0x00	; 0
    3696:	fc 01       	movw	r30, r24
    3698:	e9 5c       	subi	r30, 0xC9	; 201
    369a:	fd 4f       	sbci	r31, 0xFD	; 253
    369c:	80 81       	ld	r24, Z
    369e:	28 17       	cp	r18, r24
    36a0:	19 f0       	breq	.+6      	; 0x36a8 <ENTER_PASSWORD+0x102>
				Status = Enter_Password;
    36a2:	85 e0       	ldi	r24, 0x05	; 5
    36a4:	80 93 49 02 	sts	0x0249, r24
	}

	if (pass == '+') {
		Status = Motor_Open;
		count++;
		for (i = 0; i < 4; i++) {
    36a8:	80 91 34 02 	lds	r24, 0x0234
    36ac:	8f 5f       	subi	r24, 0xFF	; 255
    36ae:	80 93 34 02 	sts	0x0234, r24
    36b2:	80 91 34 02 	lds	r24, 0x0234
    36b6:	84 30       	cpi	r24, 0x04	; 4
    36b8:	10 f3       	brcs	.-60     	; 0x367e <ENTER_PASSWORD+0xd8>
			if (mypassword[i] != password[i]) {
				Status = Enter_Password;
				//DIO_WRITECHANNEL(PINC3, HIGH);
			}
		}
		if (Status == Enter_Password) {
    36ba:	80 91 49 02 	lds	r24, 0x0249
    36be:	85 30       	cpi	r24, 0x05	; 5
    36c0:	09 f0       	breq	.+2      	; 0x36c4 <ENTER_PASSWORD+0x11e>
    36c2:	92 c0       	rjmp	.+292    	; 0x37e8 <ENTER_PASSWORD+0x242>
			LCD_VIDGOTOXY(1, 0);
    36c4:	81 e0       	ldi	r24, 0x01	; 1
    36c6:	60 e0       	ldi	r22, 0x00	; 0
    36c8:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
			LCD_VIDSENDSTRING("                           ", 16);
    36cc:	8e e6       	ldi	r24, 0x6E	; 110
    36ce:	90 e0       	ldi	r25, 0x00	; 0
    36d0:	60 e1       	ldi	r22, 0x10	; 16
    36d2:	0e 94 76 16 	call	0x2cec	; 0x2cec <LCD_VIDSENDSTRING>
			LCD_VIDGOTOXY(1, 0);
    36d6:	81 e0       	ldi	r24, 0x01	; 1
    36d8:	60 e0       	ldi	r22, 0x00	; 0
    36da:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
			LCD_VIDSENDSTRING("Not Correct", 11);
    36de:	8c ea       	ldi	r24, 0xAC	; 172
    36e0:	90 e0       	ldi	r25, 0x00	; 0
    36e2:	6b e0       	ldi	r22, 0x0B	; 11
    36e4:	0e 94 76 16 	call	0x2cec	; 0x2cec <LCD_VIDSENDSTRING>
    36e8:	80 e0       	ldi	r24, 0x00	; 0
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	aa e7       	ldi	r26, 0x7A	; 122
    36ee:	b4 e4       	ldi	r27, 0x44	; 68
    36f0:	8b 87       	std	Y+11, r24	; 0x0b
    36f2:	9c 87       	std	Y+12, r25	; 0x0c
    36f4:	ad 87       	std	Y+13, r26	; 0x0d
    36f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    36fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    36fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    36fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3700:	20 e0       	ldi	r18, 0x00	; 0
    3702:	30 e0       	ldi	r19, 0x00	; 0
    3704:	4a e7       	ldi	r20, 0x7A	; 122
    3706:	55 e4       	ldi	r21, 0x45	; 69
    3708:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    370c:	dc 01       	movw	r26, r24
    370e:	cb 01       	movw	r24, r22
    3710:	8f 83       	std	Y+7, r24	; 0x07
    3712:	98 87       	std	Y+8, r25	; 0x08
    3714:	a9 87       	std	Y+9, r26	; 0x09
    3716:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3718:	6f 81       	ldd	r22, Y+7	; 0x07
    371a:	78 85       	ldd	r23, Y+8	; 0x08
    371c:	89 85       	ldd	r24, Y+9	; 0x09
    371e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3720:	20 e0       	ldi	r18, 0x00	; 0
    3722:	30 e0       	ldi	r19, 0x00	; 0
    3724:	40 e8       	ldi	r20, 0x80	; 128
    3726:	5f e3       	ldi	r21, 0x3F	; 63
    3728:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    372c:	88 23       	and	r24, r24
    372e:	2c f4       	brge	.+10     	; 0x373a <ENTER_PASSWORD+0x194>
		__ticks = 1;
    3730:	81 e0       	ldi	r24, 0x01	; 1
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	9e 83       	std	Y+6, r25	; 0x06
    3736:	8d 83       	std	Y+5, r24	; 0x05
    3738:	3f c0       	rjmp	.+126    	; 0x37b8 <ENTER_PASSWORD+0x212>
	else if (__tmp > 65535)
    373a:	6f 81       	ldd	r22, Y+7	; 0x07
    373c:	78 85       	ldd	r23, Y+8	; 0x08
    373e:	89 85       	ldd	r24, Y+9	; 0x09
    3740:	9a 85       	ldd	r25, Y+10	; 0x0a
    3742:	20 e0       	ldi	r18, 0x00	; 0
    3744:	3f ef       	ldi	r19, 0xFF	; 255
    3746:	4f e7       	ldi	r20, 0x7F	; 127
    3748:	57 e4       	ldi	r21, 0x47	; 71
    374a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    374e:	18 16       	cp	r1, r24
    3750:	4c f5       	brge	.+82     	; 0x37a4 <ENTER_PASSWORD+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3752:	6b 85       	ldd	r22, Y+11	; 0x0b
    3754:	7c 85       	ldd	r23, Y+12	; 0x0c
    3756:	8d 85       	ldd	r24, Y+13	; 0x0d
    3758:	9e 85       	ldd	r25, Y+14	; 0x0e
    375a:	20 e0       	ldi	r18, 0x00	; 0
    375c:	30 e0       	ldi	r19, 0x00	; 0
    375e:	40 e2       	ldi	r20, 0x20	; 32
    3760:	51 e4       	ldi	r21, 0x41	; 65
    3762:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3766:	dc 01       	movw	r26, r24
    3768:	cb 01       	movw	r24, r22
    376a:	bc 01       	movw	r22, r24
    376c:	cd 01       	movw	r24, r26
    376e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3772:	dc 01       	movw	r26, r24
    3774:	cb 01       	movw	r24, r22
    3776:	9e 83       	std	Y+6, r25	; 0x06
    3778:	8d 83       	std	Y+5, r24	; 0x05
    377a:	0f c0       	rjmp	.+30     	; 0x379a <ENTER_PASSWORD+0x1f4>
    377c:	80 e9       	ldi	r24, 0x90	; 144
    377e:	91 e0       	ldi	r25, 0x01	; 1
    3780:	9c 83       	std	Y+4, r25	; 0x04
    3782:	8b 83       	std	Y+3, r24	; 0x03
    3784:	8b 81       	ldd	r24, Y+3	; 0x03
    3786:	9c 81       	ldd	r25, Y+4	; 0x04
    3788:	01 97       	sbiw	r24, 0x01	; 1
    378a:	f1 f7       	brne	.-4      	; 0x3788 <ENTER_PASSWORD+0x1e2>
    378c:	9c 83       	std	Y+4, r25	; 0x04
    378e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3790:	8d 81       	ldd	r24, Y+5	; 0x05
    3792:	9e 81       	ldd	r25, Y+6	; 0x06
    3794:	01 97       	sbiw	r24, 0x01	; 1
    3796:	9e 83       	std	Y+6, r25	; 0x06
    3798:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    379a:	8d 81       	ldd	r24, Y+5	; 0x05
    379c:	9e 81       	ldd	r25, Y+6	; 0x06
    379e:	00 97       	sbiw	r24, 0x00	; 0
    37a0:	69 f7       	brne	.-38     	; 0x377c <ENTER_PASSWORD+0x1d6>
    37a2:	14 c0       	rjmp	.+40     	; 0x37cc <ENTER_PASSWORD+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37a4:	6f 81       	ldd	r22, Y+7	; 0x07
    37a6:	78 85       	ldd	r23, Y+8	; 0x08
    37a8:	89 85       	ldd	r24, Y+9	; 0x09
    37aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    37ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b0:	dc 01       	movw	r26, r24
    37b2:	cb 01       	movw	r24, r22
    37b4:	9e 83       	std	Y+6, r25	; 0x06
    37b6:	8d 83       	std	Y+5, r24	; 0x05
    37b8:	8d 81       	ldd	r24, Y+5	; 0x05
    37ba:	9e 81       	ldd	r25, Y+6	; 0x06
    37bc:	9a 83       	std	Y+2, r25	; 0x02
    37be:	89 83       	std	Y+1, r24	; 0x01
    37c0:	89 81       	ldd	r24, Y+1	; 0x01
    37c2:	9a 81       	ldd	r25, Y+2	; 0x02
    37c4:	01 97       	sbiw	r24, 0x01	; 1
    37c6:	f1 f7       	brne	.-4      	; 0x37c4 <ENTER_PASSWORD+0x21e>
    37c8:	9a 83       	std	Y+2, r25	; 0x02
    37ca:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			LCD_VIDGOTOXY(1, 0);
    37cc:	81 e0       	ldi	r24, 0x01	; 1
    37ce:	60 e0       	ldi	r22, 0x00	; 0
    37d0:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
			LCD_VIDSENDSTRING("                           ", 16);
    37d4:	8e e6       	ldi	r24, 0x6E	; 110
    37d6:	90 e0       	ldi	r25, 0x00	; 0
    37d8:	60 e1       	ldi	r22, 0x10	; 16
    37da:	0e 94 76 16 	call	0x2cec	; 0x2cec <LCD_VIDSENDSTRING>
			LCD_VIDGOTOXY(1, 0);
    37de:	81 e0       	ldi	r24, 0x01	; 1
    37e0:	60 e0       	ldi	r22, 0x00	; 0
    37e2:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
    37e6:	05 c0       	rjmp	.+10     	; 0x37f2 <ENTER_PASSWORD+0x24c>
		} else {
			count = 0;
    37e8:	10 92 36 02 	sts	0x0236, r1
			LCD_VIDSENDCOMMAND(LCD_Clear);
    37ec:	81 e0       	ldi	r24, 0x01	; 1
    37ee:	0e 94 27 10 	call	0x204e	; 0x204e <LCD_VIDSENDCOMMAND>
		}
		i = 0;
    37f2:	10 92 34 02 	sts	0x0234, r1
	}
	if (count == 3) {
    37f6:	80 91 36 02 	lds	r24, 0x0236
    37fa:	83 30       	cpi	r24, 0x03	; 3
    37fc:	41 f4       	brne	.+16     	; 0x380e <ENTER_PASSWORD+0x268>
		Status = Thief;
    37fe:	86 e0       	ldi	r24, 0x06	; 6
    3800:	80 93 49 02 	sts	0x0249, r24
		LCD_VIDSENDCOMMAND(LCD_Clear);
    3804:	81 e0       	ldi	r24, 0x01	; 1
    3806:	0e 94 27 10 	call	0x204e	; 0x204e <LCD_VIDSENDCOMMAND>
		count = 0;
    380a:	10 92 36 02 	sts	0x0236, r1
	}
}
    380e:	2f 96       	adiw	r28, 0x0f	; 15
    3810:	0f b6       	in	r0, 0x3f	; 63
    3812:	f8 94       	cli
    3814:	de bf       	out	0x3e, r29	; 62
    3816:	0f be       	out	0x3f, r0	; 63
    3818:	cd bf       	out	0x3d, r28	; 61
    381a:	cf 91       	pop	r28
    381c:	df 91       	pop	r29
    381e:	08 95       	ret

00003820 <THIEF>:
void THIEF(void) {
    3820:	df 93       	push	r29
    3822:	cf 93       	push	r28
    3824:	cd b7       	in	r28, 0x3d	; 61
    3826:	de b7       	in	r29, 0x3e	; 62
    3828:	2e 97       	sbiw	r28, 0x0e	; 14
    382a:	0f b6       	in	r0, 0x3f	; 63
    382c:	f8 94       	cli
    382e:	de bf       	out	0x3e, r29	; 62
    3830:	0f be       	out	0x3f, r0	; 63
    3832:	cd bf       	out	0x3d, r28	; 61
	LCD_WRITEEXTRACHAR(0, 6);
    3834:	80 e0       	ldi	r24, 0x00	; 0
    3836:	66 e0       	ldi	r22, 0x06	; 6
    3838:	0e 94 13 17 	call	0x2e26	; 0x2e26 <LCD_WRITEEXTRACHAR>
	DIO_WRITEPORT(PORT_C, 0x20);
    383c:	82 e0       	ldi	r24, 0x02	; 2
    383e:	60 e2       	ldi	r22, 0x20	; 32
    3840:	0e 94 08 08 	call	0x1010	; 0x1010 <DIO_WRITEPORT>
    3844:	80 e0       	ldi	r24, 0x00	; 0
    3846:	90 e8       	ldi	r25, 0x80	; 128
    3848:	ab e3       	ldi	r26, 0x3B	; 59
    384a:	b5 e4       	ldi	r27, 0x45	; 69
    384c:	8b 87       	std	Y+11, r24	; 0x0b
    384e:	9c 87       	std	Y+12, r25	; 0x0c
    3850:	ad 87       	std	Y+13, r26	; 0x0d
    3852:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3854:	6b 85       	ldd	r22, Y+11	; 0x0b
    3856:	7c 85       	ldd	r23, Y+12	; 0x0c
    3858:	8d 85       	ldd	r24, Y+13	; 0x0d
    385a:	9e 85       	ldd	r25, Y+14	; 0x0e
    385c:	20 e0       	ldi	r18, 0x00	; 0
    385e:	30 e0       	ldi	r19, 0x00	; 0
    3860:	4a e7       	ldi	r20, 0x7A	; 122
    3862:	55 e4       	ldi	r21, 0x45	; 69
    3864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3868:	dc 01       	movw	r26, r24
    386a:	cb 01       	movw	r24, r22
    386c:	8f 83       	std	Y+7, r24	; 0x07
    386e:	98 87       	std	Y+8, r25	; 0x08
    3870:	a9 87       	std	Y+9, r26	; 0x09
    3872:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3874:	6f 81       	ldd	r22, Y+7	; 0x07
    3876:	78 85       	ldd	r23, Y+8	; 0x08
    3878:	89 85       	ldd	r24, Y+9	; 0x09
    387a:	9a 85       	ldd	r25, Y+10	; 0x0a
    387c:	20 e0       	ldi	r18, 0x00	; 0
    387e:	30 e0       	ldi	r19, 0x00	; 0
    3880:	40 e8       	ldi	r20, 0x80	; 128
    3882:	5f e3       	ldi	r21, 0x3F	; 63
    3884:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3888:	88 23       	and	r24, r24
    388a:	2c f4       	brge	.+10     	; 0x3896 <THIEF+0x76>
		__ticks = 1;
    388c:	81 e0       	ldi	r24, 0x01	; 1
    388e:	90 e0       	ldi	r25, 0x00	; 0
    3890:	9e 83       	std	Y+6, r25	; 0x06
    3892:	8d 83       	std	Y+5, r24	; 0x05
    3894:	3f c0       	rjmp	.+126    	; 0x3914 <THIEF+0xf4>
	else if (__tmp > 65535)
    3896:	6f 81       	ldd	r22, Y+7	; 0x07
    3898:	78 85       	ldd	r23, Y+8	; 0x08
    389a:	89 85       	ldd	r24, Y+9	; 0x09
    389c:	9a 85       	ldd	r25, Y+10	; 0x0a
    389e:	20 e0       	ldi	r18, 0x00	; 0
    38a0:	3f ef       	ldi	r19, 0xFF	; 255
    38a2:	4f e7       	ldi	r20, 0x7F	; 127
    38a4:	57 e4       	ldi	r21, 0x47	; 71
    38a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38aa:	18 16       	cp	r1, r24
    38ac:	4c f5       	brge	.+82     	; 0x3900 <THIEF+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    38b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    38b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    38b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    38b6:	20 e0       	ldi	r18, 0x00	; 0
    38b8:	30 e0       	ldi	r19, 0x00	; 0
    38ba:	40 e2       	ldi	r20, 0x20	; 32
    38bc:	51 e4       	ldi	r21, 0x41	; 65
    38be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38c2:	dc 01       	movw	r26, r24
    38c4:	cb 01       	movw	r24, r22
    38c6:	bc 01       	movw	r22, r24
    38c8:	cd 01       	movw	r24, r26
    38ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ce:	dc 01       	movw	r26, r24
    38d0:	cb 01       	movw	r24, r22
    38d2:	9e 83       	std	Y+6, r25	; 0x06
    38d4:	8d 83       	std	Y+5, r24	; 0x05
    38d6:	0f c0       	rjmp	.+30     	; 0x38f6 <THIEF+0xd6>
    38d8:	80 e9       	ldi	r24, 0x90	; 144
    38da:	91 e0       	ldi	r25, 0x01	; 1
    38dc:	9c 83       	std	Y+4, r25	; 0x04
    38de:	8b 83       	std	Y+3, r24	; 0x03
    38e0:	8b 81       	ldd	r24, Y+3	; 0x03
    38e2:	9c 81       	ldd	r25, Y+4	; 0x04
    38e4:	01 97       	sbiw	r24, 0x01	; 1
    38e6:	f1 f7       	brne	.-4      	; 0x38e4 <THIEF+0xc4>
    38e8:	9c 83       	std	Y+4, r25	; 0x04
    38ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38ec:	8d 81       	ldd	r24, Y+5	; 0x05
    38ee:	9e 81       	ldd	r25, Y+6	; 0x06
    38f0:	01 97       	sbiw	r24, 0x01	; 1
    38f2:	9e 83       	std	Y+6, r25	; 0x06
    38f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38f6:	8d 81       	ldd	r24, Y+5	; 0x05
    38f8:	9e 81       	ldd	r25, Y+6	; 0x06
    38fa:	00 97       	sbiw	r24, 0x00	; 0
    38fc:	69 f7       	brne	.-38     	; 0x38d8 <THIEF+0xb8>
    38fe:	14 c0       	rjmp	.+40     	; 0x3928 <THIEF+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3900:	6f 81       	ldd	r22, Y+7	; 0x07
    3902:	78 85       	ldd	r23, Y+8	; 0x08
    3904:	89 85       	ldd	r24, Y+9	; 0x09
    3906:	9a 85       	ldd	r25, Y+10	; 0x0a
    3908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    390c:	dc 01       	movw	r26, r24
    390e:	cb 01       	movw	r24, r22
    3910:	9e 83       	std	Y+6, r25	; 0x06
    3912:	8d 83       	std	Y+5, r24	; 0x05
    3914:	8d 81       	ldd	r24, Y+5	; 0x05
    3916:	9e 81       	ldd	r25, Y+6	; 0x06
    3918:	9a 83       	std	Y+2, r25	; 0x02
    391a:	89 83       	std	Y+1, r24	; 0x01
    391c:	89 81       	ldd	r24, Y+1	; 0x01
    391e:	9a 81       	ldd	r25, Y+2	; 0x02
    3920:	01 97       	sbiw	r24, 0x01	; 1
    3922:	f1 f7       	brne	.-4      	; 0x3920 <THIEF+0x100>
    3924:	9a 83       	std	Y+2, r25	; 0x02
    3926:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3000);
	DIO_WRITEPORT(PORT_C, 0);
    3928:	82 e0       	ldi	r24, 0x02	; 2
    392a:	60 e0       	ldi	r22, 0x00	; 0
    392c:	0e 94 08 08 	call	0x1010	; 0x1010 <DIO_WRITEPORT>
	Status = Admin_Password;
    3930:	87 e0       	ldi	r24, 0x07	; 7
    3932:	80 93 49 02 	sts	0x0249, r24
	LCD_VIDSENDCOMMAND(LCD_Clear);
    3936:	81 e0       	ldi	r24, 0x01	; 1
    3938:	0e 94 27 10 	call	0x204e	; 0x204e <LCD_VIDSENDCOMMAND>
	x = 0;
    393c:	10 92 35 02 	sts	0x0235, r1
}
    3940:	2e 96       	adiw	r28, 0x0e	; 14
    3942:	0f b6       	in	r0, 0x3f	; 63
    3944:	f8 94       	cli
    3946:	de bf       	out	0x3e, r29	; 62
    3948:	0f be       	out	0x3f, r0	; 63
    394a:	cd bf       	out	0x3d, r28	; 61
    394c:	cf 91       	pop	r28
    394e:	df 91       	pop	r29
    3950:	08 95       	ret

00003952 <ADMIN_PASSWORD>:
void ADMIN_PASSWORD(uint8 pass) {
    3952:	df 93       	push	r29
    3954:	cf 93       	push	r28
    3956:	cd b7       	in	r28, 0x3d	; 61
    3958:	de b7       	in	r29, 0x3e	; 62
    395a:	27 97       	sbiw	r28, 0x07	; 7
    395c:	0f b6       	in	r0, 0x3f	; 63
    395e:	f8 94       	cli
    3960:	de bf       	out	0x3e, r29	; 62
    3962:	0f be       	out	0x3f, r0	; 63
    3964:	cd bf       	out	0x3d, r28	; 61
    3966:	8f 83       	std	Y+7, r24	; 0x07
	uint16 n1, n, n2;
	if (x == 0) {
    3968:	80 91 35 02 	lds	r24, 0x0235
    396c:	88 23       	and	r24, r24
    396e:	49 f4       	brne	.+18     	; 0x3982 <ADMIN_PASSWORD+0x30>
		LCD_VIDGOTOXY(0, 0);
    3970:	80 e0       	ldi	r24, 0x00	; 0
    3972:	60 e0       	ldi	r22, 0x00	; 0
    3974:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
		LCD_VIDSENDSTRING("Admin Password:", 15);
    3978:	83 ee       	ldi	r24, 0xE3	; 227
    397a:	90 e0       	ldi	r25, 0x00	; 0
    397c:	6f e0       	ldi	r22, 0x0F	; 15
    397e:	0e 94 76 16 	call	0x2cec	; 0x2cec <LCD_VIDSENDSTRING>
	}
	LCD_VIDGOTOXY(1, x);
    3982:	90 91 35 02 	lds	r25, 0x0235
    3986:	81 e0       	ldi	r24, 0x01	; 1
    3988:	69 2f       	mov	r22, r25
    398a:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
	if (pass >= 0 && pass <= 9 && i < 4) {
    398e:	8f 81       	ldd	r24, Y+7	; 0x07
    3990:	8a 30       	cpi	r24, 0x0A	; 10
    3992:	98 f5       	brcc	.+102    	; 0x39fa <ADMIN_PASSWORD+0xa8>
    3994:	80 91 34 02 	lds	r24, 0x0234
    3998:	84 30       	cpi	r24, 0x04	; 4
    399a:	78 f5       	brcc	.+94     	; 0x39fa <ADMIN_PASSWORD+0xa8>
		admin[i] = pass;
    399c:	80 91 34 02 	lds	r24, 0x0234
    39a0:	88 2f       	mov	r24, r24
    39a2:	90 e0       	ldi	r25, 0x00	; 0
    39a4:	fc 01       	movw	r30, r24
    39a6:	ed 5b       	subi	r30, 0xBD	; 189
    39a8:	fd 4f       	sbci	r31, 0xFD	; 253
    39aa:	8f 81       	ldd	r24, Y+7	; 0x07
    39ac:	80 83       	st	Z, r24
		LCD_VIDGOTOXY(1, i + x);
    39ae:	90 91 34 02 	lds	r25, 0x0234
    39b2:	80 91 35 02 	lds	r24, 0x0235
    39b6:	98 0f       	add	r25, r24
    39b8:	81 e0       	ldi	r24, 0x01	; 1
    39ba:	69 2f       	mov	r22, r25
    39bc:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
		LCD_VIDSENDCHAR(admin[i] + 48);
    39c0:	80 91 34 02 	lds	r24, 0x0234
    39c4:	88 2f       	mov	r24, r24
    39c6:	90 e0       	ldi	r25, 0x00	; 0
    39c8:	fc 01       	movw	r30, r24
    39ca:	ed 5b       	subi	r30, 0xBD	; 189
    39cc:	fd 4f       	sbci	r31, 0xFD	; 253
    39ce:	80 81       	ld	r24, Z
    39d0:	80 5d       	subi	r24, 0xD0	; 208
    39d2:	0e 94 2f 14 	call	0x285e	; 0x285e <LCD_VIDSENDCHAR>
		LCD_VIDGOTOXY(1, i + x);
    39d6:	90 91 34 02 	lds	r25, 0x0234
    39da:	80 91 35 02 	lds	r24, 0x0235
    39de:	98 0f       	add	r25, r24
    39e0:	81 e0       	ldi	r24, 0x01	; 1
    39e2:	69 2f       	mov	r22, r25
    39e4:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
		LCD_VIDSENDCHAR('*');
    39e8:	8a e2       	ldi	r24, 0x2A	; 42
    39ea:	0e 94 2f 14 	call	0x285e	; 0x285e <LCD_VIDSENDCHAR>
		i++;
    39ee:	80 91 34 02 	lds	r24, 0x0234
    39f2:	8f 5f       	subi	r24, 0xFF	; 255
    39f4:	80 93 34 02 	sts	0x0234, r24
    39f8:	18 c0       	rjmp	.+48     	; 0x3a2a <ADMIN_PASSWORD+0xd8>
	} else if (pass == 'c' && i > 0) {
    39fa:	8f 81       	ldd	r24, Y+7	; 0x07
    39fc:	83 36       	cpi	r24, 0x63	; 99
    39fe:	a9 f4       	brne	.+42     	; 0x3a2a <ADMIN_PASSWORD+0xd8>
    3a00:	80 91 34 02 	lds	r24, 0x0234
    3a04:	88 23       	and	r24, r24
    3a06:	89 f0       	breq	.+34     	; 0x3a2a <ADMIN_PASSWORD+0xd8>
		i--;
    3a08:	80 91 34 02 	lds	r24, 0x0234
    3a0c:	81 50       	subi	r24, 0x01	; 1
    3a0e:	80 93 34 02 	sts	0x0234, r24
		LCD_VIDGOTOXY(1, i + x);
    3a12:	90 91 34 02 	lds	r25, 0x0234
    3a16:	80 91 35 02 	lds	r24, 0x0235
    3a1a:	98 0f       	add	r25, r24
    3a1c:	81 e0       	ldi	r24, 0x01	; 1
    3a1e:	69 2f       	mov	r22, r25
    3a20:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
		LCD_VIDSENDCHAR(' ');
    3a24:	80 e2       	ldi	r24, 0x20	; 32
    3a26:	0e 94 2f 14 	call	0x285e	; 0x285e <LCD_VIDSENDCHAR>
	}

	if (pass == '+') {
    3a2a:	8f 81       	ldd	r24, Y+7	; 0x07
    3a2c:	8b 32       	cpi	r24, 0x2B	; 43
    3a2e:	09 f0       	breq	.+2      	; 0x3a32 <ADMIN_PASSWORD+0xe0>
    3a30:	4a c0       	rjmp	.+148    	; 0x3ac6 <ADMIN_PASSWORD+0x174>
		Status = New_Password;
    3a32:	10 92 49 02 	sts	0x0249, r1
		n = 1000;
    3a36:	88 ee       	ldi	r24, 0xE8	; 232
    3a38:	93 e0       	ldi	r25, 0x03	; 3
    3a3a:	9c 83       	std	Y+4, r25	; 0x04
    3a3c:	8b 83       	std	Y+3, r24	; 0x03
		n1 = ADMIN;
    3a3e:	86 ee       	ldi	r24, 0xE6	; 230
    3a40:	97 e0       	ldi	r25, 0x07	; 7
    3a42:	9e 83       	std	Y+6, r25	; 0x06
    3a44:	8d 83       	std	Y+5, r24	; 0x05
		for (i = 0; i < 4; i++) {
    3a46:	10 92 34 02 	sts	0x0234, r1
    3a4a:	34 c0       	rjmp	.+104    	; 0x3ab4 <ADMIN_PASSWORD+0x162>
			n2 = n1 / n;
    3a4c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a4e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a50:	2b 81       	ldd	r18, Y+3	; 0x03
    3a52:	3c 81       	ldd	r19, Y+4	; 0x04
    3a54:	b9 01       	movw	r22, r18
    3a56:	0e 94 28 23 	call	0x4650	; 0x4650 <__udivmodhi4>
    3a5a:	cb 01       	movw	r24, r22
    3a5c:	9a 83       	std	Y+2, r25	; 0x02
    3a5e:	89 83       	std	Y+1, r24	; 0x01
			if (admin[i] != n2) {
    3a60:	80 91 34 02 	lds	r24, 0x0234
    3a64:	88 2f       	mov	r24, r24
    3a66:	90 e0       	ldi	r25, 0x00	; 0
    3a68:	fc 01       	movw	r30, r24
    3a6a:	ed 5b       	subi	r30, 0xBD	; 189
    3a6c:	fd 4f       	sbci	r31, 0xFD	; 253
    3a6e:	80 81       	ld	r24, Z
    3a70:	28 2f       	mov	r18, r24
    3a72:	30 e0       	ldi	r19, 0x00	; 0
    3a74:	89 81       	ldd	r24, Y+1	; 0x01
    3a76:	9a 81       	ldd	r25, Y+2	; 0x02
    3a78:	28 17       	cp	r18, r24
    3a7a:	39 07       	cpc	r19, r25
    3a7c:	19 f0       	breq	.+6      	; 0x3a84 <ADMIN_PASSWORD+0x132>
				Status = Call_Admin;
    3a7e:	88 e0       	ldi	r24, 0x08	; 8
    3a80:	80 93 49 02 	sts	0x0249, r24
				//DIO_WRITECHANNEL(PINC3, HIGH);
			}
			n1 = n1 % n;
    3a84:	8d 81       	ldd	r24, Y+5	; 0x05
    3a86:	9e 81       	ldd	r25, Y+6	; 0x06
    3a88:	2b 81       	ldd	r18, Y+3	; 0x03
    3a8a:	3c 81       	ldd	r19, Y+4	; 0x04
    3a8c:	b9 01       	movw	r22, r18
    3a8e:	0e 94 28 23 	call	0x4650	; 0x4650 <__udivmodhi4>
    3a92:	9e 83       	std	Y+6, r25	; 0x06
    3a94:	8d 83       	std	Y+5, r24	; 0x05
			n = n / 10;
    3a96:	8b 81       	ldd	r24, Y+3	; 0x03
    3a98:	9c 81       	ldd	r25, Y+4	; 0x04
    3a9a:	2a e0       	ldi	r18, 0x0A	; 10
    3a9c:	30 e0       	ldi	r19, 0x00	; 0
    3a9e:	b9 01       	movw	r22, r18
    3aa0:	0e 94 28 23 	call	0x4650	; 0x4650 <__udivmodhi4>
    3aa4:	cb 01       	movw	r24, r22
    3aa6:	9c 83       	std	Y+4, r25	; 0x04
    3aa8:	8b 83       	std	Y+3, r24	; 0x03

	if (pass == '+') {
		Status = New_Password;
		n = 1000;
		n1 = ADMIN;
		for (i = 0; i < 4; i++) {
    3aaa:	80 91 34 02 	lds	r24, 0x0234
    3aae:	8f 5f       	subi	r24, 0xFF	; 255
    3ab0:	80 93 34 02 	sts	0x0234, r24
    3ab4:	80 91 34 02 	lds	r24, 0x0234
    3ab8:	84 30       	cpi	r24, 0x04	; 4
    3aba:	40 f2       	brcs	.-112    	; 0x3a4c <ADMIN_PASSWORD+0xfa>
				//DIO_WRITECHANNEL(PINC3, HIGH);
			}
			n1 = n1 % n;
			n = n / 10;
		}
		i = 0;
    3abc:	10 92 34 02 	sts	0x0234, r1
		LCD_VIDSENDCOMMAND(LCD_Clear);
    3ac0:	81 e0       	ldi	r24, 0x01	; 1
    3ac2:	0e 94 27 10 	call	0x204e	; 0x204e <LCD_VIDSENDCOMMAND>
	}
}
    3ac6:	27 96       	adiw	r28, 0x07	; 7
    3ac8:	0f b6       	in	r0, 0x3f	; 63
    3aca:	f8 94       	cli
    3acc:	de bf       	out	0x3e, r29	; 62
    3ace:	0f be       	out	0x3f, r0	; 63
    3ad0:	cd bf       	out	0x3d, r28	; 61
    3ad2:	cf 91       	pop	r28
    3ad4:	df 91       	pop	r29
    3ad6:	08 95       	ret

00003ad8 <CALL_ADMIN>:
void CALL_ADMIN(void) {
    3ad8:	df 93       	push	r29
    3ada:	cf 93       	push	r28
    3adc:	cd b7       	in	r28, 0x3d	; 61
    3ade:	de b7       	in	r29, 0x3e	; 62

	LCD_VIDGOTOXY(0, 0);
    3ae0:	80 e0       	ldi	r24, 0x00	; 0
    3ae2:	60 e0       	ldi	r22, 0x00	; 0
    3ae4:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
	LCD_VIDSENDSTRING("Pls call admin:", 15);
    3ae8:	83 ef       	ldi	r24, 0xF3	; 243
    3aea:	90 e0       	ldi	r25, 0x00	; 0
    3aec:	6f e0       	ldi	r22, 0x0F	; 15
    3aee:	0e 94 76 16 	call	0x2cec	; 0x2cec <LCD_VIDSENDSTRING>
	LCD_VIDGOTOXY(1, 0);
    3af2:	81 e0       	ldi	r24, 0x01	; 1
    3af4:	60 e0       	ldi	r22, 0x00	; 0
    3af6:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
	LCD_VIDSENDSTRING("Pass:", 5);
    3afa:	83 e0       	ldi	r24, 0x03	; 3
    3afc:	91 e0       	ldi	r25, 0x01	; 1
    3afe:	65 e0       	ldi	r22, 0x05	; 5
    3b00:	0e 94 76 16 	call	0x2cec	; 0x2cec <LCD_VIDSENDSTRING>
	x = 7;
    3b04:	87 e0       	ldi	r24, 0x07	; 7
    3b06:	80 93 35 02 	sts	0x0235, r24
	Status = Admin_Password;
    3b0a:	87 e0       	ldi	r24, 0x07	; 7
    3b0c:	80 93 49 02 	sts	0x0249, r24
}
    3b10:	cf 91       	pop	r28
    3b12:	df 91       	pop	r29
    3b14:	08 95       	ret

00003b16 <ENTER_OLD_PASSWORD>:
void ENTER_OLD_PASSWORD(uint8 pass) {
    3b16:	df 93       	push	r29
    3b18:	cf 93       	push	r28
    3b1a:	cd b7       	in	r28, 0x3d	; 61
    3b1c:	de b7       	in	r29, 0x3e	; 62
    3b1e:	2f 97       	sbiw	r28, 0x0f	; 15
    3b20:	0f b6       	in	r0, 0x3f	; 63
    3b22:	f8 94       	cli
    3b24:	de bf       	out	0x3e, r29	; 62
    3b26:	0f be       	out	0x3f, r0	; 63
    3b28:	cd bf       	out	0x3d, r28	; 61
    3b2a:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_VIDGOTOXY(0, 0);
    3b2c:	80 e0       	ldi	r24, 0x00	; 0
    3b2e:	60 e0       	ldi	r22, 0x00	; 0
    3b30:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
	LCD_VIDSENDSTRING("Enter old pass:", 15);
    3b34:	89 e0       	ldi	r24, 0x09	; 9
    3b36:	91 e0       	ldi	r25, 0x01	; 1
    3b38:	6f e0       	ldi	r22, 0x0F	; 15
    3b3a:	0e 94 76 16 	call	0x2cec	; 0x2cec <LCD_VIDSENDSTRING>
	LCD_VIDGOTOXY(1, 0);
    3b3e:	81 e0       	ldi	r24, 0x01	; 1
    3b40:	60 e0       	ldi	r22, 0x00	; 0
    3b42:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>

	if (pass >= 0 && pass <= 9 && i < 4) {
    3b46:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b48:	8a 30       	cpi	r24, 0x0A	; 10
    3b4a:	68 f5       	brcc	.+90     	; 0x3ba6 <ENTER_OLD_PASSWORD+0x90>
    3b4c:	80 91 34 02 	lds	r24, 0x0234
    3b50:	84 30       	cpi	r24, 0x04	; 4
    3b52:	48 f5       	brcc	.+82     	; 0x3ba6 <ENTER_OLD_PASSWORD+0x90>
		mypassword[i] = pass;
    3b54:	80 91 34 02 	lds	r24, 0x0234
    3b58:	88 2f       	mov	r24, r24
    3b5a:	90 e0       	ldi	r25, 0x00	; 0
    3b5c:	fc 01       	movw	r30, r24
    3b5e:	e1 5c       	subi	r30, 0xC1	; 193
    3b60:	fd 4f       	sbci	r31, 0xFD	; 253
    3b62:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b64:	80 83       	st	Z, r24
		LCD_VIDGOTOXY(1, i);
    3b66:	90 91 34 02 	lds	r25, 0x0234
    3b6a:	81 e0       	ldi	r24, 0x01	; 1
    3b6c:	69 2f       	mov	r22, r25
    3b6e:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
		LCD_VIDSENDCHAR(mypassword[i] + 48);
    3b72:	80 91 34 02 	lds	r24, 0x0234
    3b76:	88 2f       	mov	r24, r24
    3b78:	90 e0       	ldi	r25, 0x00	; 0
    3b7a:	fc 01       	movw	r30, r24
    3b7c:	e1 5c       	subi	r30, 0xC1	; 193
    3b7e:	fd 4f       	sbci	r31, 0xFD	; 253
    3b80:	80 81       	ld	r24, Z
    3b82:	80 5d       	subi	r24, 0xD0	; 208
    3b84:	0e 94 2f 14 	call	0x285e	; 0x285e <LCD_VIDSENDCHAR>
		LCD_VIDGOTOXY(1, i);
    3b88:	90 91 34 02 	lds	r25, 0x0234
    3b8c:	81 e0       	ldi	r24, 0x01	; 1
    3b8e:	69 2f       	mov	r22, r25
    3b90:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
		LCD_VIDSENDCHAR('*');
    3b94:	8a e2       	ldi	r24, 0x2A	; 42
    3b96:	0e 94 2f 14 	call	0x285e	; 0x285e <LCD_VIDSENDCHAR>
		i++;
    3b9a:	80 91 34 02 	lds	r24, 0x0234
    3b9e:	8f 5f       	subi	r24, 0xFF	; 255
    3ba0:	80 93 34 02 	sts	0x0234, r24
    3ba4:	15 c0       	rjmp	.+42     	; 0x3bd0 <ENTER_OLD_PASSWORD+0xba>
	} else if (pass == 'c' && i > 0) {
    3ba6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ba8:	83 36       	cpi	r24, 0x63	; 99
    3baa:	91 f4       	brne	.+36     	; 0x3bd0 <ENTER_OLD_PASSWORD+0xba>
    3bac:	80 91 34 02 	lds	r24, 0x0234
    3bb0:	88 23       	and	r24, r24
    3bb2:	71 f0       	breq	.+28     	; 0x3bd0 <ENTER_OLD_PASSWORD+0xba>
		i--;
    3bb4:	80 91 34 02 	lds	r24, 0x0234
    3bb8:	81 50       	subi	r24, 0x01	; 1
    3bba:	80 93 34 02 	sts	0x0234, r24
		LCD_VIDGOTOXY(1, i);
    3bbe:	90 91 34 02 	lds	r25, 0x0234
    3bc2:	81 e0       	ldi	r24, 0x01	; 1
    3bc4:	69 2f       	mov	r22, r25
    3bc6:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
		LCD_VIDSENDCHAR(' ');
    3bca:	80 e2       	ldi	r24, 0x20	; 32
    3bcc:	0e 94 2f 14 	call	0x285e	; 0x285e <LCD_VIDSENDCHAR>
	}
	if (pass == '+') {
    3bd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bd2:	8b 32       	cpi	r24, 0x2B	; 43
    3bd4:	09 f0       	breq	.+2      	; 0x3bd8 <ENTER_OLD_PASSWORD+0xc2>
    3bd6:	c6 c0       	rjmp	.+396    	; 0x3d64 <ENTER_OLD_PASSWORD+0x24e>
		Status = New_Password;
    3bd8:	10 92 49 02 	sts	0x0249, r1
		count++;
    3bdc:	80 91 36 02 	lds	r24, 0x0236
    3be0:	8f 5f       	subi	r24, 0xFF	; 255
    3be2:	80 93 36 02 	sts	0x0236, r24
		for (i = 0; i < 4; i++) {
    3be6:	10 92 34 02 	sts	0x0234, r1
    3bea:	1a c0       	rjmp	.+52     	; 0x3c20 <ENTER_OLD_PASSWORD+0x10a>
			if (mypassword[i] != password[i]) {
    3bec:	80 91 34 02 	lds	r24, 0x0234
    3bf0:	88 2f       	mov	r24, r24
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	fc 01       	movw	r30, r24
    3bf6:	e1 5c       	subi	r30, 0xC1	; 193
    3bf8:	fd 4f       	sbci	r31, 0xFD	; 253
    3bfa:	20 81       	ld	r18, Z
    3bfc:	80 91 34 02 	lds	r24, 0x0234
    3c00:	88 2f       	mov	r24, r24
    3c02:	90 e0       	ldi	r25, 0x00	; 0
    3c04:	fc 01       	movw	r30, r24
    3c06:	e9 5c       	subi	r30, 0xC9	; 201
    3c08:	fd 4f       	sbci	r31, 0xFD	; 253
    3c0a:	80 81       	ld	r24, Z
    3c0c:	28 17       	cp	r18, r24
    3c0e:	19 f0       	breq	.+6      	; 0x3c16 <ENTER_OLD_PASSWORD+0x100>
				Status = Old_Password;
    3c10:	89 e0       	ldi	r24, 0x09	; 9
    3c12:	80 93 49 02 	sts	0x0249, r24
		LCD_VIDSENDCHAR(' ');
	}
	if (pass == '+') {
		Status = New_Password;
		count++;
		for (i = 0; i < 4; i++) {
    3c16:	80 91 34 02 	lds	r24, 0x0234
    3c1a:	8f 5f       	subi	r24, 0xFF	; 255
    3c1c:	80 93 34 02 	sts	0x0234, r24
    3c20:	80 91 34 02 	lds	r24, 0x0234
    3c24:	84 30       	cpi	r24, 0x04	; 4
    3c26:	10 f3       	brcs	.-60     	; 0x3bec <ENTER_OLD_PASSWORD+0xd6>
			if (mypassword[i] != password[i]) {
				Status = Old_Password;
				//DIO_WRITECHANNEL(PINC3, HIGH);
			}
		}
		if (Status == Old_Password) {
    3c28:	80 91 49 02 	lds	r24, 0x0249
    3c2c:	89 30       	cpi	r24, 0x09	; 9
    3c2e:	09 f0       	breq	.+2      	; 0x3c32 <ENTER_OLD_PASSWORD+0x11c>
    3c30:	92 c0       	rjmp	.+292    	; 0x3d56 <ENTER_OLD_PASSWORD+0x240>
			LCD_VIDGOTOXY(1, 0);
    3c32:	81 e0       	ldi	r24, 0x01	; 1
    3c34:	60 e0       	ldi	r22, 0x00	; 0
    3c36:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
			LCD_VIDSENDSTRING("                           ", 16);
    3c3a:	8e e6       	ldi	r24, 0x6E	; 110
    3c3c:	90 e0       	ldi	r25, 0x00	; 0
    3c3e:	60 e1       	ldi	r22, 0x10	; 16
    3c40:	0e 94 76 16 	call	0x2cec	; 0x2cec <LCD_VIDSENDSTRING>
			LCD_VIDGOTOXY(1, 0);
    3c44:	81 e0       	ldi	r24, 0x01	; 1
    3c46:	60 e0       	ldi	r22, 0x00	; 0
    3c48:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
			LCD_VIDSENDSTRING("Not Correct", 11);
    3c4c:	8c ea       	ldi	r24, 0xAC	; 172
    3c4e:	90 e0       	ldi	r25, 0x00	; 0
    3c50:	6b e0       	ldi	r22, 0x0B	; 11
    3c52:	0e 94 76 16 	call	0x2cec	; 0x2cec <LCD_VIDSENDSTRING>
    3c56:	80 e0       	ldi	r24, 0x00	; 0
    3c58:	90 e0       	ldi	r25, 0x00	; 0
    3c5a:	aa e7       	ldi	r26, 0x7A	; 122
    3c5c:	b4 e4       	ldi	r27, 0x44	; 68
    3c5e:	8b 87       	std	Y+11, r24	; 0x0b
    3c60:	9c 87       	std	Y+12, r25	; 0x0c
    3c62:	ad 87       	std	Y+13, r26	; 0x0d
    3c64:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c66:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c68:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c6e:	20 e0       	ldi	r18, 0x00	; 0
    3c70:	30 e0       	ldi	r19, 0x00	; 0
    3c72:	4a e7       	ldi	r20, 0x7A	; 122
    3c74:	55 e4       	ldi	r21, 0x45	; 69
    3c76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c7a:	dc 01       	movw	r26, r24
    3c7c:	cb 01       	movw	r24, r22
    3c7e:	8f 83       	std	Y+7, r24	; 0x07
    3c80:	98 87       	std	Y+8, r25	; 0x08
    3c82:	a9 87       	std	Y+9, r26	; 0x09
    3c84:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c86:	6f 81       	ldd	r22, Y+7	; 0x07
    3c88:	78 85       	ldd	r23, Y+8	; 0x08
    3c8a:	89 85       	ldd	r24, Y+9	; 0x09
    3c8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c8e:	20 e0       	ldi	r18, 0x00	; 0
    3c90:	30 e0       	ldi	r19, 0x00	; 0
    3c92:	40 e8       	ldi	r20, 0x80	; 128
    3c94:	5f e3       	ldi	r21, 0x3F	; 63
    3c96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c9a:	88 23       	and	r24, r24
    3c9c:	2c f4       	brge	.+10     	; 0x3ca8 <ENTER_OLD_PASSWORD+0x192>
		__ticks = 1;
    3c9e:	81 e0       	ldi	r24, 0x01	; 1
    3ca0:	90 e0       	ldi	r25, 0x00	; 0
    3ca2:	9e 83       	std	Y+6, r25	; 0x06
    3ca4:	8d 83       	std	Y+5, r24	; 0x05
    3ca6:	3f c0       	rjmp	.+126    	; 0x3d26 <ENTER_OLD_PASSWORD+0x210>
	else if (__tmp > 65535)
    3ca8:	6f 81       	ldd	r22, Y+7	; 0x07
    3caa:	78 85       	ldd	r23, Y+8	; 0x08
    3cac:	89 85       	ldd	r24, Y+9	; 0x09
    3cae:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cb0:	20 e0       	ldi	r18, 0x00	; 0
    3cb2:	3f ef       	ldi	r19, 0xFF	; 255
    3cb4:	4f e7       	ldi	r20, 0x7F	; 127
    3cb6:	57 e4       	ldi	r21, 0x47	; 71
    3cb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3cbc:	18 16       	cp	r1, r24
    3cbe:	4c f5       	brge	.+82     	; 0x3d12 <ENTER_OLD_PASSWORD+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cc8:	20 e0       	ldi	r18, 0x00	; 0
    3cca:	30 e0       	ldi	r19, 0x00	; 0
    3ccc:	40 e2       	ldi	r20, 0x20	; 32
    3cce:	51 e4       	ldi	r21, 0x41	; 65
    3cd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cd4:	dc 01       	movw	r26, r24
    3cd6:	cb 01       	movw	r24, r22
    3cd8:	bc 01       	movw	r22, r24
    3cda:	cd 01       	movw	r24, r26
    3cdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ce0:	dc 01       	movw	r26, r24
    3ce2:	cb 01       	movw	r24, r22
    3ce4:	9e 83       	std	Y+6, r25	; 0x06
    3ce6:	8d 83       	std	Y+5, r24	; 0x05
    3ce8:	0f c0       	rjmp	.+30     	; 0x3d08 <ENTER_OLD_PASSWORD+0x1f2>
    3cea:	80 e9       	ldi	r24, 0x90	; 144
    3cec:	91 e0       	ldi	r25, 0x01	; 1
    3cee:	9c 83       	std	Y+4, r25	; 0x04
    3cf0:	8b 83       	std	Y+3, r24	; 0x03
    3cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    3cf4:	9c 81       	ldd	r25, Y+4	; 0x04
    3cf6:	01 97       	sbiw	r24, 0x01	; 1
    3cf8:	f1 f7       	brne	.-4      	; 0x3cf6 <ENTER_OLD_PASSWORD+0x1e0>
    3cfa:	9c 83       	std	Y+4, r25	; 0x04
    3cfc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cfe:	8d 81       	ldd	r24, Y+5	; 0x05
    3d00:	9e 81       	ldd	r25, Y+6	; 0x06
    3d02:	01 97       	sbiw	r24, 0x01	; 1
    3d04:	9e 83       	std	Y+6, r25	; 0x06
    3d06:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d08:	8d 81       	ldd	r24, Y+5	; 0x05
    3d0a:	9e 81       	ldd	r25, Y+6	; 0x06
    3d0c:	00 97       	sbiw	r24, 0x00	; 0
    3d0e:	69 f7       	brne	.-38     	; 0x3cea <ENTER_OLD_PASSWORD+0x1d4>
    3d10:	14 c0       	rjmp	.+40     	; 0x3d3a <ENTER_OLD_PASSWORD+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d12:	6f 81       	ldd	r22, Y+7	; 0x07
    3d14:	78 85       	ldd	r23, Y+8	; 0x08
    3d16:	89 85       	ldd	r24, Y+9	; 0x09
    3d18:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d1e:	dc 01       	movw	r26, r24
    3d20:	cb 01       	movw	r24, r22
    3d22:	9e 83       	std	Y+6, r25	; 0x06
    3d24:	8d 83       	std	Y+5, r24	; 0x05
    3d26:	8d 81       	ldd	r24, Y+5	; 0x05
    3d28:	9e 81       	ldd	r25, Y+6	; 0x06
    3d2a:	9a 83       	std	Y+2, r25	; 0x02
    3d2c:	89 83       	std	Y+1, r24	; 0x01
    3d2e:	89 81       	ldd	r24, Y+1	; 0x01
    3d30:	9a 81       	ldd	r25, Y+2	; 0x02
    3d32:	01 97       	sbiw	r24, 0x01	; 1
    3d34:	f1 f7       	brne	.-4      	; 0x3d32 <ENTER_OLD_PASSWORD+0x21c>
    3d36:	9a 83       	std	Y+2, r25	; 0x02
    3d38:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			LCD_VIDGOTOXY(1, 0);
    3d3a:	81 e0       	ldi	r24, 0x01	; 1
    3d3c:	60 e0       	ldi	r22, 0x00	; 0
    3d3e:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
			LCD_VIDSENDSTRING("                           ", 16);
    3d42:	8e e6       	ldi	r24, 0x6E	; 110
    3d44:	90 e0       	ldi	r25, 0x00	; 0
    3d46:	60 e1       	ldi	r22, 0x10	; 16
    3d48:	0e 94 76 16 	call	0x2cec	; 0x2cec <LCD_VIDSENDSTRING>
			LCD_VIDGOTOXY(1, 0);
    3d4c:	81 e0       	ldi	r24, 0x01	; 1
    3d4e:	60 e0       	ldi	r22, 0x00	; 0
    3d50:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <LCD_VIDGOTOXY>
    3d54:	05 c0       	rjmp	.+10     	; 0x3d60 <ENTER_OLD_PASSWORD+0x24a>
		} else {
			count = 0;
    3d56:	10 92 36 02 	sts	0x0236, r1
			LCD_VIDSENDCOMMAND(LCD_Clear);
    3d5a:	81 e0       	ldi	r24, 0x01	; 1
    3d5c:	0e 94 27 10 	call	0x204e	; 0x204e <LCD_VIDSENDCOMMAND>
		}
		i = 0;
    3d60:	10 92 34 02 	sts	0x0234, r1
	}
	if (count == 2) {
    3d64:	80 91 36 02 	lds	r24, 0x0236
    3d68:	82 30       	cpi	r24, 0x02	; 2
    3d6a:	41 f4       	brne	.+16     	; 0x3d7c <ENTER_OLD_PASSWORD+0x266>
		Status = Thief;
    3d6c:	86 e0       	ldi	r24, 0x06	; 6
    3d6e:	80 93 49 02 	sts	0x0249, r24
		LCD_VIDSENDCOMMAND(LCD_Clear);
    3d72:	81 e0       	ldi	r24, 0x01	; 1
    3d74:	0e 94 27 10 	call	0x204e	; 0x204e <LCD_VIDSENDCOMMAND>
		count = 0;
    3d78:	10 92 36 02 	sts	0x0236, r1
	}

}
    3d7c:	2f 96       	adiw	r28, 0x0f	; 15
    3d7e:	0f b6       	in	r0, 0x3f	; 63
    3d80:	f8 94       	cli
    3d82:	de bf       	out	0x3e, r29	; 62
    3d84:	0f be       	out	0x3f, r0	; 63
    3d86:	cd bf       	out	0x3d, r28	; 61
    3d88:	cf 91       	pop	r28
    3d8a:	df 91       	pop	r29
    3d8c:	08 95       	ret

00003d8e <RESET_MOTOR>:
void RESET_MOTOR(void) {
    3d8e:	df 93       	push	r29
    3d90:	cf 93       	push	r28
    3d92:	cd b7       	in	r28, 0x3d	; 61
    3d94:	de b7       	in	r29, 0x3e	; 62
	i = 0;
    3d96:	10 92 34 02 	sts	0x0234, r1
	LCD_VIDSENDCOMMAND(LCD_Clear);
    3d9a:	81 e0       	ldi	r24, 0x01	; 1
    3d9c:	0e 94 27 10 	call	0x204e	; 0x204e <LCD_VIDSENDCOMMAND>
	Status = Old_Password;
    3da0:	89 e0       	ldi	r24, 0x09	; 9
    3da2:	80 93 49 02 	sts	0x0249, r24
}
    3da6:	cf 91       	pop	r28
    3da8:	df 91       	pop	r29
    3daa:	08 95       	ret

00003dac <MOTOR_INIT>:
#include "MEMMAP.h"
#include "DIO.h"
#include <util/delay.h>
#include "Stepper_Motor.h"

void MOTOR_INIT(void) {
    3dac:	df 93       	push	r29
    3dae:	cf 93       	push	r28
    3db0:	cd b7       	in	r28, 0x3d	; 61
    3db2:	de b7       	in	r29, 0x3e	; 62
	DIO_WRITECHANNEL(BLUE, LOW);
    3db4:	88 e0       	ldi	r24, 0x08	; 8
    3db6:	60 e0       	ldi	r22, 0x00	; 0
    3db8:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
	DIO_WRITECHANNEL(PINK, LOW);
    3dbc:	89 e0       	ldi	r24, 0x09	; 9
    3dbe:	60 e0       	ldi	r22, 0x00	; 0
    3dc0:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
	DIO_WRITECHANNEL(YELLOW, LOW);
    3dc4:	8a e0       	ldi	r24, 0x0A	; 10
    3dc6:	60 e0       	ldi	r22, 0x00	; 0
    3dc8:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
	DIO_WRITECHANNEL(ORANGE, LOW);
    3dcc:	8b e0       	ldi	r24, 0x0B	; 11
    3dce:	60 e0       	ldi	r22, 0x00	; 0
    3dd0:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
}
    3dd4:	cf 91       	pop	r28
    3dd6:	df 91       	pop	r29
    3dd8:	08 95       	ret

00003dda <MOTOR_CWFULL>:

void MOTOR_CWFULL(void) {
    3dda:	df 93       	push	r29
    3ddc:	cf 93       	push	r28
    3dde:	cd b7       	in	r28, 0x3d	; 61
    3de0:	de b7       	in	r29, 0x3e	; 62
    3de2:	2f 97       	sbiw	r28, 0x0f	; 15
    3de4:	0f b6       	in	r0, 0x3f	; 63
    3de6:	f8 94       	cli
    3de8:	de bf       	out	0x3e, r29	; 62
    3dea:	0f be       	out	0x3f, r0	; 63
    3dec:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	const uint8 Colour[4] = { BLUE, PINK, YELLOW, ORANGE };
	for (i = 0; i < 4; i++) {
    3dee:	1f 86       	std	Y+15, r1	; 0x0f
    3df0:	89 c0       	rjmp	.+274    	; 0x3f04 <MOTOR_CWFULL+0x12a>
		DIO_WRITECHANNEL(Colour[i], HIGH);
    3df2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3df4:	88 2f       	mov	r24, r24
    3df6:	90 e0       	ldi	r25, 0x00	; 0
    3df8:	fc 01       	movw	r30, r24
    3dfa:	ee 53       	subi	r30, 0x3E	; 62
    3dfc:	fe 4f       	sbci	r31, 0xFE	; 254
    3dfe:	80 81       	ld	r24, Z
    3e00:	61 e0       	ldi	r22, 0x01	; 1
    3e02:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
    3e06:	80 e0       	ldi	r24, 0x00	; 0
    3e08:	90 e0       	ldi	r25, 0x00	; 0
    3e0a:	a0 e2       	ldi	r26, 0x20	; 32
    3e0c:	b1 e4       	ldi	r27, 0x41	; 65
    3e0e:	8b 87       	std	Y+11, r24	; 0x0b
    3e10:	9c 87       	std	Y+12, r25	; 0x0c
    3e12:	ad 87       	std	Y+13, r26	; 0x0d
    3e14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e16:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e18:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e1e:	20 e0       	ldi	r18, 0x00	; 0
    3e20:	30 e0       	ldi	r19, 0x00	; 0
    3e22:	4a e7       	ldi	r20, 0x7A	; 122
    3e24:	55 e4       	ldi	r21, 0x45	; 69
    3e26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e2a:	dc 01       	movw	r26, r24
    3e2c:	cb 01       	movw	r24, r22
    3e2e:	8f 83       	std	Y+7, r24	; 0x07
    3e30:	98 87       	std	Y+8, r25	; 0x08
    3e32:	a9 87       	std	Y+9, r26	; 0x09
    3e34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e36:	6f 81       	ldd	r22, Y+7	; 0x07
    3e38:	78 85       	ldd	r23, Y+8	; 0x08
    3e3a:	89 85       	ldd	r24, Y+9	; 0x09
    3e3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e3e:	20 e0       	ldi	r18, 0x00	; 0
    3e40:	30 e0       	ldi	r19, 0x00	; 0
    3e42:	40 e8       	ldi	r20, 0x80	; 128
    3e44:	5f e3       	ldi	r21, 0x3F	; 63
    3e46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e4a:	88 23       	and	r24, r24
    3e4c:	2c f4       	brge	.+10     	; 0x3e58 <MOTOR_CWFULL+0x7e>
		__ticks = 1;
    3e4e:	81 e0       	ldi	r24, 0x01	; 1
    3e50:	90 e0       	ldi	r25, 0x00	; 0
    3e52:	9e 83       	std	Y+6, r25	; 0x06
    3e54:	8d 83       	std	Y+5, r24	; 0x05
    3e56:	3f c0       	rjmp	.+126    	; 0x3ed6 <MOTOR_CWFULL+0xfc>
	else if (__tmp > 65535)
    3e58:	6f 81       	ldd	r22, Y+7	; 0x07
    3e5a:	78 85       	ldd	r23, Y+8	; 0x08
    3e5c:	89 85       	ldd	r24, Y+9	; 0x09
    3e5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e60:	20 e0       	ldi	r18, 0x00	; 0
    3e62:	3f ef       	ldi	r19, 0xFF	; 255
    3e64:	4f e7       	ldi	r20, 0x7F	; 127
    3e66:	57 e4       	ldi	r21, 0x47	; 71
    3e68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e6c:	18 16       	cp	r1, r24
    3e6e:	4c f5       	brge	.+82     	; 0x3ec2 <MOTOR_CWFULL+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e70:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e72:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e74:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e76:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e78:	20 e0       	ldi	r18, 0x00	; 0
    3e7a:	30 e0       	ldi	r19, 0x00	; 0
    3e7c:	40 e2       	ldi	r20, 0x20	; 32
    3e7e:	51 e4       	ldi	r21, 0x41	; 65
    3e80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e84:	dc 01       	movw	r26, r24
    3e86:	cb 01       	movw	r24, r22
    3e88:	bc 01       	movw	r22, r24
    3e8a:	cd 01       	movw	r24, r26
    3e8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e90:	dc 01       	movw	r26, r24
    3e92:	cb 01       	movw	r24, r22
    3e94:	9e 83       	std	Y+6, r25	; 0x06
    3e96:	8d 83       	std	Y+5, r24	; 0x05
    3e98:	0f c0       	rjmp	.+30     	; 0x3eb8 <MOTOR_CWFULL+0xde>
    3e9a:	80 e9       	ldi	r24, 0x90	; 144
    3e9c:	91 e0       	ldi	r25, 0x01	; 1
    3e9e:	9c 83       	std	Y+4, r25	; 0x04
    3ea0:	8b 83       	std	Y+3, r24	; 0x03
    3ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ea4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ea6:	01 97       	sbiw	r24, 0x01	; 1
    3ea8:	f1 f7       	brne	.-4      	; 0x3ea6 <MOTOR_CWFULL+0xcc>
    3eaa:	9c 83       	std	Y+4, r25	; 0x04
    3eac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3eae:	8d 81       	ldd	r24, Y+5	; 0x05
    3eb0:	9e 81       	ldd	r25, Y+6	; 0x06
    3eb2:	01 97       	sbiw	r24, 0x01	; 1
    3eb4:	9e 83       	std	Y+6, r25	; 0x06
    3eb6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3eb8:	8d 81       	ldd	r24, Y+5	; 0x05
    3eba:	9e 81       	ldd	r25, Y+6	; 0x06
    3ebc:	00 97       	sbiw	r24, 0x00	; 0
    3ebe:	69 f7       	brne	.-38     	; 0x3e9a <MOTOR_CWFULL+0xc0>
    3ec0:	14 c0       	rjmp	.+40     	; 0x3eea <MOTOR_CWFULL+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ec2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ec4:	78 85       	ldd	r23, Y+8	; 0x08
    3ec6:	89 85       	ldd	r24, Y+9	; 0x09
    3ec8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3eca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ece:	dc 01       	movw	r26, r24
    3ed0:	cb 01       	movw	r24, r22
    3ed2:	9e 83       	std	Y+6, r25	; 0x06
    3ed4:	8d 83       	std	Y+5, r24	; 0x05
    3ed6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ed8:	9e 81       	ldd	r25, Y+6	; 0x06
    3eda:	9a 83       	std	Y+2, r25	; 0x02
    3edc:	89 83       	std	Y+1, r24	; 0x01
    3ede:	89 81       	ldd	r24, Y+1	; 0x01
    3ee0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ee2:	01 97       	sbiw	r24, 0x01	; 1
    3ee4:	f1 f7       	brne	.-4      	; 0x3ee2 <MOTOR_CWFULL+0x108>
    3ee6:	9a 83       	std	Y+2, r25	; 0x02
    3ee8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		DIO_WRITECHANNEL(Colour[i], LOW);
    3eea:	8f 85       	ldd	r24, Y+15	; 0x0f
    3eec:	88 2f       	mov	r24, r24
    3eee:	90 e0       	ldi	r25, 0x00	; 0
    3ef0:	fc 01       	movw	r30, r24
    3ef2:	ee 53       	subi	r30, 0x3E	; 62
    3ef4:	fe 4f       	sbci	r31, 0xFE	; 254
    3ef6:	80 81       	ld	r24, Z
    3ef8:	60 e0       	ldi	r22, 0x00	; 0
    3efa:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
}

void MOTOR_CWFULL(void) {
	uint8 i;
	const uint8 Colour[4] = { BLUE, PINK, YELLOW, ORANGE };
	for (i = 0; i < 4; i++) {
    3efe:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f00:	8f 5f       	subi	r24, 0xFF	; 255
    3f02:	8f 87       	std	Y+15, r24	; 0x0f
    3f04:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f06:	84 30       	cpi	r24, 0x04	; 4
    3f08:	08 f4       	brcc	.+2      	; 0x3f0c <MOTOR_CWFULL+0x132>
    3f0a:	73 cf       	rjmp	.-282    	; 0x3df2 <MOTOR_CWFULL+0x18>
		DIO_WRITECHANNEL(Colour[i], HIGH);
		_delay_ms(10);
		DIO_WRITECHANNEL(Colour[i], LOW);
	}
}
    3f0c:	2f 96       	adiw	r28, 0x0f	; 15
    3f0e:	0f b6       	in	r0, 0x3f	; 63
    3f10:	f8 94       	cli
    3f12:	de bf       	out	0x3e, r29	; 62
    3f14:	0f be       	out	0x3f, r0	; 63
    3f16:	cd bf       	out	0x3d, r28	; 61
    3f18:	cf 91       	pop	r28
    3f1a:	df 91       	pop	r29
    3f1c:	08 95       	ret

00003f1e <MOTOR_CWHALF>:

void MOTOR_CWHALF(void) {
    3f1e:	df 93       	push	r29
    3f20:	cf 93       	push	r28
    3f22:	cd b7       	in	r28, 0x3d	; 61
    3f24:	de b7       	in	r29, 0x3e	; 62
    3f26:	2f 97       	sbiw	r28, 0x0f	; 15
    3f28:	0f b6       	in	r0, 0x3f	; 63
    3f2a:	f8 94       	cli
    3f2c:	de bf       	out	0x3e, r29	; 62
    3f2e:	0f be       	out	0x3f, r0	; 63
    3f30:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	const uint8 CW_HM[8]={9,1,3,2,6,4,12,8};
	for (i = 0; i < 8; i++) {
    3f32:	1f 86       	std	Y+15, r1	; 0x0f
    3f34:	af c0       	rjmp	.+350    	; 0x4094 <MOTOR_CWHALF+0x176>
		DIO_WRITECHANNEL(BLUE, (CW_HM[i]>>0)&1);
    3f36:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f38:	88 2f       	mov	r24, r24
    3f3a:	90 e0       	ldi	r25, 0x00	; 0
    3f3c:	fc 01       	movw	r30, r24
    3f3e:	ea 53       	subi	r30, 0x3A	; 58
    3f40:	fe 4f       	sbci	r31, 0xFE	; 254
    3f42:	80 81       	ld	r24, Z
    3f44:	98 2f       	mov	r25, r24
    3f46:	91 70       	andi	r25, 0x01	; 1
    3f48:	88 e0       	ldi	r24, 0x08	; 8
    3f4a:	69 2f       	mov	r22, r25
    3f4c:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
		DIO_WRITECHANNEL(PINK, (CW_HM[i]>>1)&1);
    3f50:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f52:	88 2f       	mov	r24, r24
    3f54:	90 e0       	ldi	r25, 0x00	; 0
    3f56:	fc 01       	movw	r30, r24
    3f58:	ea 53       	subi	r30, 0x3A	; 58
    3f5a:	fe 4f       	sbci	r31, 0xFE	; 254
    3f5c:	80 81       	ld	r24, Z
    3f5e:	86 95       	lsr	r24
    3f60:	98 2f       	mov	r25, r24
    3f62:	91 70       	andi	r25, 0x01	; 1
    3f64:	89 e0       	ldi	r24, 0x09	; 9
    3f66:	69 2f       	mov	r22, r25
    3f68:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
		DIO_WRITECHANNEL(YELLOW,(CW_HM[i]>>2)&1);
    3f6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f6e:	88 2f       	mov	r24, r24
    3f70:	90 e0       	ldi	r25, 0x00	; 0
    3f72:	fc 01       	movw	r30, r24
    3f74:	ea 53       	subi	r30, 0x3A	; 58
    3f76:	fe 4f       	sbci	r31, 0xFE	; 254
    3f78:	80 81       	ld	r24, Z
    3f7a:	86 95       	lsr	r24
    3f7c:	86 95       	lsr	r24
    3f7e:	98 2f       	mov	r25, r24
    3f80:	91 70       	andi	r25, 0x01	; 1
    3f82:	8a e0       	ldi	r24, 0x0A	; 10
    3f84:	69 2f       	mov	r22, r25
    3f86:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
		DIO_WRITECHANNEL(ORANGE, (CW_HM[i]>>3)&1);
    3f8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f8c:	88 2f       	mov	r24, r24
    3f8e:	90 e0       	ldi	r25, 0x00	; 0
    3f90:	fc 01       	movw	r30, r24
    3f92:	ea 53       	subi	r30, 0x3A	; 58
    3f94:	fe 4f       	sbci	r31, 0xFE	; 254
    3f96:	80 81       	ld	r24, Z
    3f98:	86 95       	lsr	r24
    3f9a:	86 95       	lsr	r24
    3f9c:	86 95       	lsr	r24
    3f9e:	98 2f       	mov	r25, r24
    3fa0:	91 70       	andi	r25, 0x01	; 1
    3fa2:	8b e0       	ldi	r24, 0x0B	; 11
    3fa4:	69 2f       	mov	r22, r25
    3fa6:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
    3faa:	80 e0       	ldi	r24, 0x00	; 0
    3fac:	90 e0       	ldi	r25, 0x00	; 0
    3fae:	a0 e2       	ldi	r26, 0x20	; 32
    3fb0:	b1 e4       	ldi	r27, 0x41	; 65
    3fb2:	8b 87       	std	Y+11, r24	; 0x0b
    3fb4:	9c 87       	std	Y+12, r25	; 0x0c
    3fb6:	ad 87       	std	Y+13, r26	; 0x0d
    3fb8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fba:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fc2:	20 e0       	ldi	r18, 0x00	; 0
    3fc4:	30 e0       	ldi	r19, 0x00	; 0
    3fc6:	4a e7       	ldi	r20, 0x7A	; 122
    3fc8:	55 e4       	ldi	r21, 0x45	; 69
    3fca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fce:	dc 01       	movw	r26, r24
    3fd0:	cb 01       	movw	r24, r22
    3fd2:	8f 83       	std	Y+7, r24	; 0x07
    3fd4:	98 87       	std	Y+8, r25	; 0x08
    3fd6:	a9 87       	std	Y+9, r26	; 0x09
    3fd8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3fda:	6f 81       	ldd	r22, Y+7	; 0x07
    3fdc:	78 85       	ldd	r23, Y+8	; 0x08
    3fde:	89 85       	ldd	r24, Y+9	; 0x09
    3fe0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fe2:	20 e0       	ldi	r18, 0x00	; 0
    3fe4:	30 e0       	ldi	r19, 0x00	; 0
    3fe6:	40 e8       	ldi	r20, 0x80	; 128
    3fe8:	5f e3       	ldi	r21, 0x3F	; 63
    3fea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3fee:	88 23       	and	r24, r24
    3ff0:	2c f4       	brge	.+10     	; 0x3ffc <MOTOR_CWHALF+0xde>
		__ticks = 1;
    3ff2:	81 e0       	ldi	r24, 0x01	; 1
    3ff4:	90 e0       	ldi	r25, 0x00	; 0
    3ff6:	9e 83       	std	Y+6, r25	; 0x06
    3ff8:	8d 83       	std	Y+5, r24	; 0x05
    3ffa:	3f c0       	rjmp	.+126    	; 0x407a <MOTOR_CWHALF+0x15c>
	else if (__tmp > 65535)
    3ffc:	6f 81       	ldd	r22, Y+7	; 0x07
    3ffe:	78 85       	ldd	r23, Y+8	; 0x08
    4000:	89 85       	ldd	r24, Y+9	; 0x09
    4002:	9a 85       	ldd	r25, Y+10	; 0x0a
    4004:	20 e0       	ldi	r18, 0x00	; 0
    4006:	3f ef       	ldi	r19, 0xFF	; 255
    4008:	4f e7       	ldi	r20, 0x7F	; 127
    400a:	57 e4       	ldi	r21, 0x47	; 71
    400c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4010:	18 16       	cp	r1, r24
    4012:	4c f5       	brge	.+82     	; 0x4066 <MOTOR_CWHALF+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4014:	6b 85       	ldd	r22, Y+11	; 0x0b
    4016:	7c 85       	ldd	r23, Y+12	; 0x0c
    4018:	8d 85       	ldd	r24, Y+13	; 0x0d
    401a:	9e 85       	ldd	r25, Y+14	; 0x0e
    401c:	20 e0       	ldi	r18, 0x00	; 0
    401e:	30 e0       	ldi	r19, 0x00	; 0
    4020:	40 e2       	ldi	r20, 0x20	; 32
    4022:	51 e4       	ldi	r21, 0x41	; 65
    4024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4028:	dc 01       	movw	r26, r24
    402a:	cb 01       	movw	r24, r22
    402c:	bc 01       	movw	r22, r24
    402e:	cd 01       	movw	r24, r26
    4030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4034:	dc 01       	movw	r26, r24
    4036:	cb 01       	movw	r24, r22
    4038:	9e 83       	std	Y+6, r25	; 0x06
    403a:	8d 83       	std	Y+5, r24	; 0x05
    403c:	0f c0       	rjmp	.+30     	; 0x405c <MOTOR_CWHALF+0x13e>
    403e:	80 e9       	ldi	r24, 0x90	; 144
    4040:	91 e0       	ldi	r25, 0x01	; 1
    4042:	9c 83       	std	Y+4, r25	; 0x04
    4044:	8b 83       	std	Y+3, r24	; 0x03
    4046:	8b 81       	ldd	r24, Y+3	; 0x03
    4048:	9c 81       	ldd	r25, Y+4	; 0x04
    404a:	01 97       	sbiw	r24, 0x01	; 1
    404c:	f1 f7       	brne	.-4      	; 0x404a <MOTOR_CWHALF+0x12c>
    404e:	9c 83       	std	Y+4, r25	; 0x04
    4050:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4052:	8d 81       	ldd	r24, Y+5	; 0x05
    4054:	9e 81       	ldd	r25, Y+6	; 0x06
    4056:	01 97       	sbiw	r24, 0x01	; 1
    4058:	9e 83       	std	Y+6, r25	; 0x06
    405a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    405c:	8d 81       	ldd	r24, Y+5	; 0x05
    405e:	9e 81       	ldd	r25, Y+6	; 0x06
    4060:	00 97       	sbiw	r24, 0x00	; 0
    4062:	69 f7       	brne	.-38     	; 0x403e <MOTOR_CWHALF+0x120>
    4064:	14 c0       	rjmp	.+40     	; 0x408e <MOTOR_CWHALF+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4066:	6f 81       	ldd	r22, Y+7	; 0x07
    4068:	78 85       	ldd	r23, Y+8	; 0x08
    406a:	89 85       	ldd	r24, Y+9	; 0x09
    406c:	9a 85       	ldd	r25, Y+10	; 0x0a
    406e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4072:	dc 01       	movw	r26, r24
    4074:	cb 01       	movw	r24, r22
    4076:	9e 83       	std	Y+6, r25	; 0x06
    4078:	8d 83       	std	Y+5, r24	; 0x05
    407a:	8d 81       	ldd	r24, Y+5	; 0x05
    407c:	9e 81       	ldd	r25, Y+6	; 0x06
    407e:	9a 83       	std	Y+2, r25	; 0x02
    4080:	89 83       	std	Y+1, r24	; 0x01
    4082:	89 81       	ldd	r24, Y+1	; 0x01
    4084:	9a 81       	ldd	r25, Y+2	; 0x02
    4086:	01 97       	sbiw	r24, 0x01	; 1
    4088:	f1 f7       	brne	.-4      	; 0x4086 <MOTOR_CWHALF+0x168>
    408a:	9a 83       	std	Y+2, r25	; 0x02
    408c:	89 83       	std	Y+1, r24	; 0x01
}

void MOTOR_CWHALF(void) {
	uint8 i;
	const uint8 CW_HM[8]={9,1,3,2,6,4,12,8};
	for (i = 0; i < 8; i++) {
    408e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4090:	8f 5f       	subi	r24, 0xFF	; 255
    4092:	8f 87       	std	Y+15, r24	; 0x0f
    4094:	8f 85       	ldd	r24, Y+15	; 0x0f
    4096:	88 30       	cpi	r24, 0x08	; 8
    4098:	08 f4       	brcc	.+2      	; 0x409c <MOTOR_CWHALF+0x17e>
    409a:	4d cf       	rjmp	.-358    	; 0x3f36 <MOTOR_CWHALF+0x18>
		DIO_WRITECHANNEL(PINK, (CW_HM[i]>>1)&1);
		DIO_WRITECHANNEL(YELLOW,(CW_HM[i]>>2)&1);
		DIO_WRITECHANNEL(ORANGE, (CW_HM[i]>>3)&1);
		_delay_ms(10);
	}
}
    409c:	2f 96       	adiw	r28, 0x0f	; 15
    409e:	0f b6       	in	r0, 0x3f	; 63
    40a0:	f8 94       	cli
    40a2:	de bf       	out	0x3e, r29	; 62
    40a4:	0f be       	out	0x3f, r0	; 63
    40a6:	cd bf       	out	0x3d, r28	; 61
    40a8:	cf 91       	pop	r28
    40aa:	df 91       	pop	r29
    40ac:	08 95       	ret

000040ae <__vector_13>:
#define F_CPU 16000000

uint8 d[50];
uint8 count = 0, flag = 0, temp;
uint8* D;
ISR(__vector_13) {
    40ae:	1f 92       	push	r1
    40b0:	0f 92       	push	r0
    40b2:	0f b6       	in	r0, 0x3f	; 63
    40b4:	0f 92       	push	r0
    40b6:	11 24       	eor	r1, r1
    40b8:	2f 93       	push	r18
    40ba:	3f 93       	push	r19
    40bc:	4f 93       	push	r20
    40be:	5f 93       	push	r21
    40c0:	6f 93       	push	r22
    40c2:	7f 93       	push	r23
    40c4:	8f 93       	push	r24
    40c6:	9f 93       	push	r25
    40c8:	af 93       	push	r26
    40ca:	bf 93       	push	r27
    40cc:	ef 93       	push	r30
    40ce:	ff 93       	push	r31
    40d0:	df 93       	push	r29
    40d2:	cf 93       	push	r28
    40d4:	cd b7       	in	r28, 0x3d	; 61
    40d6:	de b7       	in	r29, 0x3e	; 62
    40d8:	2e 97       	sbiw	r28, 0x0e	; 14
    40da:	de bf       	out	0x3e, r29	; 62
    40dc:	cd bf       	out	0x3d, r28	; 61
	temp = UDR;
    40de:	ec e2       	ldi	r30, 0x2C	; 44
    40e0:	f0 e0       	ldi	r31, 0x00	; 0
    40e2:	80 81       	ld	r24, Z
    40e4:	80 93 4c 02 	sts	0x024C, r24
	if (count == 50 || temp == '#') {
    40e8:	80 91 47 02 	lds	r24, 0x0247
    40ec:	82 33       	cpi	r24, 0x32	; 50
    40ee:	29 f0       	breq	.+10     	; 0x40fa <__vector_13+0x4c>
    40f0:	80 91 4c 02 	lds	r24, 0x024C
    40f4:	83 32       	cpi	r24, 0x23	; 35
    40f6:	09 f0       	breq	.+2      	; 0x40fa <__vector_13+0x4c>
    40f8:	7b c0       	rjmp	.+246    	; 0x41f0 <__vector_13+0x142>
		count = 0;
    40fa:	10 92 47 02 	sts	0x0247, r1
		flag = 1;
    40fe:	81 e0       	ldi	r24, 0x01	; 1
    4100:	80 93 48 02 	sts	0x0248, r24
    4104:	80 e0       	ldi	r24, 0x00	; 0
    4106:	90 e0       	ldi	r25, 0x00	; 0
    4108:	aa e7       	ldi	r26, 0x7A	; 122
    410a:	b4 e4       	ldi	r27, 0x44	; 68
    410c:	8b 87       	std	Y+11, r24	; 0x0b
    410e:	9c 87       	std	Y+12, r25	; 0x0c
    4110:	ad 87       	std	Y+13, r26	; 0x0d
    4112:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4114:	6b 85       	ldd	r22, Y+11	; 0x0b
    4116:	7c 85       	ldd	r23, Y+12	; 0x0c
    4118:	8d 85       	ldd	r24, Y+13	; 0x0d
    411a:	9e 85       	ldd	r25, Y+14	; 0x0e
    411c:	20 e0       	ldi	r18, 0x00	; 0
    411e:	30 e0       	ldi	r19, 0x00	; 0
    4120:	4a e7       	ldi	r20, 0x7A	; 122
    4122:	55 e4       	ldi	r21, 0x45	; 69
    4124:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4128:	dc 01       	movw	r26, r24
    412a:	cb 01       	movw	r24, r22
    412c:	8f 83       	std	Y+7, r24	; 0x07
    412e:	98 87       	std	Y+8, r25	; 0x08
    4130:	a9 87       	std	Y+9, r26	; 0x09
    4132:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4134:	6f 81       	ldd	r22, Y+7	; 0x07
    4136:	78 85       	ldd	r23, Y+8	; 0x08
    4138:	89 85       	ldd	r24, Y+9	; 0x09
    413a:	9a 85       	ldd	r25, Y+10	; 0x0a
    413c:	20 e0       	ldi	r18, 0x00	; 0
    413e:	30 e0       	ldi	r19, 0x00	; 0
    4140:	40 e8       	ldi	r20, 0x80	; 128
    4142:	5f e3       	ldi	r21, 0x3F	; 63
    4144:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4148:	88 23       	and	r24, r24
    414a:	2c f4       	brge	.+10     	; 0x4156 <__vector_13+0xa8>
		__ticks = 1;
    414c:	81 e0       	ldi	r24, 0x01	; 1
    414e:	90 e0       	ldi	r25, 0x00	; 0
    4150:	9e 83       	std	Y+6, r25	; 0x06
    4152:	8d 83       	std	Y+5, r24	; 0x05
    4154:	3f c0       	rjmp	.+126    	; 0x41d4 <__vector_13+0x126>
	else if (__tmp > 65535)
    4156:	6f 81       	ldd	r22, Y+7	; 0x07
    4158:	78 85       	ldd	r23, Y+8	; 0x08
    415a:	89 85       	ldd	r24, Y+9	; 0x09
    415c:	9a 85       	ldd	r25, Y+10	; 0x0a
    415e:	20 e0       	ldi	r18, 0x00	; 0
    4160:	3f ef       	ldi	r19, 0xFF	; 255
    4162:	4f e7       	ldi	r20, 0x7F	; 127
    4164:	57 e4       	ldi	r21, 0x47	; 71
    4166:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    416a:	18 16       	cp	r1, r24
    416c:	4c f5       	brge	.+82     	; 0x41c0 <__vector_13+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    416e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4170:	7c 85       	ldd	r23, Y+12	; 0x0c
    4172:	8d 85       	ldd	r24, Y+13	; 0x0d
    4174:	9e 85       	ldd	r25, Y+14	; 0x0e
    4176:	20 e0       	ldi	r18, 0x00	; 0
    4178:	30 e0       	ldi	r19, 0x00	; 0
    417a:	40 e2       	ldi	r20, 0x20	; 32
    417c:	51 e4       	ldi	r21, 0x41	; 65
    417e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4182:	dc 01       	movw	r26, r24
    4184:	cb 01       	movw	r24, r22
    4186:	bc 01       	movw	r22, r24
    4188:	cd 01       	movw	r24, r26
    418a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    418e:	dc 01       	movw	r26, r24
    4190:	cb 01       	movw	r24, r22
    4192:	9e 83       	std	Y+6, r25	; 0x06
    4194:	8d 83       	std	Y+5, r24	; 0x05
    4196:	0f c0       	rjmp	.+30     	; 0x41b6 <__vector_13+0x108>
    4198:	80 e9       	ldi	r24, 0x90	; 144
    419a:	91 e0       	ldi	r25, 0x01	; 1
    419c:	9c 83       	std	Y+4, r25	; 0x04
    419e:	8b 83       	std	Y+3, r24	; 0x03
    41a0:	8b 81       	ldd	r24, Y+3	; 0x03
    41a2:	9c 81       	ldd	r25, Y+4	; 0x04
    41a4:	01 97       	sbiw	r24, 0x01	; 1
    41a6:	f1 f7       	brne	.-4      	; 0x41a4 <__vector_13+0xf6>
    41a8:	9c 83       	std	Y+4, r25	; 0x04
    41aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41ac:	8d 81       	ldd	r24, Y+5	; 0x05
    41ae:	9e 81       	ldd	r25, Y+6	; 0x06
    41b0:	01 97       	sbiw	r24, 0x01	; 1
    41b2:	9e 83       	std	Y+6, r25	; 0x06
    41b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41b6:	8d 81       	ldd	r24, Y+5	; 0x05
    41b8:	9e 81       	ldd	r25, Y+6	; 0x06
    41ba:	00 97       	sbiw	r24, 0x00	; 0
    41bc:	69 f7       	brne	.-38     	; 0x4198 <__vector_13+0xea>
    41be:	14 c0       	rjmp	.+40     	; 0x41e8 <__vector_13+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41c0:	6f 81       	ldd	r22, Y+7	; 0x07
    41c2:	78 85       	ldd	r23, Y+8	; 0x08
    41c4:	89 85       	ldd	r24, Y+9	; 0x09
    41c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    41c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41cc:	dc 01       	movw	r26, r24
    41ce:	cb 01       	movw	r24, r22
    41d0:	9e 83       	std	Y+6, r25	; 0x06
    41d2:	8d 83       	std	Y+5, r24	; 0x05
    41d4:	8d 81       	ldd	r24, Y+5	; 0x05
    41d6:	9e 81       	ldd	r25, Y+6	; 0x06
    41d8:	9a 83       	std	Y+2, r25	; 0x02
    41da:	89 83       	std	Y+1, r24	; 0x01
    41dc:	89 81       	ldd	r24, Y+1	; 0x01
    41de:	9a 81       	ldd	r25, Y+2	; 0x02
    41e0:	01 97       	sbiw	r24, 0x01	; 1
    41e2:	f1 f7       	brne	.-4      	; 0x41e0 <__vector_13+0x132>
    41e4:	9a 83       	std	Y+2, r25	; 0x02
    41e6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		LCD_VIDSENDCOMMAND(LCD_Clear);
    41e8:	81 e0       	ldi	r24, 0x01	; 1
    41ea:	0e 94 27 10 	call	0x204e	; 0x204e <LCD_VIDSENDCOMMAND>
    41ee:	19 c0       	rjmp	.+50     	; 0x4222 <__vector_13+0x174>
	} else {
		d[count] = temp;
    41f0:	80 91 47 02 	lds	r24, 0x0247
    41f4:	88 2f       	mov	r24, r24
    41f6:	90 e0       	ldi	r25, 0x00	; 0
    41f8:	20 91 4c 02 	lds	r18, 0x024C
    41fc:	fc 01       	movw	r30, r24
    41fe:	e3 5b       	subi	r30, 0xB3	; 179
    4200:	fd 4f       	sbci	r31, 0xFD	; 253
    4202:	20 83       	st	Z, r18
		LCD_VIDSENDCHAR(d[count]);
    4204:	80 91 47 02 	lds	r24, 0x0247
    4208:	88 2f       	mov	r24, r24
    420a:	90 e0       	ldi	r25, 0x00	; 0
    420c:	fc 01       	movw	r30, r24
    420e:	e3 5b       	subi	r30, 0xB3	; 179
    4210:	fd 4f       	sbci	r31, 0xFD	; 253
    4212:	80 81       	ld	r24, Z
    4214:	0e 94 2f 14 	call	0x285e	; 0x285e <LCD_VIDSENDCHAR>
		count++;
    4218:	80 91 47 02 	lds	r24, 0x0247
    421c:	8f 5f       	subi	r24, 0xFF	; 255
    421e:	80 93 47 02 	sts	0x0247, r24
	}
}
    4222:	2e 96       	adiw	r28, 0x0e	; 14
    4224:	de bf       	out	0x3e, r29	; 62
    4226:	cd bf       	out	0x3d, r28	; 61
    4228:	cf 91       	pop	r28
    422a:	df 91       	pop	r29
    422c:	ff 91       	pop	r31
    422e:	ef 91       	pop	r30
    4230:	bf 91       	pop	r27
    4232:	af 91       	pop	r26
    4234:	9f 91       	pop	r25
    4236:	8f 91       	pop	r24
    4238:	7f 91       	pop	r23
    423a:	6f 91       	pop	r22
    423c:	5f 91       	pop	r21
    423e:	4f 91       	pop	r20
    4240:	3f 91       	pop	r19
    4242:	2f 91       	pop	r18
    4244:	0f 90       	pop	r0
    4246:	0f be       	out	0x3f, r0	; 63
    4248:	0f 90       	pop	r0
    424a:	1f 90       	pop	r1
    424c:	18 95       	reti

0000424e <main>:
int main(void) {
    424e:	df 93       	push	r29
    4250:	cf 93       	push	r28
    4252:	cd b7       	in	r28, 0x3d	; 61
    4254:	de b7       	in	r29, 0x3e	; 62
    4256:	e8 97       	sbiw	r28, 0x38	; 56
    4258:	0f b6       	in	r0, 0x3f	; 63
    425a:	f8 94       	cli
    425c:	de bf       	out	0x3e, r29	; 62
    425e:	0f be       	out	0x3f, r0	; 63
    4260:	cd bf       	out	0x3d, r28	; 61

	DIO_INIT();
    4262:	0e 94 18 06 	call	0xc30	; 0xc30 <DIO_INIT>
	//SPI_INIT_SLAVE();
	//UART_INIT();
	//UART_recieve_char_with_Interrupt();
	I2C_MASTER_INIT();
    4266:	0e 94 ac 0a 	call	0x1558	; 0x1558 <I2C_MASTER_INIT>
	//uint8 d = 0;
	LCD_INIT();
    426a:	0e 94 45 12 	call	0x248a	; 0x248a <LCD_INIT>
	//I2C_START_CONDITION(0x50, WRITE);
	while (1) {

	 I2C_START_CONDITION(0x50, WRITE);
    426e:	80 e5       	ldi	r24, 0x50	; 80
    4270:	60 e0       	ldi	r22, 0x00	; 0
    4272:	0e 94 07 0b 	call	0x160e	; 0x160e <I2C_START_CONDITION>
	 TOGGLE_BIT(PORTA, 0);
    4276:	ab e3       	ldi	r26, 0x3B	; 59
    4278:	b0 e0       	ldi	r27, 0x00	; 0
    427a:	eb e3       	ldi	r30, 0x3B	; 59
    427c:	f0 e0       	ldi	r31, 0x00	; 0
    427e:	90 81       	ld	r25, Z
    4280:	81 e0       	ldi	r24, 0x01	; 1
    4282:	89 27       	eor	r24, r25
    4284:	8c 93       	st	X, r24
    4286:	80 e0       	ldi	r24, 0x00	; 0
    4288:	90 e0       	ldi	r25, 0x00	; 0
    428a:	a8 ec       	ldi	r26, 0xC8	; 200
    428c:	b2 e4       	ldi	r27, 0x42	; 66
    428e:	8d ab       	std	Y+53, r24	; 0x35
    4290:	9e ab       	std	Y+54, r25	; 0x36
    4292:	af ab       	std	Y+55, r26	; 0x37
    4294:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4296:	6d a9       	ldd	r22, Y+53	; 0x35
    4298:	7e a9       	ldd	r23, Y+54	; 0x36
    429a:	8f a9       	ldd	r24, Y+55	; 0x37
    429c:	98 ad       	ldd	r25, Y+56	; 0x38
    429e:	20 e0       	ldi	r18, 0x00	; 0
    42a0:	30 e0       	ldi	r19, 0x00	; 0
    42a2:	4a e7       	ldi	r20, 0x7A	; 122
    42a4:	55 e4       	ldi	r21, 0x45	; 69
    42a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42aa:	dc 01       	movw	r26, r24
    42ac:	cb 01       	movw	r24, r22
    42ae:	89 ab       	std	Y+49, r24	; 0x31
    42b0:	9a ab       	std	Y+50, r25	; 0x32
    42b2:	ab ab       	std	Y+51, r26	; 0x33
    42b4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    42b6:	69 a9       	ldd	r22, Y+49	; 0x31
    42b8:	7a a9       	ldd	r23, Y+50	; 0x32
    42ba:	8b a9       	ldd	r24, Y+51	; 0x33
    42bc:	9c a9       	ldd	r25, Y+52	; 0x34
    42be:	20 e0       	ldi	r18, 0x00	; 0
    42c0:	30 e0       	ldi	r19, 0x00	; 0
    42c2:	40 e8       	ldi	r20, 0x80	; 128
    42c4:	5f e3       	ldi	r21, 0x3F	; 63
    42c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    42ca:	88 23       	and	r24, r24
    42cc:	2c f4       	brge	.+10     	; 0x42d8 <main+0x8a>
		__ticks = 1;
    42ce:	81 e0       	ldi	r24, 0x01	; 1
    42d0:	90 e0       	ldi	r25, 0x00	; 0
    42d2:	98 ab       	std	Y+48, r25	; 0x30
    42d4:	8f a7       	std	Y+47, r24	; 0x2f
    42d6:	3f c0       	rjmp	.+126    	; 0x4356 <main+0x108>
	else if (__tmp > 65535)
    42d8:	69 a9       	ldd	r22, Y+49	; 0x31
    42da:	7a a9       	ldd	r23, Y+50	; 0x32
    42dc:	8b a9       	ldd	r24, Y+51	; 0x33
    42de:	9c a9       	ldd	r25, Y+52	; 0x34
    42e0:	20 e0       	ldi	r18, 0x00	; 0
    42e2:	3f ef       	ldi	r19, 0xFF	; 255
    42e4:	4f e7       	ldi	r20, 0x7F	; 127
    42e6:	57 e4       	ldi	r21, 0x47	; 71
    42e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    42ec:	18 16       	cp	r1, r24
    42ee:	4c f5       	brge	.+82     	; 0x4342 <main+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42f0:	6d a9       	ldd	r22, Y+53	; 0x35
    42f2:	7e a9       	ldd	r23, Y+54	; 0x36
    42f4:	8f a9       	ldd	r24, Y+55	; 0x37
    42f6:	98 ad       	ldd	r25, Y+56	; 0x38
    42f8:	20 e0       	ldi	r18, 0x00	; 0
    42fa:	30 e0       	ldi	r19, 0x00	; 0
    42fc:	40 e2       	ldi	r20, 0x20	; 32
    42fe:	51 e4       	ldi	r21, 0x41	; 65
    4300:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4304:	dc 01       	movw	r26, r24
    4306:	cb 01       	movw	r24, r22
    4308:	bc 01       	movw	r22, r24
    430a:	cd 01       	movw	r24, r26
    430c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4310:	dc 01       	movw	r26, r24
    4312:	cb 01       	movw	r24, r22
    4314:	98 ab       	std	Y+48, r25	; 0x30
    4316:	8f a7       	std	Y+47, r24	; 0x2f
    4318:	0f c0       	rjmp	.+30     	; 0x4338 <main+0xea>
    431a:	80 e9       	ldi	r24, 0x90	; 144
    431c:	91 e0       	ldi	r25, 0x01	; 1
    431e:	9e a7       	std	Y+46, r25	; 0x2e
    4320:	8d a7       	std	Y+45, r24	; 0x2d
    4322:	8d a5       	ldd	r24, Y+45	; 0x2d
    4324:	9e a5       	ldd	r25, Y+46	; 0x2e
    4326:	01 97       	sbiw	r24, 0x01	; 1
    4328:	f1 f7       	brne	.-4      	; 0x4326 <main+0xd8>
    432a:	9e a7       	std	Y+46, r25	; 0x2e
    432c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    432e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4330:	98 a9       	ldd	r25, Y+48	; 0x30
    4332:	01 97       	sbiw	r24, 0x01	; 1
    4334:	98 ab       	std	Y+48, r25	; 0x30
    4336:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4338:	8f a5       	ldd	r24, Y+47	; 0x2f
    433a:	98 a9       	ldd	r25, Y+48	; 0x30
    433c:	00 97       	sbiw	r24, 0x00	; 0
    433e:	69 f7       	brne	.-38     	; 0x431a <main+0xcc>
    4340:	14 c0       	rjmp	.+40     	; 0x436a <main+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4342:	69 a9       	ldd	r22, Y+49	; 0x31
    4344:	7a a9       	ldd	r23, Y+50	; 0x32
    4346:	8b a9       	ldd	r24, Y+51	; 0x33
    4348:	9c a9       	ldd	r25, Y+52	; 0x34
    434a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    434e:	dc 01       	movw	r26, r24
    4350:	cb 01       	movw	r24, r22
    4352:	98 ab       	std	Y+48, r25	; 0x30
    4354:	8f a7       	std	Y+47, r24	; 0x2f
    4356:	8f a5       	ldd	r24, Y+47	; 0x2f
    4358:	98 a9       	ldd	r25, Y+48	; 0x30
    435a:	9c a7       	std	Y+44, r25	; 0x2c
    435c:	8b a7       	std	Y+43, r24	; 0x2b
    435e:	8b a5       	ldd	r24, Y+43	; 0x2b
    4360:	9c a5       	ldd	r25, Y+44	; 0x2c
    4362:	01 97       	sbiw	r24, 0x01	; 1
    4364:	f1 f7       	brne	.-4      	; 0x4362 <main+0x114>
    4366:	9c a7       	std	Y+44, r25	; 0x2c
    4368:	8b a7       	std	Y+43, r24	; 0x2b
	 _delay_ms(100);
	 I2C_WRITE_DATA_ACK(0x01);
    436a:	81 e0       	ldi	r24, 0x01	; 1
    436c:	0e 94 09 0c 	call	0x1812	; 0x1812 <I2C_WRITE_DATA_ACK>
    4370:	80 e0       	ldi	r24, 0x00	; 0
    4372:	90 e0       	ldi	r25, 0x00	; 0
    4374:	a8 ec       	ldi	r26, 0xC8	; 200
    4376:	b2 e4       	ldi	r27, 0x42	; 66
    4378:	8f a3       	std	Y+39, r24	; 0x27
    437a:	98 a7       	std	Y+40, r25	; 0x28
    437c:	a9 a7       	std	Y+41, r26	; 0x29
    437e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4380:	6f a1       	ldd	r22, Y+39	; 0x27
    4382:	78 a5       	ldd	r23, Y+40	; 0x28
    4384:	89 a5       	ldd	r24, Y+41	; 0x29
    4386:	9a a5       	ldd	r25, Y+42	; 0x2a
    4388:	20 e0       	ldi	r18, 0x00	; 0
    438a:	30 e0       	ldi	r19, 0x00	; 0
    438c:	4a e7       	ldi	r20, 0x7A	; 122
    438e:	55 e4       	ldi	r21, 0x45	; 69
    4390:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4394:	dc 01       	movw	r26, r24
    4396:	cb 01       	movw	r24, r22
    4398:	8b a3       	std	Y+35, r24	; 0x23
    439a:	9c a3       	std	Y+36, r25	; 0x24
    439c:	ad a3       	std	Y+37, r26	; 0x25
    439e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    43a0:	6b a1       	ldd	r22, Y+35	; 0x23
    43a2:	7c a1       	ldd	r23, Y+36	; 0x24
    43a4:	8d a1       	ldd	r24, Y+37	; 0x25
    43a6:	9e a1       	ldd	r25, Y+38	; 0x26
    43a8:	20 e0       	ldi	r18, 0x00	; 0
    43aa:	30 e0       	ldi	r19, 0x00	; 0
    43ac:	40 e8       	ldi	r20, 0x80	; 128
    43ae:	5f e3       	ldi	r21, 0x3F	; 63
    43b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    43b4:	88 23       	and	r24, r24
    43b6:	2c f4       	brge	.+10     	; 0x43c2 <main+0x174>
		__ticks = 1;
    43b8:	81 e0       	ldi	r24, 0x01	; 1
    43ba:	90 e0       	ldi	r25, 0x00	; 0
    43bc:	9a a3       	std	Y+34, r25	; 0x22
    43be:	89 a3       	std	Y+33, r24	; 0x21
    43c0:	3f c0       	rjmp	.+126    	; 0x4440 <main+0x1f2>
	else if (__tmp > 65535)
    43c2:	6b a1       	ldd	r22, Y+35	; 0x23
    43c4:	7c a1       	ldd	r23, Y+36	; 0x24
    43c6:	8d a1       	ldd	r24, Y+37	; 0x25
    43c8:	9e a1       	ldd	r25, Y+38	; 0x26
    43ca:	20 e0       	ldi	r18, 0x00	; 0
    43cc:	3f ef       	ldi	r19, 0xFF	; 255
    43ce:	4f e7       	ldi	r20, 0x7F	; 127
    43d0:	57 e4       	ldi	r21, 0x47	; 71
    43d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    43d6:	18 16       	cp	r1, r24
    43d8:	4c f5       	brge	.+82     	; 0x442c <main+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43da:	6f a1       	ldd	r22, Y+39	; 0x27
    43dc:	78 a5       	ldd	r23, Y+40	; 0x28
    43de:	89 a5       	ldd	r24, Y+41	; 0x29
    43e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    43e2:	20 e0       	ldi	r18, 0x00	; 0
    43e4:	30 e0       	ldi	r19, 0x00	; 0
    43e6:	40 e2       	ldi	r20, 0x20	; 32
    43e8:	51 e4       	ldi	r21, 0x41	; 65
    43ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43ee:	dc 01       	movw	r26, r24
    43f0:	cb 01       	movw	r24, r22
    43f2:	bc 01       	movw	r22, r24
    43f4:	cd 01       	movw	r24, r26
    43f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43fa:	dc 01       	movw	r26, r24
    43fc:	cb 01       	movw	r24, r22
    43fe:	9a a3       	std	Y+34, r25	; 0x22
    4400:	89 a3       	std	Y+33, r24	; 0x21
    4402:	0f c0       	rjmp	.+30     	; 0x4422 <main+0x1d4>
    4404:	80 e9       	ldi	r24, 0x90	; 144
    4406:	91 e0       	ldi	r25, 0x01	; 1
    4408:	98 a3       	std	Y+32, r25	; 0x20
    440a:	8f 8f       	std	Y+31, r24	; 0x1f
    440c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    440e:	98 a1       	ldd	r25, Y+32	; 0x20
    4410:	01 97       	sbiw	r24, 0x01	; 1
    4412:	f1 f7       	brne	.-4      	; 0x4410 <main+0x1c2>
    4414:	98 a3       	std	Y+32, r25	; 0x20
    4416:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4418:	89 a1       	ldd	r24, Y+33	; 0x21
    441a:	9a a1       	ldd	r25, Y+34	; 0x22
    441c:	01 97       	sbiw	r24, 0x01	; 1
    441e:	9a a3       	std	Y+34, r25	; 0x22
    4420:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4422:	89 a1       	ldd	r24, Y+33	; 0x21
    4424:	9a a1       	ldd	r25, Y+34	; 0x22
    4426:	00 97       	sbiw	r24, 0x00	; 0
    4428:	69 f7       	brne	.-38     	; 0x4404 <main+0x1b6>
    442a:	14 c0       	rjmp	.+40     	; 0x4454 <main+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    442c:	6b a1       	ldd	r22, Y+35	; 0x23
    442e:	7c a1       	ldd	r23, Y+36	; 0x24
    4430:	8d a1       	ldd	r24, Y+37	; 0x25
    4432:	9e a1       	ldd	r25, Y+38	; 0x26
    4434:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4438:	dc 01       	movw	r26, r24
    443a:	cb 01       	movw	r24, r22
    443c:	9a a3       	std	Y+34, r25	; 0x22
    443e:	89 a3       	std	Y+33, r24	; 0x21
    4440:	89 a1       	ldd	r24, Y+33	; 0x21
    4442:	9a a1       	ldd	r25, Y+34	; 0x22
    4444:	9e 8f       	std	Y+30, r25	; 0x1e
    4446:	8d 8f       	std	Y+29, r24	; 0x1d
    4448:	8d 8d       	ldd	r24, Y+29	; 0x1d
    444a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    444c:	01 97       	sbiw	r24, 0x01	; 1
    444e:	f1 f7       	brne	.-4      	; 0x444c <main+0x1fe>
    4450:	9e 8f       	std	Y+30, r25	; 0x1e
    4452:	8d 8f       	std	Y+29, r24	; 0x1d
	 _delay_ms(100);
	 I2C_WRITE_STRING_ACK("SANDRA");
    4454:	89 e1       	ldi	r24, 0x19	; 25
    4456:	91 e0       	ldi	r25, 0x01	; 1
    4458:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <I2C_WRITE_STRING_ACK>
	 I2C_STOP_CONDITION();
    445c:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <I2C_STOP_CONDITION>
    4460:	80 e0       	ldi	r24, 0x00	; 0
    4462:	90 e0       	ldi	r25, 0x00	; 0
    4464:	aa e7       	ldi	r26, 0x7A	; 122
    4466:	b4 e4       	ldi	r27, 0x44	; 68
    4468:	89 8f       	std	Y+25, r24	; 0x19
    446a:	9a 8f       	std	Y+26, r25	; 0x1a
    446c:	ab 8f       	std	Y+27, r26	; 0x1b
    446e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4470:	69 8d       	ldd	r22, Y+25	; 0x19
    4472:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4474:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4476:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4478:	20 e0       	ldi	r18, 0x00	; 0
    447a:	30 e0       	ldi	r19, 0x00	; 0
    447c:	4a e7       	ldi	r20, 0x7A	; 122
    447e:	55 e4       	ldi	r21, 0x45	; 69
    4480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4484:	dc 01       	movw	r26, r24
    4486:	cb 01       	movw	r24, r22
    4488:	8d 8b       	std	Y+21, r24	; 0x15
    448a:	9e 8b       	std	Y+22, r25	; 0x16
    448c:	af 8b       	std	Y+23, r26	; 0x17
    448e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4490:	6d 89       	ldd	r22, Y+21	; 0x15
    4492:	7e 89       	ldd	r23, Y+22	; 0x16
    4494:	8f 89       	ldd	r24, Y+23	; 0x17
    4496:	98 8d       	ldd	r25, Y+24	; 0x18
    4498:	20 e0       	ldi	r18, 0x00	; 0
    449a:	30 e0       	ldi	r19, 0x00	; 0
    449c:	40 e8       	ldi	r20, 0x80	; 128
    449e:	5f e3       	ldi	r21, 0x3F	; 63
    44a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    44a4:	88 23       	and	r24, r24
    44a6:	2c f4       	brge	.+10     	; 0x44b2 <main+0x264>
		__ticks = 1;
    44a8:	81 e0       	ldi	r24, 0x01	; 1
    44aa:	90 e0       	ldi	r25, 0x00	; 0
    44ac:	9c 8b       	std	Y+20, r25	; 0x14
    44ae:	8b 8b       	std	Y+19, r24	; 0x13
    44b0:	3f c0       	rjmp	.+126    	; 0x4530 <main+0x2e2>
	else if (__tmp > 65535)
    44b2:	6d 89       	ldd	r22, Y+21	; 0x15
    44b4:	7e 89       	ldd	r23, Y+22	; 0x16
    44b6:	8f 89       	ldd	r24, Y+23	; 0x17
    44b8:	98 8d       	ldd	r25, Y+24	; 0x18
    44ba:	20 e0       	ldi	r18, 0x00	; 0
    44bc:	3f ef       	ldi	r19, 0xFF	; 255
    44be:	4f e7       	ldi	r20, 0x7F	; 127
    44c0:	57 e4       	ldi	r21, 0x47	; 71
    44c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    44c6:	18 16       	cp	r1, r24
    44c8:	4c f5       	brge	.+82     	; 0x451c <main+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44ca:	69 8d       	ldd	r22, Y+25	; 0x19
    44cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    44ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44d2:	20 e0       	ldi	r18, 0x00	; 0
    44d4:	30 e0       	ldi	r19, 0x00	; 0
    44d6:	40 e2       	ldi	r20, 0x20	; 32
    44d8:	51 e4       	ldi	r21, 0x41	; 65
    44da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44de:	dc 01       	movw	r26, r24
    44e0:	cb 01       	movw	r24, r22
    44e2:	bc 01       	movw	r22, r24
    44e4:	cd 01       	movw	r24, r26
    44e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44ea:	dc 01       	movw	r26, r24
    44ec:	cb 01       	movw	r24, r22
    44ee:	9c 8b       	std	Y+20, r25	; 0x14
    44f0:	8b 8b       	std	Y+19, r24	; 0x13
    44f2:	0f c0       	rjmp	.+30     	; 0x4512 <main+0x2c4>
    44f4:	80 e9       	ldi	r24, 0x90	; 144
    44f6:	91 e0       	ldi	r25, 0x01	; 1
    44f8:	9a 8b       	std	Y+18, r25	; 0x12
    44fa:	89 8b       	std	Y+17, r24	; 0x11
    44fc:	89 89       	ldd	r24, Y+17	; 0x11
    44fe:	9a 89       	ldd	r25, Y+18	; 0x12
    4500:	01 97       	sbiw	r24, 0x01	; 1
    4502:	f1 f7       	brne	.-4      	; 0x4500 <main+0x2b2>
    4504:	9a 8b       	std	Y+18, r25	; 0x12
    4506:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4508:	8b 89       	ldd	r24, Y+19	; 0x13
    450a:	9c 89       	ldd	r25, Y+20	; 0x14
    450c:	01 97       	sbiw	r24, 0x01	; 1
    450e:	9c 8b       	std	Y+20, r25	; 0x14
    4510:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4512:	8b 89       	ldd	r24, Y+19	; 0x13
    4514:	9c 89       	ldd	r25, Y+20	; 0x14
    4516:	00 97       	sbiw	r24, 0x00	; 0
    4518:	69 f7       	brne	.-38     	; 0x44f4 <main+0x2a6>
    451a:	14 c0       	rjmp	.+40     	; 0x4544 <main+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    451c:	6d 89       	ldd	r22, Y+21	; 0x15
    451e:	7e 89       	ldd	r23, Y+22	; 0x16
    4520:	8f 89       	ldd	r24, Y+23	; 0x17
    4522:	98 8d       	ldd	r25, Y+24	; 0x18
    4524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4528:	dc 01       	movw	r26, r24
    452a:	cb 01       	movw	r24, r22
    452c:	9c 8b       	std	Y+20, r25	; 0x14
    452e:	8b 8b       	std	Y+19, r24	; 0x13
    4530:	8b 89       	ldd	r24, Y+19	; 0x13
    4532:	9c 89       	ldd	r25, Y+20	; 0x14
    4534:	98 8b       	std	Y+16, r25	; 0x10
    4536:	8f 87       	std	Y+15, r24	; 0x0f
    4538:	8f 85       	ldd	r24, Y+15	; 0x0f
    453a:	98 89       	ldd	r25, Y+16	; 0x10
    453c:	01 97       	sbiw	r24, 0x01	; 1
    453e:	f1 f7       	brne	.-4      	; 0x453c <main+0x2ee>
    4540:	98 8b       	std	Y+16, r25	; 0x10
    4542:	8f 87       	std	Y+15, r24	; 0x0f
	 _delay_ms(1000);
	 //I2C_STOP_CONDITION();
	 I2C_START_CONDITION(0x50, WRITE);
    4544:	80 e5       	ldi	r24, 0x50	; 80
    4546:	60 e0       	ldi	r22, 0x00	; 0
    4548:	0e 94 07 0b 	call	0x160e	; 0x160e <I2C_START_CONDITION>
	 I2C_WRITE_DATA_ACK(0x01);
    454c:	81 e0       	ldi	r24, 0x01	; 1
    454e:	0e 94 09 0c 	call	0x1812	; 0x1812 <I2C_WRITE_DATA_ACK>
	 I2C_REPEATED_START_CONDITION(0x50, READ);
    4552:	80 e5       	ldi	r24, 0x50	; 80
    4554:	61 e0       	ldi	r22, 0x01	; 1
    4556:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <I2C_REPEATED_START_CONDITION>
    455a:	80 e0       	ldi	r24, 0x00	; 0
    455c:	90 e0       	ldi	r25, 0x00	; 0
    455e:	a8 ec       	ldi	r26, 0xC8	; 200
    4560:	b2 e4       	ldi	r27, 0x42	; 66
    4562:	8b 87       	std	Y+11, r24	; 0x0b
    4564:	9c 87       	std	Y+12, r25	; 0x0c
    4566:	ad 87       	std	Y+13, r26	; 0x0d
    4568:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    456a:	6b 85       	ldd	r22, Y+11	; 0x0b
    456c:	7c 85       	ldd	r23, Y+12	; 0x0c
    456e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4570:	9e 85       	ldd	r25, Y+14	; 0x0e
    4572:	20 e0       	ldi	r18, 0x00	; 0
    4574:	30 e0       	ldi	r19, 0x00	; 0
    4576:	4a e7       	ldi	r20, 0x7A	; 122
    4578:	55 e4       	ldi	r21, 0x45	; 69
    457a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    457e:	dc 01       	movw	r26, r24
    4580:	cb 01       	movw	r24, r22
    4582:	8f 83       	std	Y+7, r24	; 0x07
    4584:	98 87       	std	Y+8, r25	; 0x08
    4586:	a9 87       	std	Y+9, r26	; 0x09
    4588:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    458a:	6f 81       	ldd	r22, Y+7	; 0x07
    458c:	78 85       	ldd	r23, Y+8	; 0x08
    458e:	89 85       	ldd	r24, Y+9	; 0x09
    4590:	9a 85       	ldd	r25, Y+10	; 0x0a
    4592:	20 e0       	ldi	r18, 0x00	; 0
    4594:	30 e0       	ldi	r19, 0x00	; 0
    4596:	40 e8       	ldi	r20, 0x80	; 128
    4598:	5f e3       	ldi	r21, 0x3F	; 63
    459a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    459e:	88 23       	and	r24, r24
    45a0:	2c f4       	brge	.+10     	; 0x45ac <main+0x35e>
		__ticks = 1;
    45a2:	81 e0       	ldi	r24, 0x01	; 1
    45a4:	90 e0       	ldi	r25, 0x00	; 0
    45a6:	9e 83       	std	Y+6, r25	; 0x06
    45a8:	8d 83       	std	Y+5, r24	; 0x05
    45aa:	3f c0       	rjmp	.+126    	; 0x462a <main+0x3dc>
	else if (__tmp > 65535)
    45ac:	6f 81       	ldd	r22, Y+7	; 0x07
    45ae:	78 85       	ldd	r23, Y+8	; 0x08
    45b0:	89 85       	ldd	r24, Y+9	; 0x09
    45b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    45b4:	20 e0       	ldi	r18, 0x00	; 0
    45b6:	3f ef       	ldi	r19, 0xFF	; 255
    45b8:	4f e7       	ldi	r20, 0x7F	; 127
    45ba:	57 e4       	ldi	r21, 0x47	; 71
    45bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    45c0:	18 16       	cp	r1, r24
    45c2:	4c f5       	brge	.+82     	; 0x4616 <main+0x3c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    45c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    45c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    45ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    45cc:	20 e0       	ldi	r18, 0x00	; 0
    45ce:	30 e0       	ldi	r19, 0x00	; 0
    45d0:	40 e2       	ldi	r20, 0x20	; 32
    45d2:	51 e4       	ldi	r21, 0x41	; 65
    45d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45d8:	dc 01       	movw	r26, r24
    45da:	cb 01       	movw	r24, r22
    45dc:	bc 01       	movw	r22, r24
    45de:	cd 01       	movw	r24, r26
    45e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45e4:	dc 01       	movw	r26, r24
    45e6:	cb 01       	movw	r24, r22
    45e8:	9e 83       	std	Y+6, r25	; 0x06
    45ea:	8d 83       	std	Y+5, r24	; 0x05
    45ec:	0f c0       	rjmp	.+30     	; 0x460c <main+0x3be>
    45ee:	80 e9       	ldi	r24, 0x90	; 144
    45f0:	91 e0       	ldi	r25, 0x01	; 1
    45f2:	9c 83       	std	Y+4, r25	; 0x04
    45f4:	8b 83       	std	Y+3, r24	; 0x03
    45f6:	8b 81       	ldd	r24, Y+3	; 0x03
    45f8:	9c 81       	ldd	r25, Y+4	; 0x04
    45fa:	01 97       	sbiw	r24, 0x01	; 1
    45fc:	f1 f7       	brne	.-4      	; 0x45fa <main+0x3ac>
    45fe:	9c 83       	std	Y+4, r25	; 0x04
    4600:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4602:	8d 81       	ldd	r24, Y+5	; 0x05
    4604:	9e 81       	ldd	r25, Y+6	; 0x06
    4606:	01 97       	sbiw	r24, 0x01	; 1
    4608:	9e 83       	std	Y+6, r25	; 0x06
    460a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    460c:	8d 81       	ldd	r24, Y+5	; 0x05
    460e:	9e 81       	ldd	r25, Y+6	; 0x06
    4610:	00 97       	sbiw	r24, 0x00	; 0
    4612:	69 f7       	brne	.-38     	; 0x45ee <main+0x3a0>
    4614:	14 c0       	rjmp	.+40     	; 0x463e <main+0x3f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4616:	6f 81       	ldd	r22, Y+7	; 0x07
    4618:	78 85       	ldd	r23, Y+8	; 0x08
    461a:	89 85       	ldd	r24, Y+9	; 0x09
    461c:	9a 85       	ldd	r25, Y+10	; 0x0a
    461e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4622:	dc 01       	movw	r26, r24
    4624:	cb 01       	movw	r24, r22
    4626:	9e 83       	std	Y+6, r25	; 0x06
    4628:	8d 83       	std	Y+5, r24	; 0x05
    462a:	8d 81       	ldd	r24, Y+5	; 0x05
    462c:	9e 81       	ldd	r25, Y+6	; 0x06
    462e:	9a 83       	std	Y+2, r25	; 0x02
    4630:	89 83       	std	Y+1, r24	; 0x01
    4632:	89 81       	ldd	r24, Y+1	; 0x01
    4634:	9a 81       	ldd	r25, Y+2	; 0x02
    4636:	01 97       	sbiw	r24, 0x01	; 1
    4638:	f1 f7       	brne	.-4      	; 0x4636 <main+0x3e8>
    463a:	9a 83       	std	Y+2, r25	; 0x02
    463c:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(100);
	 D = I2C_READ_STRING_ACK();
    463e:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <I2C_READ_STRING_ACK>
    4642:	90 93 4b 02 	sts	0x024B, r25
    4646:	80 93 4a 02 	sts	0x024A, r24
	 I2C_STOP_CONDITION();
    464a:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <I2C_STOP_CONDITION>
    464e:	0f ce       	rjmp	.-994    	; 0x426e <main+0x20>

00004650 <__udivmodhi4>:
    4650:	aa 1b       	sub	r26, r26
    4652:	bb 1b       	sub	r27, r27
    4654:	51 e1       	ldi	r21, 0x11	; 17
    4656:	07 c0       	rjmp	.+14     	; 0x4666 <__udivmodhi4_ep>

00004658 <__udivmodhi4_loop>:
    4658:	aa 1f       	adc	r26, r26
    465a:	bb 1f       	adc	r27, r27
    465c:	a6 17       	cp	r26, r22
    465e:	b7 07       	cpc	r27, r23
    4660:	10 f0       	brcs	.+4      	; 0x4666 <__udivmodhi4_ep>
    4662:	a6 1b       	sub	r26, r22
    4664:	b7 0b       	sbc	r27, r23

00004666 <__udivmodhi4_ep>:
    4666:	88 1f       	adc	r24, r24
    4668:	99 1f       	adc	r25, r25
    466a:	5a 95       	dec	r21
    466c:	a9 f7       	brne	.-22     	; 0x4658 <__udivmodhi4_loop>
    466e:	80 95       	com	r24
    4670:	90 95       	com	r25
    4672:	bc 01       	movw	r22, r24
    4674:	cd 01       	movw	r24, r26
    4676:	08 95       	ret

00004678 <__prologue_saves__>:
    4678:	2f 92       	push	r2
    467a:	3f 92       	push	r3
    467c:	4f 92       	push	r4
    467e:	5f 92       	push	r5
    4680:	6f 92       	push	r6
    4682:	7f 92       	push	r7
    4684:	8f 92       	push	r8
    4686:	9f 92       	push	r9
    4688:	af 92       	push	r10
    468a:	bf 92       	push	r11
    468c:	cf 92       	push	r12
    468e:	df 92       	push	r13
    4690:	ef 92       	push	r14
    4692:	ff 92       	push	r15
    4694:	0f 93       	push	r16
    4696:	1f 93       	push	r17
    4698:	cf 93       	push	r28
    469a:	df 93       	push	r29
    469c:	cd b7       	in	r28, 0x3d	; 61
    469e:	de b7       	in	r29, 0x3e	; 62
    46a0:	ca 1b       	sub	r28, r26
    46a2:	db 0b       	sbc	r29, r27
    46a4:	0f b6       	in	r0, 0x3f	; 63
    46a6:	f8 94       	cli
    46a8:	de bf       	out	0x3e, r29	; 62
    46aa:	0f be       	out	0x3f, r0	; 63
    46ac:	cd bf       	out	0x3d, r28	; 61
    46ae:	09 94       	ijmp

000046b0 <__epilogue_restores__>:
    46b0:	2a 88       	ldd	r2, Y+18	; 0x12
    46b2:	39 88       	ldd	r3, Y+17	; 0x11
    46b4:	48 88       	ldd	r4, Y+16	; 0x10
    46b6:	5f 84       	ldd	r5, Y+15	; 0x0f
    46b8:	6e 84       	ldd	r6, Y+14	; 0x0e
    46ba:	7d 84       	ldd	r7, Y+13	; 0x0d
    46bc:	8c 84       	ldd	r8, Y+12	; 0x0c
    46be:	9b 84       	ldd	r9, Y+11	; 0x0b
    46c0:	aa 84       	ldd	r10, Y+10	; 0x0a
    46c2:	b9 84       	ldd	r11, Y+9	; 0x09
    46c4:	c8 84       	ldd	r12, Y+8	; 0x08
    46c6:	df 80       	ldd	r13, Y+7	; 0x07
    46c8:	ee 80       	ldd	r14, Y+6	; 0x06
    46ca:	fd 80       	ldd	r15, Y+5	; 0x05
    46cc:	0c 81       	ldd	r16, Y+4	; 0x04
    46ce:	1b 81       	ldd	r17, Y+3	; 0x03
    46d0:	aa 81       	ldd	r26, Y+2	; 0x02
    46d2:	b9 81       	ldd	r27, Y+1	; 0x01
    46d4:	ce 0f       	add	r28, r30
    46d6:	d1 1d       	adc	r29, r1
    46d8:	0f b6       	in	r0, 0x3f	; 63
    46da:	f8 94       	cli
    46dc:	de bf       	out	0x3e, r29	; 62
    46de:	0f be       	out	0x3f, r0	; 63
    46e0:	cd bf       	out	0x3d, r28	; 61
    46e2:	ed 01       	movw	r28, r26
    46e4:	08 95       	ret

000046e6 <_exit>:
    46e6:	f8 94       	cli

000046e8 <__stop_program>:
    46e8:	ff cf       	rjmp	.-2      	; 0x46e8 <__stop_program>
