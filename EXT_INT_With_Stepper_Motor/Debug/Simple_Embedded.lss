
Simple_Embedded.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003208  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ae  00800060  00003208  0000329c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000067  0080010e  0080010e  0000334a  2**0
                  ALLOC
  3 .stab         000037b0  00000000  00000000  0000334c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000135e  00000000  00000000  00006afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007e5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007f9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000810a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009d53  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ac3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b9ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bb4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bdd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c5a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 6b 18 	jmp	0x30d6	; 0x30d6 <__vector_1>
       8:	0c 94 8f 18 	jmp	0x311e	; 0x311e <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e0       	ldi	r30, 0x08	; 8
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 30       	cpi	r26, 0x0E	; 14
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e0       	ldi	r26, 0x0E	; 14
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 37       	cpi	r26, 0x75	; 117
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b3 18 	call	0x3166	; 0x3166 <main>
      8a:	0c 94 02 19 	jmp	0x3204	; 0x3204 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 cb 18 	jmp	0x3196	; 0x3196 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e7 18 	jmp	0x31ce	; 0x31ce <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d7 18 	jmp	0x31ae	; 0x31ae <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f3 18 	jmp	0x31e6	; 0x31e6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d7 18 	jmp	0x31ae	; 0x31ae <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f3 18 	jmp	0x31e6	; 0x31e6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 cb 18 	jmp	0x3196	; 0x3196 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e7 18 	jmp	0x31ce	; 0x31ce <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d7 18 	jmp	0x31ae	; 0x31ae <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f3 18 	jmp	0x31e6	; 0x31e6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d7 18 	jmp	0x31ae	; 0x31ae <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f3 18 	jmp	0x31e6	; 0x31e6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d7 18 	jmp	0x31ae	; 0x31ae <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f3 18 	jmp	0x31e6	; 0x31e6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 db 18 	jmp	0x31b6	; 0x31b6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f7 18 	jmp	0x31ee	; 0x31ee <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_INIT>:
#include "STD_Types.h"
#include "BIT_MATH.h"
#include "MEMMAP.h"
#include "ADC.h"

void ADC_INIT(void) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	// Set Channel
	ADMUX = ADC_CHANNEL;
     b4e:	e7 e2       	ldi	r30, 0x27	; 39
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	80 83       	st	Z, r24
	// Reference Selection Bits
	SET_BIT(ADMUX, 6);
     b56:	a7 e2       	ldi	r26, 0x27	; 39
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	e7 e2       	ldi	r30, 0x27	; 39
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	80 64       	ori	r24, 0x40	; 64
     b62:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, 7);
     b64:	a7 e2       	ldi	r26, 0x27	; 39
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	e7 e2       	ldi	r30, 0x27	; 39
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	8f 77       	andi	r24, 0x7F	; 127
     b70:	8c 93       	st	X, r24
	// SET PRESCALER
	SET_BIT(ADCSRA, 0);
     b72:	a6 e2       	ldi	r26, 0x26	; 38
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	e6 e2       	ldi	r30, 0x26	; 38
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	81 60       	ori	r24, 0x01	; 1
     b7e:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, 1);
     b80:	a6 e2       	ldi	r26, 0x26	; 38
     b82:	b0 e0       	ldi	r27, 0x00	; 0
     b84:	e6 e2       	ldi	r30, 0x26	; 38
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	80 81       	ld	r24, Z
     b8a:	82 60       	ori	r24, 0x02	; 2
     b8c:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, 2);
     b8e:	a6 e2       	ldi	r26, 0x26	; 38
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	e6 e2       	ldi	r30, 0x26	; 38
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	84 60       	ori	r24, 0x04	; 4
     b9a:	8c 93       	st	X, r24
	// ADC Enable
	SET_BIT(ADCSRA, 7);
     b9c:	a6 e2       	ldi	r26, 0x26	; 38
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	e6 e2       	ldi	r30, 0x26	; 38
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	80 68       	ori	r24, 0x80	; 128
     ba8:	8c 93       	st	X, r24
	// ADC Interrupt Enable
	SET_BIT(ADCSRA, 3);
     baa:	a6 e2       	ldi	r26, 0x26	; 38
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	e6 e2       	ldi	r30, 0x26	; 38
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	88 60       	ori	r24, 0x08	; 8
     bb6:	8c 93       	st	X, r24
	// Enable Global Interrupt
	SET_BIT(SREG, 7);
     bb8:	af e5       	ldi	r26, 0x5F	; 95
     bba:	b0 e0       	ldi	r27, 0x00	; 0
     bbc:	ef e5       	ldi	r30, 0x5F	; 95
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	80 81       	ld	r24, Z
     bc2:	80 68       	ori	r24, 0x80	; 128
     bc4:	8c 93       	st	X, r24

}
     bc6:	cf 91       	pop	r28
     bc8:	df 91       	pop	r29
     bca:	08 95       	ret

00000bcc <ADC_START_CONVERSION>:

void ADC_START_CONVERSION(uint8 channel) {
     bcc:	df 93       	push	r29
     bce:	cf 93       	push	r28
     bd0:	0f 92       	push	r0
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
     bd6:	89 83       	std	Y+1, r24	; 0x01
	//Choose Channel
	ADMUX &= 0xf0;
     bd8:	a7 e2       	ldi	r26, 0x27	; 39
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	e7 e2       	ldi	r30, 0x27	; 39
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	80 7f       	andi	r24, 0xF0	; 240
     be4:	8c 93       	st	X, r24
	ADMUX |= channel;
     be6:	a7 e2       	ldi	r26, 0x27	; 39
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	e7 e2       	ldi	r30, 0x27	; 39
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	90 81       	ld	r25, Z
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
     bf2:	89 2b       	or	r24, r25
     bf4:	8c 93       	st	X, r24
	// ADC Start Conversion
	SET_BIT(ADCSRA, 6);
     bf6:	a6 e2       	ldi	r26, 0x26	; 38
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e6 e2       	ldi	r30, 0x26	; 38
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	80 64       	ori	r24, 0x40	; 64
     c02:	8c 93       	st	X, r24
}
     c04:	0f 90       	pop	r0
     c06:	cf 91       	pop	r28
     c08:	df 91       	pop	r29
     c0a:	08 95       	ret

00000c0c <ADC_READ>:
uint16 ADC_READ(void) {
     c0c:	df 93       	push	r29
     c0e:	cf 93       	push	r28
     c10:	00 d0       	rcall	.+0      	; 0xc12 <ADC_READ+0x6>
     c12:	cd b7       	in	r28, 0x3d	; 61
     c14:	de b7       	in	r29, 0x3e	; 62
	uint16 value;
	value = ADC;
     c16:	e4 e2       	ldi	r30, 0x24	; 36
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	91 81       	ldd	r25, Z+1	; 0x01
     c1e:	9a 83       	std	Y+2, r25	; 0x02
     c20:	89 83       	std	Y+1, r24	; 0x01
	return value;
     c22:	89 81       	ldd	r24, Y+1	; 0x01
     c24:	9a 81       	ldd	r25, Y+2	; 0x02

}
     c26:	0f 90       	pop	r0
     c28:	0f 90       	pop	r0
     c2a:	cf 91       	pop	r28
     c2c:	df 91       	pop	r29
     c2e:	08 95       	ret

00000c30 <DIO_INIT>:
#include "STD_Types.h"
#include "BIT_MATH.h"
#include "MEMMAP.h"
#include "DIO.h"

void DIO_INIT(void) {
     c30:	df 93       	push	r29
     c32:	cf 93       	push	r28
     c34:	cd b7       	in	r28, 0x3d	; 61
     c36:	de b7       	in	r29, 0x3e	; 62
     c38:	6a 97       	sbiw	r28, 0x1a	; 26
     c3a:	0f b6       	in	r0, 0x3f	; 63
     c3c:	f8 94       	cli
     c3e:	de bf       	out	0x3e, r29	; 62
     c40:	0f be       	out	0x3f, r0	; 63
     c42:	cd bf       	out	0x3d, r28	; 61
	uint8 i,PinValue,PortState;
	uint8* reg[8]={DDRA_ADDRESS,DDRB_ADDRESS,DDRC_ADDRESS,DDRD_ADDRESS,
			PORTA_ADDRESS,PORTB_ADDRESS,PORTC_ADDRESS,PORTD_ADDRESS};
     c44:	9e 01       	movw	r18, r28
     c46:	2c 5f       	subi	r18, 0xFC	; 252
     c48:	3f 4f       	sbci	r19, 0xFF	; 255
     c4a:	3f 8b       	std	Y+23, r19	; 0x17
     c4c:	2e 8b       	std	Y+22, r18	; 0x16
     c4e:	82 ea       	ldi	r24, 0xA2	; 162
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	99 8f       	std	Y+25, r25	; 0x19
     c54:	88 8f       	std	Y+24, r24	; 0x18
     c56:	90 e1       	ldi	r25, 0x10	; 16
     c58:	9a 8f       	std	Y+26, r25	; 0x1a
     c5a:	e8 8d       	ldd	r30, Y+24	; 0x18
     c5c:	f9 8d       	ldd	r31, Y+25	; 0x19
     c5e:	00 80       	ld	r0, Z
     c60:	28 8d       	ldd	r18, Y+24	; 0x18
     c62:	39 8d       	ldd	r19, Y+25	; 0x19
     c64:	2f 5f       	subi	r18, 0xFF	; 255
     c66:	3f 4f       	sbci	r19, 0xFF	; 255
     c68:	39 8f       	std	Y+25, r19	; 0x19
     c6a:	28 8f       	std	Y+24, r18	; 0x18
     c6c:	ee 89       	ldd	r30, Y+22	; 0x16
     c6e:	ff 89       	ldd	r31, Y+23	; 0x17
     c70:	00 82       	st	Z, r0
     c72:	2e 89       	ldd	r18, Y+22	; 0x16
     c74:	3f 89       	ldd	r19, Y+23	; 0x17
     c76:	2f 5f       	subi	r18, 0xFF	; 255
     c78:	3f 4f       	sbci	r19, 0xFF	; 255
     c7a:	3f 8b       	std	Y+23, r19	; 0x17
     c7c:	2e 8b       	std	Y+22, r18	; 0x16
     c7e:	3a 8d       	ldd	r19, Y+26	; 0x1a
     c80:	31 50       	subi	r19, 0x01	; 1
     c82:	3a 8f       	std	Y+26, r19	; 0x1a
     c84:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c86:	88 23       	and	r24, r24
     c88:	41 f7       	brne	.-48     	; 0xc5a <DIO_INIT+0x2a>
	for(i=0;i<PIN_LIMIT;i++){
     c8a:	1b 82       	std	Y+3, r1	; 0x03
     c8c:	0a c1       	rjmp	.+532    	; 0xea2 <DIO_INIT+0x272>
		PinValue=i%8;
     c8e:	8b 81       	ldd	r24, Y+3	; 0x03
     c90:	87 70       	andi	r24, 0x07	; 7
     c92:	8a 83       	std	Y+2, r24	; 0x02
		PortState=i/8;
     c94:	8b 81       	ldd	r24, Y+3	; 0x03
     c96:	86 95       	lsr	r24
     c98:	86 95       	lsr	r24
     c9a:	86 95       	lsr	r24
     c9c:	89 83       	std	Y+1, r24	; 0x01
		switch(DIO_PinConfiguration[i]){
     c9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ca0:	88 2f       	mov	r24, r24
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	fc 01       	movw	r30, r24
     ca6:	e8 59       	subi	r30, 0x98	; 152
     ca8:	ff 4f       	sbci	r31, 0xFF	; 255
     caa:	80 81       	ld	r24, Z
     cac:	e8 2f       	mov	r30, r24
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	fd 8b       	std	Y+21, r31	; 0x15
     cb2:	ec 8b       	std	Y+20, r30	; 0x14
     cb4:	2c 89       	ldd	r18, Y+20	; 0x14
     cb6:	3d 89       	ldd	r19, Y+21	; 0x15
     cb8:	21 30       	cpi	r18, 0x01	; 1
     cba:	31 05       	cpc	r19, r1
     cbc:	09 f4       	brne	.+2      	; 0xcc0 <DIO_INIT+0x90>
     cbe:	66 c0       	rjmp	.+204    	; 0xd8c <DIO_INIT+0x15c>
     cc0:	8c 89       	ldd	r24, Y+20	; 0x14
     cc2:	9d 89       	ldd	r25, Y+21	; 0x15
     cc4:	83 30       	cpi	r24, 0x03	; 3
     cc6:	91 05       	cpc	r25, r1
     cc8:	09 f4       	brne	.+2      	; 0xccc <DIO_INIT+0x9c>
     cca:	8d c0       	rjmp	.+282    	; 0xde6 <DIO_INIT+0x1b6>
     ccc:	ec 89       	ldd	r30, Y+20	; 0x14
     cce:	fd 89       	ldd	r31, Y+21	; 0x15
     cd0:	30 97       	sbiw	r30, 0x00	; 0
     cd2:	09 f0       	breq	.+2      	; 0xcd6 <DIO_INIT+0xa6>
     cd4:	e3 c0       	rjmp	.+454    	; 0xe9c <DIO_INIT+0x26c>
		case INPUT_PULLUP:
			CLR_BIT(*reg[PortState],PinValue);
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	88 2f       	mov	r24, r24
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	9c 01       	movw	r18, r24
     cde:	22 0f       	add	r18, r18
     ce0:	33 1f       	adc	r19, r19
     ce2:	ce 01       	movw	r24, r28
     ce4:	01 96       	adiw	r24, 0x01	; 1
     ce6:	82 0f       	add	r24, r18
     ce8:	93 1f       	adc	r25, r19
     cea:	fc 01       	movw	r30, r24
     cec:	33 96       	adiw	r30, 0x03	; 3
     cee:	a0 81       	ld	r26, Z
     cf0:	b1 81       	ldd	r27, Z+1	; 0x01
     cf2:	89 81       	ldd	r24, Y+1	; 0x01
     cf4:	88 2f       	mov	r24, r24
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	9c 01       	movw	r18, r24
     cfa:	22 0f       	add	r18, r18
     cfc:	33 1f       	adc	r19, r19
     cfe:	ce 01       	movw	r24, r28
     d00:	01 96       	adiw	r24, 0x01	; 1
     d02:	82 0f       	add	r24, r18
     d04:	93 1f       	adc	r25, r19
     d06:	fc 01       	movw	r30, r24
     d08:	33 96       	adiw	r30, 0x03	; 3
     d0a:	01 90       	ld	r0, Z+
     d0c:	f0 81       	ld	r31, Z
     d0e:	e0 2d       	mov	r30, r0
     d10:	80 81       	ld	r24, Z
     d12:	48 2f       	mov	r20, r24
     d14:	8a 81       	ldd	r24, Y+2	; 0x02
     d16:	28 2f       	mov	r18, r24
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <DIO_INIT+0xf4>
     d20:	88 0f       	add	r24, r24
     d22:	99 1f       	adc	r25, r25
     d24:	2a 95       	dec	r18
     d26:	e2 f7       	brpl	.-8      	; 0xd20 <DIO_INIT+0xf0>
     d28:	80 95       	com	r24
     d2a:	84 23       	and	r24, r20
     d2c:	8c 93       	st	X, r24
			SET_BIT(*reg[PortState+4],PinValue);
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	88 2f       	mov	r24, r24
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	04 96       	adiw	r24, 0x04	; 4
     d36:	9c 01       	movw	r18, r24
     d38:	22 0f       	add	r18, r18
     d3a:	33 1f       	adc	r19, r19
     d3c:	ce 01       	movw	r24, r28
     d3e:	01 96       	adiw	r24, 0x01	; 1
     d40:	82 0f       	add	r24, r18
     d42:	93 1f       	adc	r25, r19
     d44:	fc 01       	movw	r30, r24
     d46:	33 96       	adiw	r30, 0x03	; 3
     d48:	a0 81       	ld	r26, Z
     d4a:	b1 81       	ldd	r27, Z+1	; 0x01
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	88 2f       	mov	r24, r24
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	04 96       	adiw	r24, 0x04	; 4
     d54:	9c 01       	movw	r18, r24
     d56:	22 0f       	add	r18, r18
     d58:	33 1f       	adc	r19, r19
     d5a:	ce 01       	movw	r24, r28
     d5c:	01 96       	adiw	r24, 0x01	; 1
     d5e:	82 0f       	add	r24, r18
     d60:	93 1f       	adc	r25, r19
     d62:	fc 01       	movw	r30, r24
     d64:	33 96       	adiw	r30, 0x03	; 3
     d66:	01 90       	ld	r0, Z+
     d68:	f0 81       	ld	r31, Z
     d6a:	e0 2d       	mov	r30, r0
     d6c:	80 81       	ld	r24, Z
     d6e:	48 2f       	mov	r20, r24
     d70:	8a 81       	ldd	r24, Y+2	; 0x02
     d72:	28 2f       	mov	r18, r24
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	02 2e       	mov	r0, r18
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <DIO_INIT+0x152>
     d7e:	88 0f       	add	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	0a 94       	dec	r0
     d84:	e2 f7       	brpl	.-8      	; 0xd7e <DIO_INIT+0x14e>
     d86:	84 2b       	or	r24, r20
     d88:	8c 93       	st	X, r24
     d8a:	88 c0       	rjmp	.+272    	; 0xe9c <DIO_INIT+0x26c>
			break;
		case OUTPUT:
			SET_BIT(*reg[PortState],PinValue);
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	88 2f       	mov	r24, r24
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	9c 01       	movw	r18, r24
     d94:	22 0f       	add	r18, r18
     d96:	33 1f       	adc	r19, r19
     d98:	ce 01       	movw	r24, r28
     d9a:	01 96       	adiw	r24, 0x01	; 1
     d9c:	82 0f       	add	r24, r18
     d9e:	93 1f       	adc	r25, r19
     da0:	fc 01       	movw	r30, r24
     da2:	33 96       	adiw	r30, 0x03	; 3
     da4:	a0 81       	ld	r26, Z
     da6:	b1 81       	ldd	r27, Z+1	; 0x01
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	88 2f       	mov	r24, r24
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	9c 01       	movw	r18, r24
     db0:	22 0f       	add	r18, r18
     db2:	33 1f       	adc	r19, r19
     db4:	ce 01       	movw	r24, r28
     db6:	01 96       	adiw	r24, 0x01	; 1
     db8:	82 0f       	add	r24, r18
     dba:	93 1f       	adc	r25, r19
     dbc:	fc 01       	movw	r30, r24
     dbe:	33 96       	adiw	r30, 0x03	; 3
     dc0:	01 90       	ld	r0, Z+
     dc2:	f0 81       	ld	r31, Z
     dc4:	e0 2d       	mov	r30, r0
     dc6:	80 81       	ld	r24, Z
     dc8:	48 2f       	mov	r20, r24
     dca:	8a 81       	ldd	r24, Y+2	; 0x02
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	02 2e       	mov	r0, r18
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <DIO_INIT+0x1ac>
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	0a 94       	dec	r0
     dde:	e2 f7       	brpl	.-8      	; 0xdd8 <DIO_INIT+0x1a8>
     de0:	84 2b       	or	r24, r20
     de2:	8c 93       	st	X, r24
     de4:	5b c0       	rjmp	.+182    	; 0xe9c <DIO_INIT+0x26c>
			break;
		case INPUT_FLOATING:
			CLR_BIT(*reg[PortState],PinValue);
     de6:	89 81       	ldd	r24, Y+1	; 0x01
     de8:	88 2f       	mov	r24, r24
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	9c 01       	movw	r18, r24
     dee:	22 0f       	add	r18, r18
     df0:	33 1f       	adc	r19, r19
     df2:	ce 01       	movw	r24, r28
     df4:	01 96       	adiw	r24, 0x01	; 1
     df6:	82 0f       	add	r24, r18
     df8:	93 1f       	adc	r25, r19
     dfa:	fc 01       	movw	r30, r24
     dfc:	33 96       	adiw	r30, 0x03	; 3
     dfe:	a0 81       	ld	r26, Z
     e00:	b1 81       	ldd	r27, Z+1	; 0x01
     e02:	89 81       	ldd	r24, Y+1	; 0x01
     e04:	88 2f       	mov	r24, r24
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	9c 01       	movw	r18, r24
     e0a:	22 0f       	add	r18, r18
     e0c:	33 1f       	adc	r19, r19
     e0e:	ce 01       	movw	r24, r28
     e10:	01 96       	adiw	r24, 0x01	; 1
     e12:	82 0f       	add	r24, r18
     e14:	93 1f       	adc	r25, r19
     e16:	fc 01       	movw	r30, r24
     e18:	33 96       	adiw	r30, 0x03	; 3
     e1a:	01 90       	ld	r0, Z+
     e1c:	f0 81       	ld	r31, Z
     e1e:	e0 2d       	mov	r30, r0
     e20:	80 81       	ld	r24, Z
     e22:	48 2f       	mov	r20, r24
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	28 2f       	mov	r18, r24
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <DIO_INIT+0x204>
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	2a 95       	dec	r18
     e36:	e2 f7       	brpl	.-8      	; 0xe30 <DIO_INIT+0x200>
     e38:	80 95       	com	r24
     e3a:	84 23       	and	r24, r20
     e3c:	8c 93       	st	X, r24
			CLR_BIT(*reg[PortState+4],PinValue);
     e3e:	89 81       	ldd	r24, Y+1	; 0x01
     e40:	88 2f       	mov	r24, r24
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	04 96       	adiw	r24, 0x04	; 4
     e46:	9c 01       	movw	r18, r24
     e48:	22 0f       	add	r18, r18
     e4a:	33 1f       	adc	r19, r19
     e4c:	ce 01       	movw	r24, r28
     e4e:	01 96       	adiw	r24, 0x01	; 1
     e50:	82 0f       	add	r24, r18
     e52:	93 1f       	adc	r25, r19
     e54:	fc 01       	movw	r30, r24
     e56:	33 96       	adiw	r30, 0x03	; 3
     e58:	a0 81       	ld	r26, Z
     e5a:	b1 81       	ldd	r27, Z+1	; 0x01
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
     e5e:	88 2f       	mov	r24, r24
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	04 96       	adiw	r24, 0x04	; 4
     e64:	9c 01       	movw	r18, r24
     e66:	22 0f       	add	r18, r18
     e68:	33 1f       	adc	r19, r19
     e6a:	ce 01       	movw	r24, r28
     e6c:	01 96       	adiw	r24, 0x01	; 1
     e6e:	82 0f       	add	r24, r18
     e70:	93 1f       	adc	r25, r19
     e72:	fc 01       	movw	r30, r24
     e74:	33 96       	adiw	r30, 0x03	; 3
     e76:	01 90       	ld	r0, Z+
     e78:	f0 81       	ld	r31, Z
     e7a:	e0 2d       	mov	r30, r0
     e7c:	80 81       	ld	r24, Z
     e7e:	48 2f       	mov	r20, r24
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	28 2f       	mov	r18, r24
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	02 2e       	mov	r0, r18
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <DIO_INIT+0x262>
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	0a 94       	dec	r0
     e94:	e2 f7       	brpl	.-8      	; 0xe8e <DIO_INIT+0x25e>
     e96:	80 95       	com	r24
     e98:	84 23       	and	r24, r20
     e9a:	8c 93       	st	X, r24

void DIO_INIT(void) {
	uint8 i,PinValue,PortState;
	uint8* reg[8]={DDRA_ADDRESS,DDRB_ADDRESS,DDRC_ADDRESS,DDRD_ADDRESS,
			PORTA_ADDRESS,PORTB_ADDRESS,PORTC_ADDRESS,PORTD_ADDRESS};
	for(i=0;i<PIN_LIMIT;i++){
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	8f 5f       	subi	r24, 0xFF	; 255
     ea0:	8b 83       	std	Y+3, r24	; 0x03
     ea2:	8b 81       	ldd	r24, Y+3	; 0x03
     ea4:	80 32       	cpi	r24, 0x20	; 32
     ea6:	08 f4       	brcc	.+2      	; 0xeaa <DIO_INIT+0x27a>
     ea8:	f2 ce       	rjmp	.-540    	; 0xc8e <DIO_INIT+0x5e>
			CLR_BIT(*reg[PortState+4],PinValue);
			break;
		}

	}
}
     eaa:	6a 96       	adiw	r28, 0x1a	; 26
     eac:	0f b6       	in	r0, 0x3f	; 63
     eae:	f8 94       	cli
     eb0:	de bf       	out	0x3e, r29	; 62
     eb2:	0f be       	out	0x3f, r0	; 63
     eb4:	cd bf       	out	0x3d, r28	; 61
     eb6:	cf 91       	pop	r28
     eb8:	df 91       	pop	r29
     eba:	08 95       	ret

00000ebc <DIO_WRITECHANNEL>:

void DIO_WRITECHANNEL(uint8 CHANNEL,uint8 VALUE){
     ebc:	df 93       	push	r29
     ebe:	cf 93       	push	r28
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
     ec4:	63 97       	sbiw	r28, 0x13	; 19
     ec6:	0f b6       	in	r0, 0x3f	; 63
     ec8:	f8 94       	cli
     eca:	de bf       	out	0x3e, r29	; 62
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	cd bf       	out	0x3d, r28	; 61
     ed0:	8b 87       	std	Y+11, r24	; 0x0b
     ed2:	6c 87       	std	Y+12, r22	; 0x0c
	uint8 PinValue,PortState;
	uint8* reg[4]={PORTA_ADDRESS,PORTB_ADDRESS,PORTC_ADDRESS,PORTD_ADDRESS};
     ed4:	9e 01       	movw	r18, r28
     ed6:	2d 5f       	subi	r18, 0xFD	; 253
     ed8:	3f 4f       	sbci	r19, 0xFF	; 255
     eda:	38 8b       	std	Y+16, r19	; 0x10
     edc:	2f 87       	std	Y+15, r18	; 0x0f
     ede:	82 eb       	ldi	r24, 0xB2	; 178
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	9a 8b       	std	Y+18, r25	; 0x12
     ee4:	89 8b       	std	Y+17, r24	; 0x11
     ee6:	98 e0       	ldi	r25, 0x08	; 8
     ee8:	9b 8b       	std	Y+19, r25	; 0x13
     eea:	e9 89       	ldd	r30, Y+17	; 0x11
     eec:	fa 89       	ldd	r31, Y+18	; 0x12
     eee:	00 80       	ld	r0, Z
     ef0:	29 89       	ldd	r18, Y+17	; 0x11
     ef2:	3a 89       	ldd	r19, Y+18	; 0x12
     ef4:	2f 5f       	subi	r18, 0xFF	; 255
     ef6:	3f 4f       	sbci	r19, 0xFF	; 255
     ef8:	3a 8b       	std	Y+18, r19	; 0x12
     efa:	29 8b       	std	Y+17, r18	; 0x11
     efc:	ef 85       	ldd	r30, Y+15	; 0x0f
     efe:	f8 89       	ldd	r31, Y+16	; 0x10
     f00:	00 82       	st	Z, r0
     f02:	2f 85       	ldd	r18, Y+15	; 0x0f
     f04:	38 89       	ldd	r19, Y+16	; 0x10
     f06:	2f 5f       	subi	r18, 0xFF	; 255
     f08:	3f 4f       	sbci	r19, 0xFF	; 255
     f0a:	38 8b       	std	Y+16, r19	; 0x10
     f0c:	2f 87       	std	Y+15, r18	; 0x0f
     f0e:	3b 89       	ldd	r19, Y+19	; 0x13
     f10:	31 50       	subi	r19, 0x01	; 1
     f12:	3b 8b       	std	Y+19, r19	; 0x13
     f14:	8b 89       	ldd	r24, Y+19	; 0x13
     f16:	88 23       	and	r24, r24
     f18:	41 f7       	brne	.-48     	; 0xeea <DIO_WRITECHANNEL+0x2e>
		PinValue=CHANNEL%8;
     f1a:	8b 85       	ldd	r24, Y+11	; 0x0b
     f1c:	87 70       	andi	r24, 0x07	; 7
     f1e:	8a 83       	std	Y+2, r24	; 0x02
		PortState=CHANNEL/8;
     f20:	8b 85       	ldd	r24, Y+11	; 0x0b
     f22:	86 95       	lsr	r24
     f24:	86 95       	lsr	r24
     f26:	86 95       	lsr	r24
     f28:	89 83       	std	Y+1, r24	; 0x01
		switch(VALUE){
     f2a:	8c 85       	ldd	r24, Y+12	; 0x0c
     f2c:	e8 2f       	mov	r30, r24
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	fe 87       	std	Y+14, r31	; 0x0e
     f32:	ed 87       	std	Y+13, r30	; 0x0d
     f34:	2d 85       	ldd	r18, Y+13	; 0x0d
     f36:	3e 85       	ldd	r19, Y+14	; 0x0e
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	31 f0       	breq	.+12     	; 0xf4a <DIO_WRITECHANNEL+0x8e>
     f3e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f40:	9e 85       	ldd	r25, Y+14	; 0x0e
     f42:	81 30       	cpi	r24, 0x01	; 1
     f44:	91 05       	cpc	r25, r1
     f46:	79 f1       	breq	.+94     	; 0xfa6 <DIO_WRITECHANNEL+0xea>
     f48:	5a c0       	rjmp	.+180    	; 0xffe <DIO_WRITECHANNEL+0x142>
		case LOW:
			CLR_BIT(*reg[PortState],PinValue);
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
     f4c:	88 2f       	mov	r24, r24
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	9c 01       	movw	r18, r24
     f52:	22 0f       	add	r18, r18
     f54:	33 1f       	adc	r19, r19
     f56:	ce 01       	movw	r24, r28
     f58:	01 96       	adiw	r24, 0x01	; 1
     f5a:	82 0f       	add	r24, r18
     f5c:	93 1f       	adc	r25, r19
     f5e:	fc 01       	movw	r30, r24
     f60:	32 96       	adiw	r30, 0x02	; 2
     f62:	a0 81       	ld	r26, Z
     f64:	b1 81       	ldd	r27, Z+1	; 0x01
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	88 2f       	mov	r24, r24
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	9c 01       	movw	r18, r24
     f6e:	22 0f       	add	r18, r18
     f70:	33 1f       	adc	r19, r19
     f72:	ce 01       	movw	r24, r28
     f74:	01 96       	adiw	r24, 0x01	; 1
     f76:	82 0f       	add	r24, r18
     f78:	93 1f       	adc	r25, r19
     f7a:	fc 01       	movw	r30, r24
     f7c:	32 96       	adiw	r30, 0x02	; 2
     f7e:	01 90       	ld	r0, Z+
     f80:	f0 81       	ld	r31, Z
     f82:	e0 2d       	mov	r30, r0
     f84:	80 81       	ld	r24, Z
     f86:	48 2f       	mov	r20, r24
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	02 2e       	mov	r0, r18
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <DIO_WRITECHANNEL+0xde>
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	0a 94       	dec	r0
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <DIO_WRITECHANNEL+0xda>
     f9e:	80 95       	com	r24
     fa0:	84 23       	and	r24, r20
     fa2:	8c 93       	st	X, r24
     fa4:	2c c0       	rjmp	.+88     	; 0xffe <DIO_WRITECHANNEL+0x142>
			break;
		case HIGH:
			SET_BIT(*reg[PortState],PinValue);
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	88 2f       	mov	r24, r24
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	9c 01       	movw	r18, r24
     fae:	22 0f       	add	r18, r18
     fb0:	33 1f       	adc	r19, r19
     fb2:	ce 01       	movw	r24, r28
     fb4:	01 96       	adiw	r24, 0x01	; 1
     fb6:	82 0f       	add	r24, r18
     fb8:	93 1f       	adc	r25, r19
     fba:	fc 01       	movw	r30, r24
     fbc:	32 96       	adiw	r30, 0x02	; 2
     fbe:	a0 81       	ld	r26, Z
     fc0:	b1 81       	ldd	r27, Z+1	; 0x01
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	9c 01       	movw	r18, r24
     fca:	22 0f       	add	r18, r18
     fcc:	33 1f       	adc	r19, r19
     fce:	ce 01       	movw	r24, r28
     fd0:	01 96       	adiw	r24, 0x01	; 1
     fd2:	82 0f       	add	r24, r18
     fd4:	93 1f       	adc	r25, r19
     fd6:	fc 01       	movw	r30, r24
     fd8:	32 96       	adiw	r30, 0x02	; 2
     fda:	01 90       	ld	r0, Z+
     fdc:	f0 81       	ld	r31, Z
     fde:	e0 2d       	mov	r30, r0
     fe0:	80 81       	ld	r24, Z
     fe2:	48 2f       	mov	r20, r24
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	02 2e       	mov	r0, r18
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <DIO_WRITECHANNEL+0x13a>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	0a 94       	dec	r0
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <DIO_WRITECHANNEL+0x136>
     ffa:	84 2b       	or	r24, r20
     ffc:	8c 93       	st	X, r24
			break;
		}



}
     ffe:	63 96       	adiw	r28, 0x13	; 19
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	f8 94       	cli
    1004:	de bf       	out	0x3e, r29	; 62
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	cd bf       	out	0x3d, r28	; 61
    100a:	cf 91       	pop	r28
    100c:	df 91       	pop	r29
    100e:	08 95       	ret

00001010 <DIO_WRITEPORT>:

void DIO_WRITEPORT(uint8 PORT, uint8 VALUE) {
    1010:	df 93       	push	r29
    1012:	cf 93       	push	r28
    1014:	00 d0       	rcall	.+0      	; 0x1016 <DIO_WRITEPORT+0x6>
    1016:	00 d0       	rcall	.+0      	; 0x1018 <DIO_WRITEPORT+0x8>
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
    101c:	89 83       	std	Y+1, r24	; 0x01
    101e:	6a 83       	std	Y+2, r22	; 0x02

	switch (PORT) {
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	3c 83       	std	Y+4, r19	; 0x04
    1028:	2b 83       	std	Y+3, r18	; 0x03
    102a:	8b 81       	ldd	r24, Y+3	; 0x03
    102c:	9c 81       	ldd	r25, Y+4	; 0x04
    102e:	81 30       	cpi	r24, 0x01	; 1
    1030:	91 05       	cpc	r25, r1
    1032:	d1 f0       	breq	.+52     	; 0x1068 <DIO_WRITEPORT+0x58>
    1034:	2b 81       	ldd	r18, Y+3	; 0x03
    1036:	3c 81       	ldd	r19, Y+4	; 0x04
    1038:	22 30       	cpi	r18, 0x02	; 2
    103a:	31 05       	cpc	r19, r1
    103c:	2c f4       	brge	.+10     	; 0x1048 <DIO_WRITEPORT+0x38>
    103e:	8b 81       	ldd	r24, Y+3	; 0x03
    1040:	9c 81       	ldd	r25, Y+4	; 0x04
    1042:	00 97       	sbiw	r24, 0x00	; 0
    1044:	61 f0       	breq	.+24     	; 0x105e <DIO_WRITEPORT+0x4e>
    1046:	1e c0       	rjmp	.+60     	; 0x1084 <DIO_WRITEPORT+0x74>
    1048:	2b 81       	ldd	r18, Y+3	; 0x03
    104a:	3c 81       	ldd	r19, Y+4	; 0x04
    104c:	22 30       	cpi	r18, 0x02	; 2
    104e:	31 05       	cpc	r19, r1
    1050:	81 f0       	breq	.+32     	; 0x1072 <DIO_WRITEPORT+0x62>
    1052:	8b 81       	ldd	r24, Y+3	; 0x03
    1054:	9c 81       	ldd	r25, Y+4	; 0x04
    1056:	83 30       	cpi	r24, 0x03	; 3
    1058:	91 05       	cpc	r25, r1
    105a:	81 f0       	breq	.+32     	; 0x107c <DIO_WRITEPORT+0x6c>
    105c:	13 c0       	rjmp	.+38     	; 0x1084 <DIO_WRITEPORT+0x74>
	case PORT_A:
		PORTA = VALUE;
    105e:	eb e3       	ldi	r30, 0x3B	; 59
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	80 83       	st	Z, r24
    1066:	0e c0       	rjmp	.+28     	; 0x1084 <DIO_WRITEPORT+0x74>
		break;
	case PORT_B:
		PORTB = VALUE;
    1068:	e8 e3       	ldi	r30, 0x38	; 56
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	80 83       	st	Z, r24
    1070:	09 c0       	rjmp	.+18     	; 0x1084 <DIO_WRITEPORT+0x74>
		break;
	case PORT_C:
		PORTC = VALUE;
    1072:	e5 e3       	ldi	r30, 0x35	; 53
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	80 83       	st	Z, r24
    107a:	04 c0       	rjmp	.+8      	; 0x1084 <DIO_WRITEPORT+0x74>
		break;
	case PORT_D:
		PORTD = VALUE;
    107c:	e2 e3       	ldi	r30, 0x32	; 50
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	80 83       	st	Z, r24
		break;
	}
}
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	cf 91       	pop	r28
    108e:	df 91       	pop	r29
    1090:	08 95       	ret

00001092 <DIO_READCHANNEL>:


uint8 DIO_READCHANNEL(uint8 CHANNEL) {
    1092:	df 93       	push	r29
    1094:	cf 93       	push	r28
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
    109a:	61 97       	sbiw	r28, 0x11	; 17
    109c:	0f b6       	in	r0, 0x3f	; 63
    109e:	f8 94       	cli
    10a0:	de bf       	out	0x3e, r29	; 62
    10a2:	0f be       	out	0x3f, r0	; 63
    10a4:	cd bf       	out	0x3d, r28	; 61
    10a6:	8c 87       	std	Y+12, r24	; 0x0c
	uint8 PinValue,PortState,value=0;
    10a8:	19 82       	std	Y+1, r1	; 0x01
		uint8* reg[4]={PINA_ADDRESS,PINB_ADDRESS,PINC_ADDRESS,PIND_ADDRESS};
    10aa:	ae 01       	movw	r20, r28
    10ac:	4c 5f       	subi	r20, 0xFC	; 252
    10ae:	5f 4f       	sbci	r21, 0xFF	; 255
    10b0:	5e 87       	std	Y+14, r21	; 0x0e
    10b2:	4d 87       	std	Y+13, r20	; 0x0d
    10b4:	8a eb       	ldi	r24, 0xBA	; 186
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	98 8b       	std	Y+16, r25	; 0x10
    10ba:	8f 87       	std	Y+15, r24	; 0x0f
    10bc:	98 e0       	ldi	r25, 0x08	; 8
    10be:	99 8b       	std	Y+17, r25	; 0x11
    10c0:	ef 85       	ldd	r30, Y+15	; 0x0f
    10c2:	f8 89       	ldd	r31, Y+16	; 0x10
    10c4:	00 80       	ld	r0, Z
    10c6:	4f 85       	ldd	r20, Y+15	; 0x0f
    10c8:	58 89       	ldd	r21, Y+16	; 0x10
    10ca:	4f 5f       	subi	r20, 0xFF	; 255
    10cc:	5f 4f       	sbci	r21, 0xFF	; 255
    10ce:	58 8b       	std	Y+16, r21	; 0x10
    10d0:	4f 87       	std	Y+15, r20	; 0x0f
    10d2:	ed 85       	ldd	r30, Y+13	; 0x0d
    10d4:	fe 85       	ldd	r31, Y+14	; 0x0e
    10d6:	00 82       	st	Z, r0
    10d8:	4d 85       	ldd	r20, Y+13	; 0x0d
    10da:	5e 85       	ldd	r21, Y+14	; 0x0e
    10dc:	4f 5f       	subi	r20, 0xFF	; 255
    10de:	5f 4f       	sbci	r21, 0xFF	; 255
    10e0:	5e 87       	std	Y+14, r21	; 0x0e
    10e2:	4d 87       	std	Y+13, r20	; 0x0d
    10e4:	59 89       	ldd	r21, Y+17	; 0x11
    10e6:	51 50       	subi	r21, 0x01	; 1
    10e8:	59 8b       	std	Y+17, r21	; 0x11
    10ea:	89 89       	ldd	r24, Y+17	; 0x11
    10ec:	88 23       	and	r24, r24
    10ee:	41 f7       	brne	.-48     	; 0x10c0 <DIO_READCHANNEL+0x2e>
			PinValue=CHANNEL%8;
    10f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    10f2:	87 70       	andi	r24, 0x07	; 7
    10f4:	8b 83       	std	Y+3, r24	; 0x03
			PortState=CHANNEL/8;
    10f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    10f8:	86 95       	lsr	r24
    10fa:	86 95       	lsr	r24
    10fc:	86 95       	lsr	r24
    10fe:	8a 83       	std	Y+2, r24	; 0x02
			value=GET_BIT(*reg[PortState],PinValue);
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	88 2f       	mov	r24, r24
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	9c 01       	movw	r18, r24
    1108:	22 0f       	add	r18, r18
    110a:	33 1f       	adc	r19, r19
    110c:	ce 01       	movw	r24, r28
    110e:	01 96       	adiw	r24, 0x01	; 1
    1110:	82 0f       	add	r24, r18
    1112:	93 1f       	adc	r25, r19
    1114:	fc 01       	movw	r30, r24
    1116:	33 96       	adiw	r30, 0x03	; 3
    1118:	01 90       	ld	r0, Z+
    111a:	f0 81       	ld	r31, Z
    111c:	e0 2d       	mov	r30, r0
    111e:	80 81       	ld	r24, Z
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	8b 81       	ldd	r24, Y+3	; 0x03
    1126:	88 2f       	mov	r24, r24
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	f9 01       	movw	r30, r18
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <DIO_READCHANNEL+0xa0>
    112e:	f5 95       	asr	r31
    1130:	e7 95       	ror	r30
    1132:	8a 95       	dec	r24
    1134:	e2 f7       	brpl	.-8      	; 0x112e <DIO_READCHANNEL+0x9c>
    1136:	cf 01       	movw	r24, r30
    1138:	81 70       	andi	r24, 0x01	; 1
    113a:	89 83       	std	Y+1, r24	; 0x01
	return value;
    113c:	89 81       	ldd	r24, Y+1	; 0x01
}
    113e:	61 96       	adiw	r28, 0x11	; 17
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	f8 94       	cli
    1144:	de bf       	out	0x3e, r29	; 62
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	cd bf       	out	0x3d, r28	; 61
    114a:	cf 91       	pop	r28
    114c:	df 91       	pop	r29
    114e:	08 95       	ret

00001150 <DIO_READPORT>:

uint8 DIO_READPORT(uint8 PORT) {
    1150:	df 93       	push	r29
    1152:	cf 93       	push	r28
    1154:	00 d0       	rcall	.+0      	; 0x1156 <DIO_READPORT+0x6>
    1156:	00 d0       	rcall	.+0      	; 0x1158 <DIO_READPORT+0x8>
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = 0;
    115e:	19 82       	std	Y+1, r1	; 0x01
	switch (PORT) {
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	3c 83       	std	Y+4, r19	; 0x04
    1168:	2b 83       	std	Y+3, r18	; 0x03
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	9c 81       	ldd	r25, Y+4	; 0x04
    116e:	81 30       	cpi	r24, 0x01	; 1
    1170:	91 05       	cpc	r25, r1
    1172:	d1 f0       	breq	.+52     	; 0x11a8 <DIO_READPORT+0x58>
    1174:	2b 81       	ldd	r18, Y+3	; 0x03
    1176:	3c 81       	ldd	r19, Y+4	; 0x04
    1178:	22 30       	cpi	r18, 0x02	; 2
    117a:	31 05       	cpc	r19, r1
    117c:	2c f4       	brge	.+10     	; 0x1188 <DIO_READPORT+0x38>
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	9c 81       	ldd	r25, Y+4	; 0x04
    1182:	00 97       	sbiw	r24, 0x00	; 0
    1184:	61 f0       	breq	.+24     	; 0x119e <DIO_READPORT+0x4e>
    1186:	1e c0       	rjmp	.+60     	; 0x11c4 <DIO_READPORT+0x74>
    1188:	2b 81       	ldd	r18, Y+3	; 0x03
    118a:	3c 81       	ldd	r19, Y+4	; 0x04
    118c:	22 30       	cpi	r18, 0x02	; 2
    118e:	31 05       	cpc	r19, r1
    1190:	81 f0       	breq	.+32     	; 0x11b2 <DIO_READPORT+0x62>
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	9c 81       	ldd	r25, Y+4	; 0x04
    1196:	83 30       	cpi	r24, 0x03	; 3
    1198:	91 05       	cpc	r25, r1
    119a:	81 f0       	breq	.+32     	; 0x11bc <DIO_READPORT+0x6c>
    119c:	13 c0       	rjmp	.+38     	; 0x11c4 <DIO_READPORT+0x74>
	case PORT_A:
		value = PINA;
    119e:	e9 e3       	ldi	r30, 0x39	; 57
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	89 83       	std	Y+1, r24	; 0x01
    11a6:	0e c0       	rjmp	.+28     	; 0x11c4 <DIO_READPORT+0x74>
		break;
	case PORT_B:
		value = PINB;
    11a8:	e6 e3       	ldi	r30, 0x36	; 54
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	89 83       	std	Y+1, r24	; 0x01
    11b0:	09 c0       	rjmp	.+18     	; 0x11c4 <DIO_READPORT+0x74>
		break;
	case PORT_C:
		value = PINC;
    11b2:	e3 e3       	ldi	r30, 0x33	; 51
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	89 83       	std	Y+1, r24	; 0x01
    11ba:	04 c0       	rjmp	.+8      	; 0x11c4 <DIO_READPORT+0x74>
		break;
	case PORT_D:
		value = PIND;
    11bc:	e0 e3       	ldi	r30, 0x30	; 48
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return value;
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	cf 91       	pop	r28
    11d0:	df 91       	pop	r29
    11d2:	08 95       	ret

000011d4 <EXIT_INIT>:
#include "BIT_MATH.h"
#include "MEMMAP.h"
#include "DIO.h"
#include "EXT_INT.h"

void EXIT_INIT(uint8 EDGE) {
    11d4:	df 93       	push	r29
    11d6:	cf 93       	push	r28
    11d8:	0f 92       	push	r0
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
    11de:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(GICR, 7);
    11e0:	ab e5       	ldi	r26, 0x5B	; 91
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	eb e5       	ldi	r30, 0x5B	; 91
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	80 68       	ori	r24, 0x80	; 128
    11ec:	8c 93       	st	X, r24
	SET_BIT(GICR, 6);
    11ee:	ab e5       	ldi	r26, 0x5B	; 91
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	eb e5       	ldi	r30, 0x5B	; 91
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	80 64       	ori	r24, 0x40	; 64
    11fa:	8c 93       	st	X, r24
	if (EDGE == FALLING_EDGE) {
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	88 23       	and	r24, r24
    1200:	e9 f4       	brne	.+58     	; 0x123c <EXIT_INIT+0x68>
		CLR_BIT(MCUCR, 0);
    1202:	a5 e5       	ldi	r26, 0x55	; 85
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e5 e5       	ldi	r30, 0x55	; 85
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	8e 7f       	andi	r24, 0xFE	; 254
    120e:	8c 93       	st	X, r24
		SET_BIT(MCUCR, 1);
    1210:	a5 e5       	ldi	r26, 0x55	; 85
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	e5 e5       	ldi	r30, 0x55	; 85
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	82 60       	ori	r24, 0x02	; 2
    121c:	8c 93       	st	X, r24
		CLR_BIT(MCUCR, 2);
    121e:	a5 e5       	ldi	r26, 0x55	; 85
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	e5 e5       	ldi	r30, 0x55	; 85
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	8b 7f       	andi	r24, 0xFB	; 251
    122a:	8c 93       	st	X, r24
		SET_BIT(MCUCR, 3);
    122c:	a5 e5       	ldi	r26, 0x55	; 85
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	e5 e5       	ldi	r30, 0x55	; 85
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	88 60       	ori	r24, 0x08	; 8
    1238:	8c 93       	st	X, r24
    123a:	1f c0       	rjmp	.+62     	; 0x127a <EXIT_INIT+0xa6>
	} else if (EDGE == RISING_EDGE) {
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	81 30       	cpi	r24, 0x01	; 1
    1240:	e1 f4       	brne	.+56     	; 0x127a <EXIT_INIT+0xa6>
		SET_BIT(MCUCR, 0);
    1242:	a5 e5       	ldi	r26, 0x55	; 85
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	e5 e5       	ldi	r30, 0x55	; 85
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	81 60       	ori	r24, 0x01	; 1
    124e:	8c 93       	st	X, r24
		SET_BIT(MCUCR, 1);
    1250:	a5 e5       	ldi	r26, 0x55	; 85
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	e5 e5       	ldi	r30, 0x55	; 85
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	82 60       	ori	r24, 0x02	; 2
    125c:	8c 93       	st	X, r24
		SET_BIT(MCUCR, 2);
    125e:	a5 e5       	ldi	r26, 0x55	; 85
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e5 e5       	ldi	r30, 0x55	; 85
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	84 60       	ori	r24, 0x04	; 4
    126a:	8c 93       	st	X, r24
		SET_BIT(MCUCR, 3);
    126c:	a5 e5       	ldi	r26, 0x55	; 85
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	e5 e5       	ldi	r30, 0x55	; 85
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	88 60       	ori	r24, 0x08	; 8
    1278:	8c 93       	st	X, r24
	}
	SET_BIT(SREG, 7);
    127a:	af e5       	ldi	r26, 0x5F	; 95
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	ef e5       	ldi	r30, 0x5F	; 95
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	80 68       	ori	r24, 0x80	; 128
    1286:	8c 93       	st	X, r24
}
    1288:	0f 90       	pop	r0
    128a:	cf 91       	pop	r28
    128c:	df 91       	pop	r29
    128e:	08 95       	ret

00001290 <EXIT_DEINIT>:
void EXIT_DEINIT(void) {
    1290:	df 93       	push	r29
    1292:	cf 93       	push	r28
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, 7);
    1298:	af e5       	ldi	r26, 0x5F	; 95
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	ef e5       	ldi	r30, 0x5F	; 95
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	8f 77       	andi	r24, 0x7F	; 127
    12a4:	8c 93       	st	X, r24
	CLR_BIT(GICR, 7);
    12a6:	ab e5       	ldi	r26, 0x5B	; 91
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	eb e5       	ldi	r30, 0x5B	; 91
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	8f 77       	andi	r24, 0x7F	; 127
    12b2:	8c 93       	st	X, r24
	CLR_BIT(GICR, 6);
    12b4:	ab e5       	ldi	r26, 0x5B	; 91
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	eb e5       	ldi	r30, 0x5B	; 91
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	8f 7b       	andi	r24, 0xBF	; 191
    12c0:	8c 93       	st	X, r24
}
    12c2:	cf 91       	pop	r28
    12c4:	df 91       	pop	r29
    12c6:	08 95       	ret

000012c8 <SPI_INIT_MASTER>:
#include "BIT_MATH.h"
#include "MEMMAP.h"
#include "DIO.h"
#include "SPI.h"

void SPI_INIT_MASTER(void) {
    12c8:	df 93       	push	r29
    12ca:	cf 93       	push	r28
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62

	/*choose prescaler*/
	SET_BIT(SPCR, 0);
    12d0:	ad e2       	ldi	r26, 0x2D	; 45
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	ed e2       	ldi	r30, 0x2D	; 45
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	81 60       	ori	r24, 0x01	; 1
    12dc:	8c 93       	st	X, r24
	CLR_BIT(SPCR, 1);
    12de:	ad e2       	ldi	r26, 0x2D	; 45
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	ed e2       	ldi	r30, 0x2D	; 45
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	8d 7f       	andi	r24, 0xFD	; 253
    12ea:	8c 93       	st	X, r24
	SET_BIT(SPSR, 0);
    12ec:	ae e2       	ldi	r26, 0x2E	; 46
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	ee e2       	ldi	r30, 0x2E	; 46
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	81 60       	ori	r24, 0x01	; 1
    12f8:	8c 93       	st	X, r24

	/*CHOOSE LSB */
	SET_BIT(SPCR, 5);
    12fa:	ad e2       	ldi	r26, 0x2D	; 45
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	ed e2       	ldi	r30, 0x2D	; 45
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	80 62       	ori	r24, 0x20	; 32
    1306:	8c 93       	st	X, r24
	/*choose polarity*/
	CLR_BIT(SPCR, 3);
    1308:	ad e2       	ldi	r26, 0x2D	; 45
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	ed e2       	ldi	r30, 0x2D	; 45
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	87 7f       	andi	r24, 0xF7	; 247
    1314:	8c 93       	st	X, r24
	/*choose PHASE*/

	CLR_BIT(SPCR, 2);
    1316:	ad e2       	ldi	r26, 0x2D	; 45
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	ed e2       	ldi	r30, 0x2D	; 45
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	8b 7f       	andi	r24, 0xFB	; 251
    1322:	8c 93       	st	X, r24

	/* ENABLE MASTER*/
	SET_BIT(SPCR, 4);
    1324:	ad e2       	ldi	r26, 0x2D	; 45
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	ed e2       	ldi	r30, 0x2D	; 45
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	80 61       	ori	r24, 0x10	; 16
    1330:	8c 93       	st	X, r24
	/*ENABLE SPI*/
	SET_BIT(SPCR, 6);
    1332:	ad e2       	ldi	r26, 0x2D	; 45
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	ed e2       	ldi	r30, 0x2D	; 45
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	80 64       	ori	r24, 0x40	; 64
    133e:	8c 93       	st	X, r24

}
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	08 95       	ret

00001346 <SPI_INIT_SLAVE>:
void SPI_INIT_SLAVE(void) {
    1346:	df 93       	push	r29
    1348:	cf 93       	push	r28
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62

	/*choose prescaler*/
	SET_BIT(SPCR, 0);
    134e:	ad e2       	ldi	r26, 0x2D	; 45
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	ed e2       	ldi	r30, 0x2D	; 45
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	81 60       	ori	r24, 0x01	; 1
    135a:	8c 93       	st	X, r24
	CLR_BIT(SPCR, 1);
    135c:	ad e2       	ldi	r26, 0x2D	; 45
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	ed e2       	ldi	r30, 0x2D	; 45
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	8d 7f       	andi	r24, 0xFD	; 253
    1368:	8c 93       	st	X, r24
	SET_BIT(SPSR, 0);
    136a:	ae e2       	ldi	r26, 0x2E	; 46
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	ee e2       	ldi	r30, 0x2E	; 46
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	81 60       	ori	r24, 0x01	; 1
    1376:	8c 93       	st	X, r24

	/*CHOOSE LSB */
	SET_BIT(SPCR, 5);
    1378:	ad e2       	ldi	r26, 0x2D	; 45
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	ed e2       	ldi	r30, 0x2D	; 45
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	80 62       	ori	r24, 0x20	; 32
    1384:	8c 93       	st	X, r24
	/*choose polarity*/
	CLR_BIT(SPCR, 3);
    1386:	ad e2       	ldi	r26, 0x2D	; 45
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	ed e2       	ldi	r30, 0x2D	; 45
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	87 7f       	andi	r24, 0xF7	; 247
    1392:	8c 93       	st	X, r24
	/*choose PHASE*/

	CLR_BIT(SPCR, 2);
    1394:	ad e2       	ldi	r26, 0x2D	; 45
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	ed e2       	ldi	r30, 0x2D	; 45
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	8b 7f       	andi	r24, 0xFB	; 251
    13a0:	8c 93       	st	X, r24

	/* ENABLE SLAVE*/
	CLR_BIT(SPCR, 4);
    13a2:	ad e2       	ldi	r26, 0x2D	; 45
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	ed e2       	ldi	r30, 0x2D	; 45
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	8f 7e       	andi	r24, 0xEF	; 239
    13ae:	8c 93       	st	X, r24
	/*ENABLE SPI*/
	SET_BIT(SPCR, 6);
    13b0:	ad e2       	ldi	r26, 0x2D	; 45
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	ed e2       	ldi	r30, 0x2D	; 45
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	80 64       	ori	r24, 0x40	; 64
    13bc:	8c 93       	st	X, r24

}
    13be:	cf 91       	pop	r28
    13c0:	df 91       	pop	r29
    13c2:	08 95       	ret

000013c4 <SPI_SEND_DATA>:

void SPI_SEND_DATA(uint8 data) {
    13c4:	df 93       	push	r29
    13c6:	cf 93       	push	r28
    13c8:	0f 92       	push	r0
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    13ce:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;
    13d0:	ef e2       	ldi	r30, 0x2F	; 47
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	89 81       	ldd	r24, Y+1	; 0x01
    13d6:	80 83       	st	Z, r24
	while (!(GET_BIT(SPSR, 7)))
    13d8:	ee e2       	ldi	r30, 0x2E	; 46
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	88 23       	and	r24, r24
    13e0:	dc f7       	brge	.-10     	; 0x13d8 <SPI_SEND_DATA+0x14>
		;
}
    13e2:	0f 90       	pop	r0
    13e4:	cf 91       	pop	r28
    13e6:	df 91       	pop	r29
    13e8:	08 95       	ret

000013ea <SPI_RECIEVE_DATA>:

uint8 SPI_RECIEVE_DATA(void) {
    13ea:	df 93       	push	r29
    13ec:	cf 93       	push	r28
    13ee:	cd b7       	in	r28, 0x3d	; 61
    13f0:	de b7       	in	r29, 0x3e	; 62
	while (!(GET_BIT(SPSR, 7)))
    13f2:	ee e2       	ldi	r30, 0x2E	; 46
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	88 23       	and	r24, r24
    13fa:	dc f7       	brge	.-10     	; 0x13f2 <SPI_RECIEVE_DATA+0x8>
		;
	return SPDR;
    13fc:	ef e2       	ldi	r30, 0x2F	; 47
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z

}
    1402:	cf 91       	pop	r28
    1404:	df 91       	pop	r29
    1406:	08 95       	ret

00001408 <TIMER0_INIT>:
#include "BIT_MATH.h"
#include "MEMMAP.h"
#include "DIO.h"
#include"TIMER.h"

void TIMER0_INIT(void) {
    1408:	df 93       	push	r29
    140a:	cf 93       	push	r28
    140c:	cd b7       	in	r28, 0x3d	; 61
    140e:	de b7       	in	r29, 0x3e	; 62
		//Enable Compare Match INTERRUPT
		SET_BIT(TIMSK, 1);
		//Enable Global Interrupt
		SET_BIT(SREG, 7);
	} else if (T0_MODE == FAST_PWM) {
		SET_BIT(TCCR0, 3);
    1410:	a3 e5       	ldi	r26, 0x53	; 83
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e3 e5       	ldi	r30, 0x53	; 83
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	88 60       	ori	r24, 0x08	; 8
    141c:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 6);
    141e:	a3 e5       	ldi	r26, 0x53	; 83
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	e3 e5       	ldi	r30, 0x53	; 83
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	80 64       	ori	r24, 0x40	; 64
    142a:	8c 93       	st	X, r24
		//Toggle OCR0 (Non_Inverting)
		CLR_BIT(TCCR0, 4);
    142c:	a3 e5       	ldi	r26, 0x53	; 83
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	e3 e5       	ldi	r30, 0x53	; 83
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	8f 7e       	andi	r24, 0xEF	; 239
    1438:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 5);
    143a:	a3 e5       	ldi	r26, 0x53	; 83
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	e3 e5       	ldi	r30, 0x53	; 83
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	80 62       	ori	r24, 0x20	; 32
    1446:	8c 93       	st	X, r24
		//Enable Compare Match INTERRUPT
		SET_BIT(TIMSK, 1);
    1448:	a9 e5       	ldi	r26, 0x59	; 89
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	e9 e5       	ldi	r30, 0x59	; 89
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	82 60       	ori	r24, 0x02	; 2
    1454:	8c 93       	st	X, r24
		//Enable Global Interrupt
		SET_BIT(SREG, 7);
    1456:	af e5       	ldi	r26, 0x5F	; 95
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	ef e5       	ldi	r30, 0x5F	; 95
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	80 68       	ori	r24, 0x80	; 128
    1462:	8c 93       	st	X, r24
	}
	//SET PRESCALER at 1024
	SET_BIT(TCCR0, 0);
    1464:	a3 e5       	ldi	r26, 0x53	; 83
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e3 e5       	ldi	r30, 0x53	; 83
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	81 60       	ori	r24, 0x01	; 1
    1470:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, 1);
    1472:	a3 e5       	ldi	r26, 0x53	; 83
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	e3 e5       	ldi	r30, 0x53	; 83
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	8d 7f       	andi	r24, 0xFD	; 253
    147e:	8c 93       	st	X, r24
	SET_BIT(TCCR0, 2);
    1480:	a3 e5       	ldi	r26, 0x53	; 83
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e3 e5       	ldi	r30, 0x53	; 83
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	84 60       	ori	r24, 0x04	; 4
    148c:	8c 93       	st	X, r24

}
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	08 95       	ret

00001494 <TIMER1_INIT>:

void TIMER1_INIT(void) {
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
	//Select Mode
	if (T1_MODE == NORMAL) {
		CLR_BIT(TCCR1A, 0);
    149c:	af e4       	ldi	r26, 0x4F	; 79
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	ef e4       	ldi	r30, 0x4F	; 79
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	8e 7f       	andi	r24, 0xFE	; 254
    14a8:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, 1);
    14aa:	af e4       	ldi	r26, 0x4F	; 79
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	ef e4       	ldi	r30, 0x4F	; 79
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	8d 7f       	andi	r24, 0xFD	; 253
    14b6:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,3);
    14b8:	ae e4       	ldi	r26, 0x4E	; 78
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	ee e4       	ldi	r30, 0x4E	; 78
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	87 7f       	andi	r24, 0xF7	; 247
    14c4:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,4);
    14c6:	ae e4       	ldi	r26, 0x4E	; 78
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	ee e4       	ldi	r30, 0x4E	; 78
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	8f 7e       	andi	r24, 0xEF	; 239
    14d2:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, 4);
    14d4:	af e4       	ldi	r26, 0x4F	; 79
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	ef e4       	ldi	r30, 0x4F	; 79
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	8f 7e       	andi	r24, 0xEF	; 239
    14e0:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, 5);
    14e2:	af e4       	ldi	r26, 0x4F	; 79
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	ef e4       	ldi	r30, 0x4F	; 79
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	8f 7d       	andi	r24, 0xDF	; 223
    14ee:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, 6);
    14f0:	af e4       	ldi	r26, 0x4F	; 79
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	ef e4       	ldi	r30, 0x4F	; 79
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	8f 7b       	andi	r24, 0xBF	; 191
    14fc:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, 7);
    14fe:	af e4       	ldi	r26, 0x4F	; 79
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	ef e4       	ldi	r30, 0x4F	; 79
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	8f 77       	andi	r24, 0x7F	; 127
    150a:	8c 93       	st	X, r24
		//Enable OVERFLOW INTERRUPT
		SET_BIT(TIMSK, 2);
    150c:	a9 e5       	ldi	r26, 0x59	; 89
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	e9 e5       	ldi	r30, 0x59	; 89
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	84 60       	ori	r24, 0x04	; 4
    1518:	8c 93       	st	X, r24
		//Enable Global Interrupt
		SET_BIT(SREG, 7);
    151a:	af e5       	ldi	r26, 0x5F	; 95
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	ef e5       	ldi	r30, 0x5F	; 95
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	80 68       	ori	r24, 0x80	; 128
    1526:	8c 93       	st	X, r24
	}
	//SET PRESCALER at 1024
	SET_BIT(TCCR1B, 0);
    1528:	ae e4       	ldi	r26, 0x4E	; 78
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	ee e4       	ldi	r30, 0x4E	; 78
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	81 60       	ori	r24, 0x01	; 1
    1534:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, 1);
    1536:	ae e4       	ldi	r26, 0x4E	; 78
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	ee e4       	ldi	r30, 0x4E	; 78
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	8d 7f       	andi	r24, 0xFD	; 253
    1542:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, 2);
    1544:	ae e4       	ldi	r26, 0x4E	; 78
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	ee e4       	ldi	r30, 0x4E	; 78
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	84 60       	ori	r24, 0x04	; 4
    1550:	8c 93       	st	X, r24

}
    1552:	cf 91       	pop	r28
    1554:	df 91       	pop	r29
    1556:	08 95       	ret

00001558 <I2C_MASTER_INIT>:
#include "DIO.h"
#include "LCD.h"
#include "TWI.h"
#include <util/delay.h>

void I2C_MASTER_INIT(void) {
    1558:	df 93       	push	r29
    155a:	cf 93       	push	r28
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
	//Bit Rate (SCL Frequency)
	TWBR = 3;
    1560:	e0 e2       	ldi	r30, 0x20	; 32
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	83 e0       	ldi	r24, 0x03	; 3
    1566:	80 83       	st	Z, r24
	//Prescaler 1
	CLR_BIT(TWSR, 0);
    1568:	a1 e2       	ldi	r26, 0x21	; 33
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	e1 e2       	ldi	r30, 0x21	; 33
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	8e 7f       	andi	r24, 0xFE	; 254
    1574:	8c 93       	st	X, r24
	CLR_BIT(TWSR, 1);
    1576:	a1 e2       	ldi	r26, 0x21	; 33
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e1 e2       	ldi	r30, 0x21	; 33
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	8d 7f       	andi	r24, 0xFD	; 253
    1582:	8c 93       	st	X, r24
	//Enable I2C
	SET_BIT(TWCR, 2);
    1584:	a6 e5       	ldi	r26, 0x56	; 86
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e6 e5       	ldi	r30, 0x56	; 86
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	84 60       	ori	r24, 0x04	; 4
    1590:	8c 93       	st	X, r24
}
    1592:	cf 91       	pop	r28
    1594:	df 91       	pop	r29
    1596:	08 95       	ret

00001598 <I2C_SLAVE_INIT>:

void I2C_SLAVE_INIT(uint8 Slave_Address) {
    1598:	df 93       	push	r29
    159a:	cf 93       	push	r28
    159c:	0f 92       	push	r0
    159e:	cd b7       	in	r28, 0x3d	; 61
    15a0:	de b7       	in	r29, 0x3e	; 62
    15a2:	89 83       	std	Y+1, r24	; 0x01
	//SET slave Address
	TWAR = Slave_Address << 1;
    15a4:	e2 e2       	ldi	r30, 0x22	; 34
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
    15aa:	88 0f       	add	r24, r24
    15ac:	80 83       	st	Z, r24
	CLR_BIT(TWAR, 0);
    15ae:	a2 e2       	ldi	r26, 0x22	; 34
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	e2 e2       	ldi	r30, 0x22	; 34
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	8e 7f       	andi	r24, 0xFE	; 254
    15ba:	8c 93       	st	X, r24
	//Bit Rate (SCL Frequency)
	TWBR = 3;
    15bc:	e0 e2       	ldi	r30, 0x20	; 32
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	83 e0       	ldi	r24, 0x03	; 3
    15c2:	80 83       	st	Z, r24
	//Prescaler zero
	CLR_BIT(TWSR, 0);
    15c4:	a1 e2       	ldi	r26, 0x21	; 33
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e1 e2       	ldi	r30, 0x21	; 33
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	8e 7f       	andi	r24, 0xFE	; 254
    15d0:	8c 93       	st	X, r24
	CLR_BIT(TWSR, 1);
    15d2:	a1 e2       	ldi	r26, 0x21	; 33
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e1 e2       	ldi	r30, 0x21	; 33
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	8d 7f       	andi	r24, 0xFD	; 253
    15de:	8c 93       	st	X, r24
	//Enable Acknowledge
	SET_BIT(TWCR, 6);
    15e0:	a6 e5       	ldi	r26, 0x56	; 86
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	e6 e5       	ldi	r30, 0x56	; 86
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	80 64       	ori	r24, 0x40	; 64
    15ec:	8c 93       	st	X, r24
	//Enable I2C
	SET_BIT(TWCR, 2);
    15ee:	a6 e5       	ldi	r26, 0x56	; 86
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	e6 e5       	ldi	r30, 0x56	; 86
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	84 60       	ori	r24, 0x04	; 4
    15fa:	8c 93       	st	X, r24
	while (!GET_BIT(TWCR, 7))
    15fc:	e6 e5       	ldi	r30, 0x56	; 86
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	88 23       	and	r24, r24
    1604:	dc f7       	brge	.-10     	; 0x15fc <I2C_SLAVE_INIT+0x64>
		;

}
    1606:	0f 90       	pop	r0
    1608:	cf 91       	pop	r28
    160a:	df 91       	pop	r29
    160c:	08 95       	ret

0000160e <I2C_START_CONDITION>:
void I2C_START_CONDITION(uint8 Slave_Address, uint8 R_W) {
    160e:	df 93       	push	r29
    1610:	cf 93       	push	r28
    1612:	00 d0       	rcall	.+0      	; 0x1614 <I2C_START_CONDITION+0x6>
    1614:	cd b7       	in	r28, 0x3d	; 61
    1616:	de b7       	in	r29, 0x3e	; 62
    1618:	89 83       	std	Y+1, r24	; 0x01
    161a:	6a 83       	std	Y+2, r22	; 0x02
	//Enable Start Condition
	SET_BIT(TWCR, 5);
    161c:	a6 e5       	ldi	r26, 0x56	; 86
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	e6 e5       	ldi	r30, 0x56	; 86
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	80 62       	ori	r24, 0x20	; 32
    1628:	8c 93       	st	X, r24
	//Enable I2C
	SET_BIT(TWCR, 2);
    162a:	a6 e5       	ldi	r26, 0x56	; 86
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	e6 e5       	ldi	r30, 0x56	; 86
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	84 60       	ori	r24, 0x04	; 4
    1636:	8c 93       	st	X, r24
	// Clear TWIN Flag
	SET_BIT(TWCR, 7);
    1638:	a6 e5       	ldi	r26, 0x56	; 86
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	e6 e5       	ldi	r30, 0x56	; 86
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	80 68       	ori	r24, 0x80	; 128
    1644:	8c 93       	st	X, r24
	// Wait
	while (!GET_BIT(TWCR, 7))
    1646:	e6 e5       	ldi	r30, 0x56	; 86
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	88 23       	and	r24, r24
    164e:	dc f7       	brge	.-10     	; 0x1646 <I2C_START_CONDITION+0x38>
		;
	//Send Slave Address
	TWDR = (Slave_Address << 1) | R_W;
    1650:	e3 e2       	ldi	r30, 0x23	; 35
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	89 81       	ldd	r24, Y+1	; 0x01
    1656:	88 2f       	mov	r24, r24
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	88 0f       	add	r24, r24
    165c:	99 1f       	adc	r25, r25
    165e:	98 2f       	mov	r25, r24
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	89 2b       	or	r24, r25
    1664:	80 83       	st	Z, r24
	//CLEAR Start Condition
	CLR_BIT(TWCR, 5);
    1666:	a6 e5       	ldi	r26, 0x56	; 86
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	e6 e5       	ldi	r30, 0x56	; 86
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	8f 7d       	andi	r24, 0xDF	; 223
    1672:	8c 93       	st	X, r24
	// Clear TWIN Flag
	SET_BIT(TWCR, 7);
    1674:	a6 e5       	ldi	r26, 0x56	; 86
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	e6 e5       	ldi	r30, 0x56	; 86
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	80 68       	ori	r24, 0x80	; 128
    1680:	8c 93       	st	X, r24
	//Enable I2C
	SET_BIT(TWCR, 2);
    1682:	a6 e5       	ldi	r26, 0x56	; 86
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	e6 e5       	ldi	r30, 0x56	; 86
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	84 60       	ori	r24, 0x04	; 4
    168e:	8c 93       	st	X, r24
	// Wait
	while (!GET_BIT(TWCR, 7))
    1690:	e6 e5       	ldi	r30, 0x56	; 86
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	88 23       	and	r24, r24
    1698:	dc f7       	brge	.-10     	; 0x1690 <I2C_START_CONDITION+0x82>
		;
}
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	cf 91       	pop	r28
    16a0:	df 91       	pop	r29
    16a2:	08 95       	ret

000016a4 <I2C_STOP_CONDITION>:

void I2C_STOP_CONDITION(void) {
    16a4:	df 93       	push	r29
    16a6:	cf 93       	push	r28
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
	//Enable Stop Condition
	SET_BIT(TWCR, 4);
    16ac:	a6 e5       	ldi	r26, 0x56	; 86
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	e6 e5       	ldi	r30, 0x56	; 86
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	80 61       	ori	r24, 0x10	; 16
    16b8:	8c 93       	st	X, r24
	//Enable I2C
	SET_BIT(TWCR, 2);
    16ba:	a6 e5       	ldi	r26, 0x56	; 86
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	e6 e5       	ldi	r30, 0x56	; 86
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	84 60       	ori	r24, 0x04	; 4
    16c6:	8c 93       	st	X, r24
	// Clear TWIN Flag
	SET_BIT(TWCR, 7);
    16c8:	a6 e5       	ldi	r26, 0x56	; 86
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e6 e5       	ldi	r30, 0x56	; 86
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	80 68       	ori	r24, 0x80	; 128
    16d4:	8c 93       	st	X, r24
	// Wait
	//while (!GET_BIT(TWCR, 7))
	;
	//CLEAR Stop Condition
	//CLR_BIT(TWCR, 4);
}
    16d6:	cf 91       	pop	r28
    16d8:	df 91       	pop	r29
    16da:	08 95       	ret

000016dc <I2C_REPEATED_START_CONDITION>:
void I2C_REPEATED_START_CONDITION(uint8 Slave_Address, uint8 R_W) {
    16dc:	df 93       	push	r29
    16de:	cf 93       	push	r28
    16e0:	00 d0       	rcall	.+0      	; 0x16e2 <I2C_REPEATED_START_CONDITION+0x6>
    16e2:	cd b7       	in	r28, 0x3d	; 61
    16e4:	de b7       	in	r29, 0x3e	; 62
    16e6:	89 83       	std	Y+1, r24	; 0x01
    16e8:	6a 83       	std	Y+2, r22	; 0x02
	//Enable Start Condition
	SET_BIT(TWCR, 5);
    16ea:	a6 e5       	ldi	r26, 0x56	; 86
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e6 e5       	ldi	r30, 0x56	; 86
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	80 62       	ori	r24, 0x20	; 32
    16f6:	8c 93       	st	X, r24
	//Enable I2C
	SET_BIT(TWCR, 2);
    16f8:	a6 e5       	ldi	r26, 0x56	; 86
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	e6 e5       	ldi	r30, 0x56	; 86
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	84 60       	ori	r24, 0x04	; 4
    1704:	8c 93       	st	X, r24
	// Clear TWIN Flag
	SET_BIT(TWCR, 7);
    1706:	a6 e5       	ldi	r26, 0x56	; 86
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	e6 e5       	ldi	r30, 0x56	; 86
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	80 68       	ori	r24, 0x80	; 128
    1712:	8c 93       	st	X, r24
	// Wait
	while (!GET_BIT(TWCR, 7))
    1714:	e6 e5       	ldi	r30, 0x56	; 86
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	88 23       	and	r24, r24
    171c:	dc f7       	brge	.-10     	; 0x1714 <I2C_REPEATED_START_CONDITION+0x38>
	/*LCD_VIDSENDCOMMAND(LCD_Clear);
	 LCD_VIDSENDCHAR((GET_STATUS() / 100) + 48);
	 LCD_VIDSENDCHAR(((GET_STATUS() % 100) / 10) + 48);
	 LCD_VIDSENDCHAR(((GET_STATUS() % 100) % 10) + 48);*/
	//Send Slave Address
	TWDR = (Slave_Address << 1) | R_W;
    171e:	e3 e2       	ldi	r30, 0x23	; 35
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	88 2f       	mov	r24, r24
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	88 0f       	add	r24, r24
    172a:	99 1f       	adc	r25, r25
    172c:	98 2f       	mov	r25, r24
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	89 2b       	or	r24, r25
    1732:	80 83       	st	Z, r24
	//CLEAR Start Condition
	CLR_BIT(TWCR, 5);
    1734:	a6 e5       	ldi	r26, 0x56	; 86
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	e6 e5       	ldi	r30, 0x56	; 86
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	8f 7d       	andi	r24, 0xDF	; 223
    1740:	8c 93       	st	X, r24
	// Clear TWIN Flag
	SET_BIT(TWCR, 7);
    1742:	a6 e5       	ldi	r26, 0x56	; 86
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	e6 e5       	ldi	r30, 0x56	; 86
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	80 68       	ori	r24, 0x80	; 128
    174e:	8c 93       	st	X, r24
	//Enable I2C
	SET_BIT(TWCR, 2);
    1750:	a6 e5       	ldi	r26, 0x56	; 86
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	e6 e5       	ldi	r30, 0x56	; 86
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	84 60       	ori	r24, 0x04	; 4
    175c:	8c 93       	st	X, r24
	// Wait
	while (!GET_BIT(TWCR, 7))
    175e:	e6 e5       	ldi	r30, 0x56	; 86
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	88 23       	and	r24, r24
    1766:	dc f7       	brge	.-10     	; 0x175e <I2C_REPEATED_START_CONDITION+0x82>
		;
}
    1768:	0f 90       	pop	r0
    176a:	0f 90       	pop	r0
    176c:	cf 91       	pop	r28
    176e:	df 91       	pop	r29
    1770:	08 95       	ret

00001772 <I2C_READ_DATA_ACK>:
uint8 I2C_READ_DATA_ACK(void) {
    1772:	df 93       	push	r29
    1774:	cf 93       	push	r28
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62
	//Enable Acknowledge
	SET_BIT(TWCR, 6);
    177a:	a6 e5       	ldi	r26, 0x56	; 86
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e6 e5       	ldi	r30, 0x56	; 86
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	80 64       	ori	r24, 0x40	; 64
    1786:	8c 93       	st	X, r24
	//Enable I2C
	SET_BIT(TWCR, 2);
    1788:	a6 e5       	ldi	r26, 0x56	; 86
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	e6 e5       	ldi	r30, 0x56	; 86
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	84 60       	ori	r24, 0x04	; 4
    1794:	8c 93       	st	X, r24
	// Clear TWIN Flag
	SET_BIT(TWCR, 7);
    1796:	a6 e5       	ldi	r26, 0x56	; 86
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e6 e5       	ldi	r30, 0x56	; 86
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	80 68       	ori	r24, 0x80	; 128
    17a2:	8c 93       	st	X, r24
	// Wait
	while (!(GET_BIT(TWCR, 7)))
    17a4:	e6 e5       	ldi	r30, 0x56	; 86
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	88 23       	and	r24, r24
    17ac:	dc f7       	brge	.-10     	; 0x17a4 <I2C_READ_DATA_ACK+0x32>
		;
	TOGGLE_BIT(PORTB, 0);
    17ae:	a8 e3       	ldi	r26, 0x38	; 56
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	e8 e3       	ldi	r30, 0x38	; 56
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	90 81       	ld	r25, Z
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	89 27       	eor	r24, r25
    17bc:	8c 93       	st	X, r24
	return TWDR;
    17be:	e3 e2       	ldi	r30, 0x23	; 35
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
}
    17c4:	cf 91       	pop	r28
    17c6:	df 91       	pop	r29
    17c8:	08 95       	ret

000017ca <I2C_READ_DATA_NO_ACK>:

uint8 I2C_READ_DATA_NO_ACK(void) {
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
	//Enable NoAcknowledge
	CLR_BIT(TWCR, 6);
    17d2:	a6 e5       	ldi	r26, 0x56	; 86
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e6 e5       	ldi	r30, 0x56	; 86
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	8f 7b       	andi	r24, 0xBF	; 191
    17de:	8c 93       	st	X, r24
	//Enable I2C
	SET_BIT(TWCR, 2);
    17e0:	a6 e5       	ldi	r26, 0x56	; 86
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	e6 e5       	ldi	r30, 0x56	; 86
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	84 60       	ori	r24, 0x04	; 4
    17ec:	8c 93       	st	X, r24
	// Clear TWIN Flag
	SET_BIT(TWCR, 7);
    17ee:	a6 e5       	ldi	r26, 0x56	; 86
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	e6 e5       	ldi	r30, 0x56	; 86
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	80 68       	ori	r24, 0x80	; 128
    17fa:	8c 93       	st	X, r24
	// Wait
	while (!GET_BIT(TWCR, 7))
    17fc:	e6 e5       	ldi	r30, 0x56	; 86
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	88 23       	and	r24, r24
    1804:	dc f7       	brge	.-10     	; 0x17fc <I2C_READ_DATA_NO_ACK+0x32>
		;
	return TWDR;
    1806:	e3 e2       	ldi	r30, 0x23	; 35
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
}
    180c:	cf 91       	pop	r28
    180e:	df 91       	pop	r29
    1810:	08 95       	ret

00001812 <I2C_WRITE_DATA_ACK>:

void I2C_WRITE_DATA_ACK(uint8 Data) {
    1812:	df 93       	push	r29
    1814:	cf 93       	push	r28
    1816:	0f 92       	push	r0
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
    181c:	89 83       	std	Y+1, r24	; 0x01
	//Load Data
	TWDR = Data;
    181e:	e3 e2       	ldi	r30, 0x23	; 35
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	89 81       	ldd	r24, Y+1	; 0x01
    1824:	80 83       	st	Z, r24
	//Enable Acknowledge
	SET_BIT(TWCR, 6);
    1826:	a6 e5       	ldi	r26, 0x56	; 86
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	e6 e5       	ldi	r30, 0x56	; 86
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	80 64       	ori	r24, 0x40	; 64
    1832:	8c 93       	st	X, r24
	//Enable I2C
	SET_BIT(TWCR, 2);
    1834:	a6 e5       	ldi	r26, 0x56	; 86
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	e6 e5       	ldi	r30, 0x56	; 86
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	84 60       	ori	r24, 0x04	; 4
    1840:	8c 93       	st	X, r24
	// Clear TWIN Flag
	SET_BIT(TWCR, 7);
    1842:	a6 e5       	ldi	r26, 0x56	; 86
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	e6 e5       	ldi	r30, 0x56	; 86
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	80 68       	ori	r24, 0x80	; 128
    184e:	8c 93       	st	X, r24
	// Wait
	while (!GET_BIT(TWCR, 7))
    1850:	e6 e5       	ldi	r30, 0x56	; 86
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	88 23       	and	r24, r24
    1858:	dc f7       	brge	.-10     	; 0x1850 <I2C_WRITE_DATA_ACK+0x3e>
		;
}
    185a:	0f 90       	pop	r0
    185c:	cf 91       	pop	r28
    185e:	df 91       	pop	r29
    1860:	08 95       	ret

00001862 <I2C_WRITE_DATA_NO_ACK>:
void I2C_WRITE_DATA_NO_ACK(uint8 Data) {
    1862:	df 93       	push	r29
    1864:	cf 93       	push	r28
    1866:	0f 92       	push	r0
    1868:	cd b7       	in	r28, 0x3d	; 61
    186a:	de b7       	in	r29, 0x3e	; 62
    186c:	89 83       	std	Y+1, r24	; 0x01
	//Load Data
	TWDR = Data;
    186e:	e3 e2       	ldi	r30, 0x23	; 35
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	89 81       	ldd	r24, Y+1	; 0x01
    1874:	80 83       	st	Z, r24
	//Enable NoAcknowledge
	CLR_BIT(TWCR, 6);
    1876:	a6 e5       	ldi	r26, 0x56	; 86
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	e6 e5       	ldi	r30, 0x56	; 86
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	8f 7b       	andi	r24, 0xBF	; 191
    1882:	8c 93       	st	X, r24
	//Enable I2C
	SET_BIT(TWCR, 2);
    1884:	a6 e5       	ldi	r26, 0x56	; 86
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	e6 e5       	ldi	r30, 0x56	; 86
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	84 60       	ori	r24, 0x04	; 4
    1890:	8c 93       	st	X, r24
	// Clear TWIN Flag
		SET_BIT(TWCR, 7);
    1892:	a6 e5       	ldi	r26, 0x56	; 86
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	e6 e5       	ldi	r30, 0x56	; 86
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	80 68       	ori	r24, 0x80	; 128
    189e:	8c 93       	st	X, r24
	// Wait
	while (!GET_BIT(TWCR, 7))
    18a0:	e6 e5       	ldi	r30, 0x56	; 86
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	88 23       	and	r24, r24
    18a8:	dc f7       	brge	.-10     	; 0x18a0 <I2C_WRITE_DATA_NO_ACK+0x3e>
		;
}
    18aa:	0f 90       	pop	r0
    18ac:	cf 91       	pop	r28
    18ae:	df 91       	pop	r29
    18b0:	08 95       	ret

000018b2 <GET_STATUS>:

uint8 GET_STATUS(void) {
    18b2:	df 93       	push	r29
    18b4:	cf 93       	push	r28
    18b6:	cd b7       	in	r28, 0x3d	; 61
    18b8:	de b7       	in	r29, 0x3e	; 62
	return TWSR;
    18ba:	e1 e2       	ldi	r30, 0x21	; 33
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
}
    18c0:	cf 91       	pop	r28
    18c2:	df 91       	pop	r29
    18c4:	08 95       	ret

000018c6 <I2C_WRITE_STRING_ACK>:
void I2C_WRITE_STRING_ACK(uint8* Data) {
    18c6:	df 93       	push	r29
    18c8:	cf 93       	push	r28
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
    18ce:	61 97       	sbiw	r28, 0x11	; 17
    18d0:	0f b6       	in	r0, 0x3f	; 63
    18d2:	f8 94       	cli
    18d4:	de bf       	out	0x3e, r29	; 62
    18d6:	0f be       	out	0x3f, r0	; 63
    18d8:	cd bf       	out	0x3d, r28	; 61
    18da:	99 8b       	std	Y+17, r25	; 0x11
    18dc:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i = 0;
    18de:	1f 86       	std	Y+15, r1	; 0x0f
    18e0:	80 c0       	rjmp	.+256    	; 0x19e2 <I2C_WRITE_STRING_ACK+0x11c>
	while (Data[i] != '\0') {
		I2C_WRITE_DATA_ACK(Data[i]);
    18e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    18e4:	28 2f       	mov	r18, r24
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	88 89       	ldd	r24, Y+16	; 0x10
    18ea:	99 89       	ldd	r25, Y+17	; 0x11
    18ec:	fc 01       	movw	r30, r24
    18ee:	e2 0f       	add	r30, r18
    18f0:	f3 1f       	adc	r31, r19
    18f2:	80 81       	ld	r24, Z
    18f4:	0e 94 09 0c 	call	0x1812	; 0x1812 <I2C_WRITE_DATA_ACK>
		i++;
    18f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    18fa:	8f 5f       	subi	r24, 0xFF	; 255
    18fc:	8f 87       	std	Y+15, r24	; 0x0f
    18fe:	80 e0       	ldi	r24, 0x00	; 0
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	a8 ec       	ldi	r26, 0xC8	; 200
    1904:	b2 e4       	ldi	r27, 0x42	; 66
    1906:	8b 87       	std	Y+11, r24	; 0x0b
    1908:	9c 87       	std	Y+12, r25	; 0x0c
    190a:	ad 87       	std	Y+13, r26	; 0x0d
    190c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    190e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1910:	7c 85       	ldd	r23, Y+12	; 0x0c
    1912:	8d 85       	ldd	r24, Y+13	; 0x0d
    1914:	9e 85       	ldd	r25, Y+14	; 0x0e
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	4a e7       	ldi	r20, 0x7A	; 122
    191c:	55 e4       	ldi	r21, 0x45	; 69
    191e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1922:	dc 01       	movw	r26, r24
    1924:	cb 01       	movw	r24, r22
    1926:	8f 83       	std	Y+7, r24	; 0x07
    1928:	98 87       	std	Y+8, r25	; 0x08
    192a:	a9 87       	std	Y+9, r26	; 0x09
    192c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    192e:	6f 81       	ldd	r22, Y+7	; 0x07
    1930:	78 85       	ldd	r23, Y+8	; 0x08
    1932:	89 85       	ldd	r24, Y+9	; 0x09
    1934:	9a 85       	ldd	r25, Y+10	; 0x0a
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	40 e8       	ldi	r20, 0x80	; 128
    193c:	5f e3       	ldi	r21, 0x3F	; 63
    193e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1942:	88 23       	and	r24, r24
    1944:	2c f4       	brge	.+10     	; 0x1950 <I2C_WRITE_STRING_ACK+0x8a>
		__ticks = 1;
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	9e 83       	std	Y+6, r25	; 0x06
    194c:	8d 83       	std	Y+5, r24	; 0x05
    194e:	3f c0       	rjmp	.+126    	; 0x19ce <I2C_WRITE_STRING_ACK+0x108>
	else if (__tmp > 65535)
    1950:	6f 81       	ldd	r22, Y+7	; 0x07
    1952:	78 85       	ldd	r23, Y+8	; 0x08
    1954:	89 85       	ldd	r24, Y+9	; 0x09
    1956:	9a 85       	ldd	r25, Y+10	; 0x0a
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	3f ef       	ldi	r19, 0xFF	; 255
    195c:	4f e7       	ldi	r20, 0x7F	; 127
    195e:	57 e4       	ldi	r21, 0x47	; 71
    1960:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1964:	18 16       	cp	r1, r24
    1966:	4c f5       	brge	.+82     	; 0x19ba <I2C_WRITE_STRING_ACK+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1968:	6b 85       	ldd	r22, Y+11	; 0x0b
    196a:	7c 85       	ldd	r23, Y+12	; 0x0c
    196c:	8d 85       	ldd	r24, Y+13	; 0x0d
    196e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	40 e2       	ldi	r20, 0x20	; 32
    1976:	51 e4       	ldi	r21, 0x41	; 65
    1978:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    197c:	dc 01       	movw	r26, r24
    197e:	cb 01       	movw	r24, r22
    1980:	bc 01       	movw	r22, r24
    1982:	cd 01       	movw	r24, r26
    1984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	9e 83       	std	Y+6, r25	; 0x06
    198e:	8d 83       	std	Y+5, r24	; 0x05
    1990:	0f c0       	rjmp	.+30     	; 0x19b0 <I2C_WRITE_STRING_ACK+0xea>
    1992:	80 e9       	ldi	r24, 0x90	; 144
    1994:	91 e0       	ldi	r25, 0x01	; 1
    1996:	9c 83       	std	Y+4, r25	; 0x04
    1998:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    199a:	8b 81       	ldd	r24, Y+3	; 0x03
    199c:	9c 81       	ldd	r25, Y+4	; 0x04
    199e:	01 97       	sbiw	r24, 0x01	; 1
    19a0:	f1 f7       	brne	.-4      	; 0x199e <I2C_WRITE_STRING_ACK+0xd8>
    19a2:	9c 83       	std	Y+4, r25	; 0x04
    19a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a6:	8d 81       	ldd	r24, Y+5	; 0x05
    19a8:	9e 81       	ldd	r25, Y+6	; 0x06
    19aa:	01 97       	sbiw	r24, 0x01	; 1
    19ac:	9e 83       	std	Y+6, r25	; 0x06
    19ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b0:	8d 81       	ldd	r24, Y+5	; 0x05
    19b2:	9e 81       	ldd	r25, Y+6	; 0x06
    19b4:	00 97       	sbiw	r24, 0x00	; 0
    19b6:	69 f7       	brne	.-38     	; 0x1992 <I2C_WRITE_STRING_ACK+0xcc>
    19b8:	14 c0       	rjmp	.+40     	; 0x19e2 <I2C_WRITE_STRING_ACK+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ba:	6f 81       	ldd	r22, Y+7	; 0x07
    19bc:	78 85       	ldd	r23, Y+8	; 0x08
    19be:	89 85       	ldd	r24, Y+9	; 0x09
    19c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	9e 83       	std	Y+6, r25	; 0x06
    19cc:	8d 83       	std	Y+5, r24	; 0x05
    19ce:	8d 81       	ldd	r24, Y+5	; 0x05
    19d0:	9e 81       	ldd	r25, Y+6	; 0x06
    19d2:	9a 83       	std	Y+2, r25	; 0x02
    19d4:	89 83       	std	Y+1, r24	; 0x01
    19d6:	89 81       	ldd	r24, Y+1	; 0x01
    19d8:	9a 81       	ldd	r25, Y+2	; 0x02
    19da:	01 97       	sbiw	r24, 0x01	; 1
    19dc:	f1 f7       	brne	.-4      	; 0x19da <I2C_WRITE_STRING_ACK+0x114>
    19de:	9a 83       	std	Y+2, r25	; 0x02
    19e0:	89 83       	std	Y+1, r24	; 0x01
uint8 GET_STATUS(void) {
	return TWSR;
}
void I2C_WRITE_STRING_ACK(uint8* Data) {
	uint8 i = 0;
	while (Data[i] != '\0') {
    19e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    19e4:	28 2f       	mov	r18, r24
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	88 89       	ldd	r24, Y+16	; 0x10
    19ea:	99 89       	ldd	r25, Y+17	; 0x11
    19ec:	fc 01       	movw	r30, r24
    19ee:	e2 0f       	add	r30, r18
    19f0:	f3 1f       	adc	r31, r19
    19f2:	80 81       	ld	r24, Z
    19f4:	88 23       	and	r24, r24
    19f6:	09 f0       	breq	.+2      	; 0x19fa <I2C_WRITE_STRING_ACK+0x134>
    19f8:	74 cf       	rjmp	.-280    	; 0x18e2 <I2C_WRITE_STRING_ACK+0x1c>
		I2C_WRITE_DATA_ACK(Data[i]);
		i++;
		_delay_ms(100);
	}
	I2C_WRITE_DATA_ACK(Data[i]);
    19fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    19fc:	28 2f       	mov	r18, r24
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	88 89       	ldd	r24, Y+16	; 0x10
    1a02:	99 89       	ldd	r25, Y+17	; 0x11
    1a04:	fc 01       	movw	r30, r24
    1a06:	e2 0f       	add	r30, r18
    1a08:	f3 1f       	adc	r31, r19
    1a0a:	80 81       	ld	r24, Z
    1a0c:	0e 94 09 0c 	call	0x1812	; 0x1812 <I2C_WRITE_DATA_ACK>
}
    1a10:	61 96       	adiw	r28, 0x11	; 17
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	f8 94       	cli
    1a16:	de bf       	out	0x3e, r29	; 62
    1a18:	0f be       	out	0x3f, r0	; 63
    1a1a:	cd bf       	out	0x3d, r28	; 61
    1a1c:	cf 91       	pop	r28
    1a1e:	df 91       	pop	r29
    1a20:	08 95       	ret

00001a22 <I2C_READ_STRING_ACK>:

uint8* I2C_READ_STRING_ACK(void) {
    1a22:	df 93       	push	r29
    1a24:	cf 93       	push	r28
    1a26:	00 d0       	rcall	.+0      	; 0x1a28 <I2C_READ_STRING_ACK+0x6>
    1a28:	0f 92       	push	r0
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62
	static uint8 Data[50], flag = 0;
	uint8 count = 0, d = 0, i = 0;
    1a2e:	1b 82       	std	Y+3, r1	; 0x03
    1a30:	1a 82       	std	Y+2, r1	; 0x02
    1a32:	19 82       	std	Y+1, r1	; 0x01
	d = I2C_READ_DATA_ACK();
    1a34:	0e 94 b9 0b 	call	0x1772	; 0x1772 <I2C_READ_DATA_ACK>
    1a38:	8a 83       	std	Y+2, r24	; 0x02
    1a3a:	1a c0       	rjmp	.+52     	; 0x1a70 <I2C_READ_STRING_ACK+0x4e>
	while (d != '\0' && count != 50) {
		//_delay_ms(100);
		Data[i] = d;
    1a3c:	89 81       	ldd	r24, Y+1	; 0x01
    1a3e:	88 2f       	mov	r24, r24
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	fc 01       	movw	r30, r24
    1a44:	e1 5f       	subi	r30, 0xF1	; 241
    1a46:	fe 4f       	sbci	r31, 0xFE	; 254
    1a48:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4a:	80 83       	st	Z, r24
		LCD_VIDSENDCHAR(Data[i]);
    1a4c:	89 81       	ldd	r24, Y+1	; 0x01
    1a4e:	88 2f       	mov	r24, r24
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	fc 01       	movw	r30, r24
    1a54:	e1 5f       	subi	r30, 0xF1	; 241
    1a56:	fe 4f       	sbci	r31, 0xFE	; 254
    1a58:	80 81       	ld	r24, Z
    1a5a:	0e 94 c8 13 	call	0x2790	; 0x2790 <LCD_VIDSENDCHAR>
		d = I2C_READ_DATA_ACK();
    1a5e:	0e 94 b9 0b 	call	0x1772	; 0x1772 <I2C_READ_DATA_ACK>
    1a62:	8a 83       	std	Y+2, r24	; 0x02
		count++;
    1a64:	8b 81       	ldd	r24, Y+3	; 0x03
    1a66:	8f 5f       	subi	r24, 0xFF	; 255
    1a68:	8b 83       	std	Y+3, r24	; 0x03
		i++;
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
    1a6c:	8f 5f       	subi	r24, 0xFF	; 255
    1a6e:	89 83       	std	Y+1, r24	; 0x01

uint8* I2C_READ_STRING_ACK(void) {
	static uint8 Data[50], flag = 0;
	uint8 count = 0, d = 0, i = 0;
	d = I2C_READ_DATA_ACK();
	while (d != '\0' && count != 50) {
    1a70:	8a 81       	ldd	r24, Y+2	; 0x02
    1a72:	88 23       	and	r24, r24
    1a74:	19 f0       	breq	.+6      	; 0x1a7c <I2C_READ_STRING_ACK+0x5a>
    1a76:	8b 81       	ldd	r24, Y+3	; 0x03
    1a78:	82 33       	cpi	r24, 0x32	; 50
    1a7a:	01 f7       	brne	.-64     	; 0x1a3c <I2C_READ_STRING_ACK+0x1a>
		LCD_VIDSENDCHAR(Data[i]);
		d = I2C_READ_DATA_ACK();
		count++;
		i++;
	}
	return Data;
    1a7c:	8f e0       	ldi	r24, 0x0F	; 15
    1a7e:	91 e0       	ldi	r25, 0x01	; 1
}
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	0f 90       	pop	r0
    1a86:	cf 91       	pop	r28
    1a88:	df 91       	pop	r29
    1a8a:	08 95       	ret

00001a8c <UART_INIT>:
#include "MEMMAP.h"
#include <util/delay.h>
#include "DIO.h"
#include "UART.h"

void UART_INIT(void) {
    1a8c:	df 93       	push	r29
    1a8e:	cf 93       	push	r28
    1a90:	cd b7       	in	r28, 0x3d	; 61
    1a92:	de b7       	in	r29, 0x3e	; 62

//Set BaudRate
	UBRRL = Baudrate;
    1a94:	e9 e2       	ldi	r30, 0x29	; 41
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	87 e6       	ldi	r24, 0x67	; 103
    1a9a:	80 83       	st	Z, r24
//Set Frame
#if Data_Mode==Bits_8
	SET_BIT(UCSRC, 1);
    1a9c:	a0 e4       	ldi	r26, 0x40	; 64
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	e0 e4       	ldi	r30, 0x40	; 64
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	82 60       	ori	r24, 0x02	; 2
    1aa8:	8c 93       	st	X, r24
	SET_BIT(UCSRC, 2);
    1aaa:	a0 e4       	ldi	r26, 0x40	; 64
    1aac:	b0 e0       	ldi	r27, 0x00	; 0
    1aae:	e0 e4       	ldi	r30, 0x40	; 64
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	80 81       	ld	r24, Z
    1ab4:	84 60       	ori	r24, 0x04	; 4
    1ab6:	8c 93       	st	X, r24
	CLR_BIT(UCSRB, 2);
    1ab8:	aa e2       	ldi	r26, 0x2A	; 42
    1aba:	b0 e0       	ldi	r27, 0x00	; 0
    1abc:	ea e2       	ldi	r30, 0x2A	; 42
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	8b 7f       	andi	r24, 0xFB	; 251
    1ac4:	8c 93       	st	X, r24

#endif
//set Stop Bit
#if Stop_Bits==2
	SET_BIT(UCSRC, 3);
    1ac6:	a0 e4       	ldi	r26, 0x40	; 64
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	e0 e4       	ldi	r30, 0x40	; 64
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	88 60       	ori	r24, 0x08	; 8
    1ad2:	8c 93       	st	X, r24
#endif
//set Parity
#if Parity_Mode==No_Parity
	CLR_BIT(UCSRC, 4);
    1ad4:	a0 e4       	ldi	r26, 0x40	; 64
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	e0 e4       	ldi	r30, 0x40	; 64
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	8f 7e       	andi	r24, 0xEF	; 239
    1ae0:	8c 93       	st	X, r24
	CLR_BIT(UCSRC, 5);
    1ae2:	a0 e4       	ldi	r26, 0x40	; 64
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	e0 e4       	ldi	r30, 0x40	; 64
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	8f 7d       	andi	r24, 0xDF	; 223
    1aee:	8c 93       	st	X, r24
#endif
//set Asynchronous Mode
	CLR_BIT(UCSRC, 6);
    1af0:	a0 e4       	ldi	r26, 0x40	; 64
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	e0 e4       	ldi	r30, 0x40	; 64
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	8f 7b       	andi	r24, 0xBF	; 191
    1afc:	8c 93       	st	X, r24
}
    1afe:	cf 91       	pop	r28
    1b00:	df 91       	pop	r29
    1b02:	08 95       	ret

00001b04 <UART_send_char>:

void UART_send_char(uint8 Data) {
    1b04:	df 93       	push	r29
    1b06:	cf 93       	push	r28
    1b08:	0f 92       	push	r0
    1b0a:	cd b7       	in	r28, 0x3d	; 61
    1b0c:	de b7       	in	r29, 0x3e	; 62
    1b0e:	89 83       	std	Y+1, r24	; 0x01

	//Enable Transmitter
	SET_BIT(UCSRB, 3);
    1b10:	aa e2       	ldi	r26, 0x2A	; 42
    1b12:	b0 e0       	ldi	r27, 0x00	; 0
    1b14:	ea e2       	ldi	r30, 0x2A	; 42
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	88 60       	ori	r24, 0x08	; 8
    1b1c:	8c 93       	st	X, r24
	//Wait
	while (!(GET_BIT(UCSRA, 5)))
    1b1e:	eb e2       	ldi	r30, 0x2B	; 43
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	82 95       	swap	r24
    1b26:	86 95       	lsr	r24
    1b28:	87 70       	andi	r24, 0x07	; 7
    1b2a:	88 2f       	mov	r24, r24
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	81 70       	andi	r24, 0x01	; 1
    1b30:	90 70       	andi	r25, 0x00	; 0
    1b32:	00 97       	sbiw	r24, 0x00	; 0
    1b34:	a1 f3       	breq	.-24     	; 0x1b1e <UART_send_char+0x1a>
		;
	//put Data
	UDR = Data;
    1b36:	ec e2       	ldi	r30, 0x2C	; 44
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	89 81       	ldd	r24, Y+1	; 0x01
    1b3c:	80 83       	st	Z, r24

}
    1b3e:	0f 90       	pop	r0
    1b40:	cf 91       	pop	r28
    1b42:	df 91       	pop	r29
    1b44:	08 95       	ret

00001b46 <UART_recieve_char>:

uint8 UART_recieve_char(void) {
    1b46:	df 93       	push	r29
    1b48:	cf 93       	push	r28
    1b4a:	cd b7       	in	r28, 0x3d	; 61
    1b4c:	de b7       	in	r29, 0x3e	; 62
	//Enable Reciever
	SET_BIT(UCSRB, 4);
    1b4e:	aa e2       	ldi	r26, 0x2A	; 42
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	ea e2       	ldi	r30, 0x2A	; 42
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	80 61       	ori	r24, 0x10	; 16
    1b5a:	8c 93       	st	X, r24
	//Wait
	while (!(GET_BIT(UCSRA, 7)))
    1b5c:	eb e2       	ldi	r30, 0x2B	; 43
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	80 81       	ld	r24, Z
    1b62:	88 23       	and	r24, r24
    1b64:	dc f7       	brge	.-10     	; 0x1b5c <UART_recieve_char+0x16>
		;
	TOGGLE_BIT(PORTA,0);
    1b66:	ab e3       	ldi	r26, 0x3B	; 59
    1b68:	b0 e0       	ldi	r27, 0x00	; 0
    1b6a:	eb e3       	ldi	r30, 0x3B	; 59
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	90 81       	ld	r25, Z
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	89 27       	eor	r24, r25
    1b74:	8c 93       	st	X, r24
	//put Data
	return UDR;
    1b76:	ec e2       	ldi	r30, 0x2C	; 44
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
}
    1b7c:	cf 91       	pop	r28
    1b7e:	df 91       	pop	r29
    1b80:	08 95       	ret

00001b82 <UART_recieve_char_with_Interrupt>:
void UART_recieve_char_with_Interrupt(void) {
    1b82:	df 93       	push	r29
    1b84:	cf 93       	push	r28
    1b86:	cd b7       	in	r28, 0x3d	; 61
    1b88:	de b7       	in	r29, 0x3e	; 62
	//Enable Reciever
	SET_BIT(UCSRB, 4);
    1b8a:	aa e2       	ldi	r26, 0x2A	; 42
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	ea e2       	ldi	r30, 0x2A	; 42
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	80 61       	ori	r24, 0x10	; 16
    1b96:	8c 93       	st	X, r24
	//Enable RX Interrupt complete
	SET_BIT(UCSRB, 7);
    1b98:	aa e2       	ldi	r26, 0x2A	; 42
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	ea e2       	ldi	r30, 0x2A	; 42
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	80 68       	ori	r24, 0x80	; 128
    1ba4:	8c 93       	st	X, r24
	SET_BIT(SREG, 7);
    1ba6:	af e5       	ldi	r26, 0x5F	; 95
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	ef e5       	ldi	r30, 0x5F	; 95
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	80 68       	ori	r24, 0x80	; 128
    1bb2:	8c 93       	st	X, r24

}
    1bb4:	cf 91       	pop	r28
    1bb6:	df 91       	pop	r29
    1bb8:	08 95       	ret

00001bba <UART_send_string>:
void UART_send_string(uint8* Data, uint8 len) {
    1bba:	df 93       	push	r29
    1bbc:	cf 93       	push	r28
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
    1bc2:	62 97       	sbiw	r28, 0x12	; 18
    1bc4:	0f b6       	in	r0, 0x3f	; 63
    1bc6:	f8 94       	cli
    1bc8:	de bf       	out	0x3e, r29	; 62
    1bca:	0f be       	out	0x3f, r0	; 63
    1bcc:	cd bf       	out	0x3d, r28	; 61
    1bce:	99 8b       	std	Y+17, r25	; 0x11
    1bd0:	88 8b       	std	Y+16, r24	; 0x10
    1bd2:	6a 8b       	std	Y+18, r22	; 0x12
	uint8 i;
	for (i = 0; i < len; i++) {
    1bd4:	1f 86       	std	Y+15, r1	; 0x0f
    1bd6:	80 c0       	rjmp	.+256    	; 0x1cd8 <UART_send_string+0x11e>
		UART_send_char(Data[i]);
    1bd8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bda:	28 2f       	mov	r18, r24
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	88 89       	ldd	r24, Y+16	; 0x10
    1be0:	99 89       	ldd	r25, Y+17	; 0x11
    1be2:	fc 01       	movw	r30, r24
    1be4:	e2 0f       	add	r30, r18
    1be6:	f3 1f       	adc	r31, r19
    1be8:	80 81       	ld	r24, Z
    1bea:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <UART_send_char>
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	a0 e2       	ldi	r26, 0x20	; 32
    1bf4:	b1 e4       	ldi	r27, 0x41	; 65
    1bf6:	8b 87       	std	Y+11, r24	; 0x0b
    1bf8:	9c 87       	std	Y+12, r25	; 0x0c
    1bfa:	ad 87       	std	Y+13, r26	; 0x0d
    1bfc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c00:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	4a e7       	ldi	r20, 0x7A	; 122
    1c0c:	55 e4       	ldi	r21, 0x45	; 69
    1c0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	8f 83       	std	Y+7, r24	; 0x07
    1c18:	98 87       	std	Y+8, r25	; 0x08
    1c1a:	a9 87       	std	Y+9, r26	; 0x09
    1c1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c20:	78 85       	ldd	r23, Y+8	; 0x08
    1c22:	89 85       	ldd	r24, Y+9	; 0x09
    1c24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	40 e8       	ldi	r20, 0x80	; 128
    1c2c:	5f e3       	ldi	r21, 0x3F	; 63
    1c2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c32:	88 23       	and	r24, r24
    1c34:	2c f4       	brge	.+10     	; 0x1c40 <UART_send_string+0x86>
		__ticks = 1;
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	9e 83       	std	Y+6, r25	; 0x06
    1c3c:	8d 83       	std	Y+5, r24	; 0x05
    1c3e:	3f c0       	rjmp	.+126    	; 0x1cbe <UART_send_string+0x104>
	else if (__tmp > 65535)
    1c40:	6f 81       	ldd	r22, Y+7	; 0x07
    1c42:	78 85       	ldd	r23, Y+8	; 0x08
    1c44:	89 85       	ldd	r24, Y+9	; 0x09
    1c46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	3f ef       	ldi	r19, 0xFF	; 255
    1c4c:	4f e7       	ldi	r20, 0x7F	; 127
    1c4e:	57 e4       	ldi	r21, 0x47	; 71
    1c50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c54:	18 16       	cp	r1, r24
    1c56:	4c f5       	brge	.+82     	; 0x1caa <UART_send_string+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	40 e2       	ldi	r20, 0x20	; 32
    1c66:	51 e4       	ldi	r21, 0x41	; 65
    1c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	bc 01       	movw	r22, r24
    1c72:	cd 01       	movw	r24, r26
    1c74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	9e 83       	std	Y+6, r25	; 0x06
    1c7e:	8d 83       	std	Y+5, r24	; 0x05
    1c80:	0f c0       	rjmp	.+30     	; 0x1ca0 <UART_send_string+0xe6>
    1c82:	80 e9       	ldi	r24, 0x90	; 144
    1c84:	91 e0       	ldi	r25, 0x01	; 1
    1c86:	9c 83       	std	Y+4, r25	; 0x04
    1c88:	8b 83       	std	Y+3, r24	; 0x03
    1c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8e:	01 97       	sbiw	r24, 0x01	; 1
    1c90:	f1 f7       	brne	.-4      	; 0x1c8e <UART_send_string+0xd4>
    1c92:	9c 83       	std	Y+4, r25	; 0x04
    1c94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c96:	8d 81       	ldd	r24, Y+5	; 0x05
    1c98:	9e 81       	ldd	r25, Y+6	; 0x06
    1c9a:	01 97       	sbiw	r24, 0x01	; 1
    1c9c:	9e 83       	std	Y+6, r25	; 0x06
    1c9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca4:	00 97       	sbiw	r24, 0x00	; 0
    1ca6:	69 f7       	brne	.-38     	; 0x1c82 <UART_send_string+0xc8>
    1ca8:	14 c0       	rjmp	.+40     	; 0x1cd2 <UART_send_string+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1caa:	6f 81       	ldd	r22, Y+7	; 0x07
    1cac:	78 85       	ldd	r23, Y+8	; 0x08
    1cae:	89 85       	ldd	r24, Y+9	; 0x09
    1cb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	9e 83       	std	Y+6, r25	; 0x06
    1cbc:	8d 83       	std	Y+5, r24	; 0x05
    1cbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc2:	9a 83       	std	Y+2, r25	; 0x02
    1cc4:	89 83       	std	Y+1, r24	; 0x01
    1cc6:	89 81       	ldd	r24, Y+1	; 0x01
    1cc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cca:	01 97       	sbiw	r24, 0x01	; 1
    1ccc:	f1 f7       	brne	.-4      	; 0x1cca <UART_send_string+0x110>
    1cce:	9a 83       	std	Y+2, r25	; 0x02
    1cd0:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(SREG, 7);

}
void UART_send_string(uint8* Data, uint8 len) {
	uint8 i;
	for (i = 0; i < len; i++) {
    1cd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cd4:	8f 5f       	subi	r24, 0xFF	; 255
    1cd6:	8f 87       	std	Y+15, r24	; 0x0f
    1cd8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1cda:	8a 89       	ldd	r24, Y+18	; 0x12
    1cdc:	98 17       	cp	r25, r24
    1cde:	08 f4       	brcc	.+2      	; 0x1ce2 <UART_send_string+0x128>
    1ce0:	7b cf       	rjmp	.-266    	; 0x1bd8 <UART_send_string+0x1e>
		UART_send_char(Data[i]);
		_delay_ms(10);
	}
}
    1ce2:	62 96       	adiw	r28, 0x12	; 18
    1ce4:	0f b6       	in	r0, 0x3f	; 63
    1ce6:	f8 94       	cli
    1ce8:	de bf       	out	0x3e, r29	; 62
    1cea:	0f be       	out	0x3f, r0	; 63
    1cec:	cd bf       	out	0x3d, r28	; 61
    1cee:	cf 91       	pop	r28
    1cf0:	df 91       	pop	r29
    1cf2:	08 95       	ret

00001cf4 <UART_recieve_string>:
uint8* UART_recieve_string(void) {
    1cf4:	0f 93       	push	r16
    1cf6:	1f 93       	push	r17
    1cf8:	df 93       	push	r29
    1cfa:	cf 93       	push	r28
    1cfc:	0f 92       	push	r0
    1cfe:	cd b7       	in	r28, 0x3d	; 61
    1d00:	de b7       	in	r29, 0x3e	; 62
	static uint8 data[50];
	uint8 count=0;
    1d02:	19 82       	std	Y+1, r1	; 0x01
	data[count]=UART_recieve_char();
    1d04:	89 81       	ldd	r24, Y+1	; 0x01
    1d06:	08 2f       	mov	r16, r24
    1d08:	10 e0       	ldi	r17, 0x00	; 0
    1d0a:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <UART_recieve_char>
    1d0e:	f8 01       	movw	r30, r16
    1d10:	ef 5b       	subi	r30, 0xBF	; 191
    1d12:	fe 4f       	sbci	r31, 0xFE	; 254
    1d14:	80 83       	st	Z, r24
    1d16:	17 c0       	rjmp	.+46     	; 0x1d46 <UART_recieve_string+0x52>
	while(count!=50 && data[count]!='\0'){
		LCD_VIDSENDCHAR(data[count]);
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
    1d1a:	88 2f       	mov	r24, r24
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	fc 01       	movw	r30, r24
    1d20:	ef 5b       	subi	r30, 0xBF	; 191
    1d22:	fe 4f       	sbci	r31, 0xFE	; 254
    1d24:	80 81       	ld	r24, Z
    1d26:	88 2f       	mov	r24, r24
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	0e 94 c8 13 	call	0x2790	; 0x2790 <LCD_VIDSENDCHAR>
		count++;
    1d2e:	89 81       	ldd	r24, Y+1	; 0x01
    1d30:	8f 5f       	subi	r24, 0xFF	; 255
    1d32:	89 83       	std	Y+1, r24	; 0x01
		data[count]=UART_recieve_char();
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	08 2f       	mov	r16, r24
    1d38:	10 e0       	ldi	r17, 0x00	; 0
    1d3a:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <UART_recieve_char>
    1d3e:	f8 01       	movw	r30, r16
    1d40:	ef 5b       	subi	r30, 0xBF	; 191
    1d42:	fe 4f       	sbci	r31, 0xFE	; 254
    1d44:	80 83       	st	Z, r24
}
uint8* UART_recieve_string(void) {
	static uint8 data[50];
	uint8 count=0;
	data[count]=UART_recieve_char();
	while(count!=50 && data[count]!='\0'){
    1d46:	89 81       	ldd	r24, Y+1	; 0x01
    1d48:	82 33       	cpi	r24, 0x32	; 50
    1d4a:	49 f0       	breq	.+18     	; 0x1d5e <UART_recieve_string+0x6a>
    1d4c:	89 81       	ldd	r24, Y+1	; 0x01
    1d4e:	88 2f       	mov	r24, r24
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	fc 01       	movw	r30, r24
    1d54:	ef 5b       	subi	r30, 0xBF	; 191
    1d56:	fe 4f       	sbci	r31, 0xFE	; 254
    1d58:	80 81       	ld	r24, Z
    1d5a:	88 23       	and	r24, r24
    1d5c:	e9 f6       	brne	.-70     	; 0x1d18 <UART_recieve_string+0x24>
		LCD_VIDSENDCHAR(data[count]);
		count++;
		data[count]=UART_recieve_char();
	}
	return data;
    1d5e:	81 e4       	ldi	r24, 0x41	; 65
    1d60:	91 e0       	ldi	r25, 0x01	; 1
}
    1d62:	0f 90       	pop	r0
    1d64:	cf 91       	pop	r28
    1d66:	df 91       	pop	r29
    1d68:	1f 91       	pop	r17
    1d6a:	0f 91       	pop	r16
    1d6c:	08 95       	ret

00001d6e <WDG_ENABLE>:
#include "MEMMAP.h"
#include "DIO.h"
#include <util/delay.h>
#include"WDG.h"

void WDG_ENABLE(void) {
    1d6e:	df 93       	push	r29
    1d70:	cf 93       	push	r28
    1d72:	cd b7       	in	r28, 0x3d	; 61
    1d74:	de b7       	in	r29, 0x3e	; 62
	//Timer Prescale Select
	SET_BIT(WDTCR, 0);
    1d76:	a1 e4       	ldi	r26, 0x41	; 65
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	e1 e4       	ldi	r30, 0x41	; 65
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	81 60       	ori	r24, 0x01	; 1
    1d82:	8c 93       	st	X, r24
	SET_BIT(WDTCR, 1);
    1d84:	a1 e4       	ldi	r26, 0x41	; 65
    1d86:	b0 e0       	ldi	r27, 0x00	; 0
    1d88:	e1 e4       	ldi	r30, 0x41	; 65
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	82 60       	ori	r24, 0x02	; 2
    1d90:	8c 93       	st	X, r24
	SET_BIT(WDTCR, 2);
    1d92:	a1 e4       	ldi	r26, 0x41	; 65
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	e1 e4       	ldi	r30, 0x41	; 65
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	84 60       	ori	r24, 0x04	; 4
    1d9e:	8c 93       	st	X, r24
	//Timer Enable
	SET_BIT(WDTCR, 3);
    1da0:	a1 e4       	ldi	r26, 0x41	; 65
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	e1 e4       	ldi	r30, 0x41	; 65
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	88 60       	ori	r24, 0x08	; 8
    1dac:	8c 93       	st	X, r24
}
    1dae:	cf 91       	pop	r28
    1db0:	df 91       	pop	r29
    1db2:	08 95       	ret

00001db4 <WDG_DISABLE>:

void WDG_DISABLE(void) {
    1db4:	df 93       	push	r29
    1db6:	cf 93       	push	r28
    1db8:	cd b7       	in	r28, 0x3d	; 61
    1dba:	de b7       	in	r29, 0x3e	; 62
	//Timer Enable Select
	SET_BIT(WDTCR, 3);
    1dbc:	a1 e4       	ldi	r26, 0x41	; 65
    1dbe:	b0 e0       	ldi	r27, 0x00	; 0
    1dc0:	e1 e4       	ldi	r30, 0x41	; 65
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	80 81       	ld	r24, Z
    1dc6:	88 60       	ori	r24, 0x08	; 8
    1dc8:	8c 93       	st	X, r24
	SET_BIT(WDTCR, 4);
    1dca:	a1 e4       	ldi	r26, 0x41	; 65
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	e1 e4       	ldi	r30, 0x41	; 65
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	80 61       	ori	r24, 0x10	; 16
    1dd6:	8c 93       	st	X, r24
	//_delay_ms(1000);
	//Timer Disable Select
	CLR_BIT(WDTCR, 3);
    1dd8:	a1 e4       	ldi	r26, 0x41	; 65
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	e1 e4       	ldi	r30, 0x41	; 65
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	87 7f       	andi	r24, 0xF7	; 247
    1de4:	8c 93       	st	X, r24
}
    1de6:	cf 91       	pop	r28
    1de8:	df 91       	pop	r29
    1dea:	08 95       	ret

00001dec <WDG_REFRESH>:

void WDG_REFRESH(void){
    1dec:	df 93       	push	r29
    1dee:	cf 93       	push	r28
    1df0:	cd b7       	in	r28, 0x3d	; 61
    1df2:	de b7       	in	r29, 0x3e	; 62
	asm volatile("wdr");
    1df4:	a8 95       	wdr
}
    1df6:	cf 91       	pop	r28
    1df8:	df 91       	pop	r29
    1dfa:	08 95       	ret

00001dfc <KEYPAD_READ>:

static uint8 KEYPAD_3[3][3] = { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } };
static uint8 KEYPAD_4[4][4] = { { 7, 8, 9, '/' }, { 4, 5, 6, '*' }, { 1, 2, 3,
		'-' }, { 'c', 0, '=', '+' } };

uint8 KEYPAD_READ(void) {
    1dfc:	df 93       	push	r29
    1dfe:	cf 93       	push	r28
    1e00:	00 d0       	rcall	.+0      	; 0x1e02 <KEYPAD_READ+0x6>
    1e02:	0f 92       	push	r0
    1e04:	cd b7       	in	r28, 0x3d	; 61
    1e06:	de b7       	in	r29, 0x3e	; 62
	uint8 key = NOT_PRESSED, r, c;
    1e08:	8d e6       	ldi	r24, 0x6D	; 109
    1e0a:	8b 83       	std	Y+3, r24	; 0x03
	DIO_WRITECHANNEL( KEYPAD_WRITEPORT, HIGH);
    1e0c:	84 e0       	ldi	r24, 0x04	; 4
    1e0e:	61 e0       	ldi	r22, 0x01	; 1
    1e10:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
	DIO_WRITECHANNEL( KEYPAD_WRITEPORT + 1, HIGH);
    1e14:	85 e0       	ldi	r24, 0x05	; 5
    1e16:	61 e0       	ldi	r22, 0x01	; 1
    1e18:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
	DIO_WRITECHANNEL( KEYPAD_WRITEPORT + 2, HIGH);
    1e1c:	86 e0       	ldi	r24, 0x06	; 6
    1e1e:	61 e0       	ldi	r22, 0x01	; 1
    1e20:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
	DIO_WRITECHANNEL( KEYPAD_WRITEPORT + 3, HIGH);
    1e24:	87 e0       	ldi	r24, 0x07	; 7
    1e26:	61 e0       	ldi	r22, 0x01	; 1
    1e28:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
		DIO_WRITECHANNEL(KEYPAD_WRITEPORT + r, HIGH);
	}

#elif KEYPAD_TYPE== KEYPAD_4_BY_4

	for (r = 0; r < 4; r++) {
    1e2c:	1a 82       	std	Y+2, r1	; 0x02
    1e2e:	33 c0       	rjmp	.+102    	; 0x1e96 <KEYPAD_READ+0x9a>
		DIO_WRITECHANNEL( KEYPAD_WRITEPORT + r, LOW);
    1e30:	8a 81       	ldd	r24, Y+2	; 0x02
    1e32:	8c 5f       	subi	r24, 0xFC	; 252
    1e34:	60 e0       	ldi	r22, 0x00	; 0
    1e36:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
		for (c = 0; c < 4; c++) {
    1e3a:	19 82       	std	Y+1, r1	; 0x01
    1e3c:	21 c0       	rjmp	.+66     	; 0x1e80 <KEYPAD_READ+0x84>
			if (!DIO_READCHANNEL(KEYPAD_READPORT + c)) {
    1e3e:	89 81       	ldd	r24, Y+1	; 0x01
    1e40:	86 5e       	subi	r24, 0xE6	; 230
    1e42:	0e 94 49 08 	call	0x1092	; 0x1092 <DIO_READCHANNEL>
    1e46:	88 23       	and	r24, r24
    1e48:	c1 f4       	brne	.+48     	; 0x1e7a <KEYPAD_READ+0x7e>
				key = KEYPAD_4[r][c];
    1e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4c:	48 2f       	mov	r20, r24
    1e4e:	50 e0       	ldi	r21, 0x00	; 0
    1e50:	89 81       	ldd	r24, Y+1	; 0x01
    1e52:	28 2f       	mov	r18, r24
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	ca 01       	movw	r24, r20
    1e58:	88 0f       	add	r24, r24
    1e5a:	99 1f       	adc	r25, r25
    1e5c:	88 0f       	add	r24, r24
    1e5e:	99 1f       	adc	r25, r25
    1e60:	82 0f       	add	r24, r18
    1e62:	93 1f       	adc	r25, r19
    1e64:	fc 01       	movw	r30, r24
    1e66:	ef 56       	subi	r30, 0x6F	; 111
    1e68:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6a:	80 81       	ld	r24, Z
    1e6c:	8b 83       	std	Y+3, r24	; 0x03
				while (!DIO_READCHANNEL(KEYPAD_READPORT+c))
    1e6e:	89 81       	ldd	r24, Y+1	; 0x01
    1e70:	86 5e       	subi	r24, 0xE6	; 230
    1e72:	0e 94 49 08 	call	0x1092	; 0x1092 <DIO_READCHANNEL>
    1e76:	88 23       	and	r24, r24
    1e78:	d1 f3       	breq	.-12     	; 0x1e6e <KEYPAD_READ+0x72>

#elif KEYPAD_TYPE== KEYPAD_4_BY_4

	for (r = 0; r < 4; r++) {
		DIO_WRITECHANNEL( KEYPAD_WRITEPORT + r, LOW);
		for (c = 0; c < 4; c++) {
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	8f 5f       	subi	r24, 0xFF	; 255
    1e7e:	89 83       	std	Y+1, r24	; 0x01
    1e80:	89 81       	ldd	r24, Y+1	; 0x01
    1e82:	84 30       	cpi	r24, 0x04	; 4
    1e84:	e0 f2       	brcs	.-72     	; 0x1e3e <KEYPAD_READ+0x42>
				key = KEYPAD_4[r][c];
				while (!DIO_READCHANNEL(KEYPAD_READPORT+c))
				;
			}
		}
		DIO_WRITECHANNEL(KEYPAD_WRITEPORT+r, HIGH);
    1e86:	8a 81       	ldd	r24, Y+2	; 0x02
    1e88:	8c 5f       	subi	r24, 0xFC	; 252
    1e8a:	61 e0       	ldi	r22, 0x01	; 1
    1e8c:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
		DIO_WRITECHANNEL(KEYPAD_WRITEPORT + r, HIGH);
	}

#elif KEYPAD_TYPE== KEYPAD_4_BY_4

	for (r = 0; r < 4; r++) {
    1e90:	8a 81       	ldd	r24, Y+2	; 0x02
    1e92:	8f 5f       	subi	r24, 0xFF	; 255
    1e94:	8a 83       	std	Y+2, r24	; 0x02
    1e96:	8a 81       	ldd	r24, Y+2	; 0x02
    1e98:	84 30       	cpi	r24, 0x04	; 4
    1e9a:	50 f2       	brcs	.-108    	; 0x1e30 <KEYPAD_READ+0x34>
			}
		}
		DIO_WRITECHANNEL(KEYPAD_WRITEPORT+r, HIGH);
	}
#endif
	return key;
    1e9c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1e9e:	0f 90       	pop	r0
    1ea0:	0f 90       	pop	r0
    1ea2:	0f 90       	pop	r0
    1ea4:	cf 91       	pop	r28
    1ea6:	df 91       	pop	r29
    1ea8:	08 95       	ret

00001eaa <KEYPAD_READDEBOUNCING>:
uint8 KEYPAD_READDEBOUNCING(void) {
    1eaa:	df 93       	push	r29
    1eac:	cf 93       	push	r28
    1eae:	00 d0       	rcall	.+0      	; 0x1eb0 <KEYPAD_READDEBOUNCING+0x6>
    1eb0:	00 d0       	rcall	.+0      	; 0x1eb2 <KEYPAD_READDEBOUNCING+0x8>
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62
	uint8 key = NOT_PRESSED, r, c;
    1eb6:	8d e6       	ldi	r24, 0x6D	; 109
    1eb8:	8c 83       	std	Y+4, r24	; 0x04
	static uint8 PREVIOUS_KEY = NOT_PRESSED,count=0;
	uint8 CURRENT_KEY = NOT_PRESSED;
    1eba:	8d e6       	ldi	r24, 0x6D	; 109
    1ebc:	89 83       	std	Y+1, r24	; 0x01

	DIO_WRITECHANNEL( KEYPAD_WRITEPORT, HIGH);
    1ebe:	84 e0       	ldi	r24, 0x04	; 4
    1ec0:	61 e0       	ldi	r22, 0x01	; 1
    1ec2:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
	DIO_WRITECHANNEL( KEYPAD_WRITEPORT + 1, HIGH);
    1ec6:	85 e0       	ldi	r24, 0x05	; 5
    1ec8:	61 e0       	ldi	r22, 0x01	; 1
    1eca:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
	DIO_WRITECHANNEL( KEYPAD_WRITEPORT + 2, HIGH);
    1ece:	86 e0       	ldi	r24, 0x06	; 6
    1ed0:	61 e0       	ldi	r22, 0x01	; 1
    1ed2:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
	DIO_WRITECHANNEL( KEYPAD_WRITEPORT + 3, HIGH);
    1ed6:	87 e0       	ldi	r24, 0x07	; 7
    1ed8:	61 e0       	ldi	r22, 0x01	; 1
    1eda:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
		DIO_WRITECHANNEL(KEYPAD_WRITEPORT + r, HIGH);
	}

#elif KEYPAD_TYPE== KEYPAD_4_BY_4

	for (r = 0; r < 4; r++) {
    1ede:	1b 82       	std	Y+3, r1	; 0x03
    1ee0:	43 c0       	rjmp	.+134    	; 0x1f68 <KEYPAD_READDEBOUNCING+0xbe>
		DIO_WRITECHANNEL( KEYPAD_WRITEPORT + r, LOW);
    1ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee4:	8c 5f       	subi	r24, 0xFC	; 252
    1ee6:	60 e0       	ldi	r22, 0x00	; 0
    1ee8:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
		for (c = 0; c < 4; c++) {
    1eec:	1a 82       	std	Y+2, r1	; 0x02
    1eee:	31 c0       	rjmp	.+98     	; 0x1f52 <KEYPAD_READDEBOUNCING+0xa8>
			if (!DIO_READCHANNEL(KEYPAD_READPORT + c)) {
    1ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef2:	86 5e       	subi	r24, 0xE6	; 230
    1ef4:	0e 94 49 08 	call	0x1092	; 0x1092 <DIO_READCHANNEL>
    1ef8:	88 23       	and	r24, r24
    1efa:	41 f5       	brne	.+80     	; 0x1f4c <KEYPAD_READDEBOUNCING+0xa2>
				CURRENT_KEY = KEYPAD_4[r][c];
    1efc:	8b 81       	ldd	r24, Y+3	; 0x03
    1efe:	48 2f       	mov	r20, r24
    1f00:	50 e0       	ldi	r21, 0x00	; 0
    1f02:	8a 81       	ldd	r24, Y+2	; 0x02
    1f04:	28 2f       	mov	r18, r24
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	ca 01       	movw	r24, r20
    1f0a:	88 0f       	add	r24, r24
    1f0c:	99 1f       	adc	r25, r25
    1f0e:	88 0f       	add	r24, r24
    1f10:	99 1f       	adc	r25, r25
    1f12:	82 0f       	add	r24, r18
    1f14:	93 1f       	adc	r25, r19
    1f16:	fc 01       	movw	r30, r24
    1f18:	ef 56       	subi	r30, 0x6F	; 111
    1f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1c:	80 81       	ld	r24, Z
    1f1e:	89 83       	std	Y+1, r24	; 0x01
				if(PREVIOUS_KEY==CURRENT_KEY) {
    1f20:	90 91 a1 00 	lds	r25, 0x00A1
    1f24:	89 81       	ldd	r24, Y+1	; 0x01
    1f26:	98 17       	cp	r25, r24
    1f28:	31 f4       	brne	.+12     	; 0x1f36 <KEYPAD_READDEBOUNCING+0x8c>
					count++;
    1f2a:	80 91 73 01 	lds	r24, 0x0173
    1f2e:	8f 5f       	subi	r24, 0xFF	; 255
    1f30:	80 93 73 01 	sts	0x0173, r24
    1f34:	02 c0       	rjmp	.+4      	; 0x1f3a <KEYPAD_READDEBOUNCING+0x90>
				}
				else {count=0;}
    1f36:	10 92 73 01 	sts	0x0173, r1
				if(count==5) {
    1f3a:	80 91 73 01 	lds	r24, 0x0173
    1f3e:	85 30       	cpi	r24, 0x05	; 5
    1f40:	11 f4       	brne	.+4      	; 0x1f46 <KEYPAD_READDEBOUNCING+0x9c>
					key=CURRENT_KEY;
    1f42:	89 81       	ldd	r24, Y+1	; 0x01
    1f44:	8c 83       	std	Y+4, r24	; 0x04
				}
				PREVIOUS_KEY=CURRENT_KEY;
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
    1f48:	80 93 a1 00 	sts	0x00A1, r24

#elif KEYPAD_TYPE== KEYPAD_4_BY_4

	for (r = 0; r < 4; r++) {
		DIO_WRITECHANNEL( KEYPAD_WRITEPORT + r, LOW);
		for (c = 0; c < 4; c++) {
    1f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4e:	8f 5f       	subi	r24, 0xFF	; 255
    1f50:	8a 83       	std	Y+2, r24	; 0x02
    1f52:	8a 81       	ldd	r24, Y+2	; 0x02
    1f54:	84 30       	cpi	r24, 0x04	; 4
    1f56:	60 f2       	brcs	.-104    	; 0x1ef0 <KEYPAD_READDEBOUNCING+0x46>
				}
				PREVIOUS_KEY=CURRENT_KEY;
				//TOGGLE_BIT(PORTA,0);
			}
		}
		DIO_WRITECHANNEL(KEYPAD_WRITEPORT+r, HIGH);
    1f58:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5a:	8c 5f       	subi	r24, 0xFC	; 252
    1f5c:	61 e0       	ldi	r22, 0x01	; 1
    1f5e:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
		DIO_WRITECHANNEL(KEYPAD_WRITEPORT + r, HIGH);
	}

#elif KEYPAD_TYPE== KEYPAD_4_BY_4

	for (r = 0; r < 4; r++) {
    1f62:	8b 81       	ldd	r24, Y+3	; 0x03
    1f64:	8f 5f       	subi	r24, 0xFF	; 255
    1f66:	8b 83       	std	Y+3, r24	; 0x03
    1f68:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6a:	84 30       	cpi	r24, 0x04	; 4
    1f6c:	08 f4       	brcc	.+2      	; 0x1f70 <KEYPAD_READDEBOUNCING+0xc6>
    1f6e:	b9 cf       	rjmp	.-142    	; 0x1ee2 <KEYPAD_READDEBOUNCING+0x38>
			}
		}
		DIO_WRITECHANNEL(KEYPAD_WRITEPORT+r, HIGH);
	}
#endif
	return key;
    1f70:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1f72:	0f 90       	pop	r0
    1f74:	0f 90       	pop	r0
    1f76:	0f 90       	pop	r0
    1f78:	0f 90       	pop	r0
    1f7a:	cf 91       	pop	r28
    1f7c:	df 91       	pop	r29
    1f7e:	08 95       	ret

00001f80 <LCD_VIDSENDCOMMAND>:
#include "MEMMAP.h"
#include <util/delay.h>
#include "DIO.h"
#include "LCD.h"

void LCD_VIDSENDCOMMAND(uint8 Command) {
    1f80:	1f 93       	push	r17
    1f82:	df 93       	push	r29
    1f84:	cf 93       	push	r28
    1f86:	cd b7       	in	r28, 0x3d	; 61
    1f88:	de b7       	in	r29, 0x3e	; 62
    1f8a:	ea 97       	sbiw	r28, 0x3a	; 58
    1f8c:	0f b6       	in	r0, 0x3f	; 63
    1f8e:	f8 94       	cli
    1f90:	de bf       	out	0x3e, r29	; 62
    1f92:	0f be       	out	0x3f, r0	; 63
    1f94:	cd bf       	out	0x3d, r28	; 61
    1f96:	8a af       	std	Y+58, r24	; 0x3a
	_delay_ms(2);
	/* SET E to HIGH */
	DIO_WRITECHANNEL( E, HIGH);
	_delay_ms(5);
#elif LCD_MODE==_4BITMODE
	uint8 c=0;
    1f98:	19 ae       	std	Y+57, r1	; 0x39
	/* SET RS to LOW */
	DIO_WRITECHANNEL(RS,LOW);
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	60 e0       	ldi	r22, 0x00	; 0
    1f9e:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
	/* SET R/W to LOW */
	DIO_WRITECHANNEL( RW ,LOW);
    1fa2:	81 e1       	ldi	r24, 0x11	; 17
    1fa4:	60 e0       	ldi	r22, 0x00	; 0
    1fa6:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
	/* SET E to HIGH */
	DIO_WRITECHANNEL( E ,HIGH);
    1faa:	82 e0       	ldi	r24, 0x02	; 2
    1fac:	61 e0       	ldi	r22, 0x01	; 1
    1fae:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
	/* WRITE COMMAND */
	c=(((Command >>1)& 0x78)| 0x04)| DIO_READCHANNEL(PINA0);
    1fb2:	8a ad       	ldd	r24, Y+58	; 0x3a
    1fb4:	86 95       	lsr	r24
    1fb6:	88 77       	andi	r24, 0x78	; 120
    1fb8:	18 2f       	mov	r17, r24
    1fba:	14 60       	ori	r17, 0x04	; 4
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	0e 94 49 08 	call	0x1092	; 0x1092 <DIO_READCHANNEL>
    1fc2:	81 2b       	or	r24, r17
    1fc4:	89 af       	std	Y+57, r24	; 0x39
	DIO_WRITEPORT( LCD_WRITE_PORT ,c);
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	69 ad       	ldd	r22, Y+57	; 0x39
    1fca:	0e 94 08 08 	call	0x1010	; 0x1010 <DIO_WRITEPORT>
	/* SET E to LOW */
	DIO_WRITECHANNEL( E ,LOW);
    1fce:	82 e0       	ldi	r24, 0x02	; 2
    1fd0:	60 e0       	ldi	r22, 0x00	; 0
    1fd2:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
    1fd6:	80 e0       	ldi	r24, 0x00	; 0
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	a0 e0       	ldi	r26, 0x00	; 0
    1fdc:	b0 e4       	ldi	r27, 0x40	; 64
    1fde:	8d ab       	std	Y+53, r24	; 0x35
    1fe0:	9e ab       	std	Y+54, r25	; 0x36
    1fe2:	af ab       	std	Y+55, r26	; 0x37
    1fe4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fe6:	6d a9       	ldd	r22, Y+53	; 0x35
    1fe8:	7e a9       	ldd	r23, Y+54	; 0x36
    1fea:	8f a9       	ldd	r24, Y+55	; 0x37
    1fec:	98 ad       	ldd	r25, Y+56	; 0x38
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	4a e7       	ldi	r20, 0x7A	; 122
    1ff4:	55 e4       	ldi	r21, 0x45	; 69
    1ff6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	89 ab       	std	Y+49, r24	; 0x31
    2000:	9a ab       	std	Y+50, r25	; 0x32
    2002:	ab ab       	std	Y+51, r26	; 0x33
    2004:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2006:	69 a9       	ldd	r22, Y+49	; 0x31
    2008:	7a a9       	ldd	r23, Y+50	; 0x32
    200a:	8b a9       	ldd	r24, Y+51	; 0x33
    200c:	9c a9       	ldd	r25, Y+52	; 0x34
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	40 e8       	ldi	r20, 0x80	; 128
    2014:	5f e3       	ldi	r21, 0x3F	; 63
    2016:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    201a:	88 23       	and	r24, r24
    201c:	2c f4       	brge	.+10     	; 0x2028 <LCD_VIDSENDCOMMAND+0xa8>
		__ticks = 1;
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	98 ab       	std	Y+48, r25	; 0x30
    2024:	8f a7       	std	Y+47, r24	; 0x2f
    2026:	3f c0       	rjmp	.+126    	; 0x20a6 <LCD_VIDSENDCOMMAND+0x126>
	else if (__tmp > 65535)
    2028:	69 a9       	ldd	r22, Y+49	; 0x31
    202a:	7a a9       	ldd	r23, Y+50	; 0x32
    202c:	8b a9       	ldd	r24, Y+51	; 0x33
    202e:	9c a9       	ldd	r25, Y+52	; 0x34
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	3f ef       	ldi	r19, 0xFF	; 255
    2034:	4f e7       	ldi	r20, 0x7F	; 127
    2036:	57 e4       	ldi	r21, 0x47	; 71
    2038:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    203c:	18 16       	cp	r1, r24
    203e:	4c f5       	brge	.+82     	; 0x2092 <LCD_VIDSENDCOMMAND+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2040:	6d a9       	ldd	r22, Y+53	; 0x35
    2042:	7e a9       	ldd	r23, Y+54	; 0x36
    2044:	8f a9       	ldd	r24, Y+55	; 0x37
    2046:	98 ad       	ldd	r25, Y+56	; 0x38
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	40 e2       	ldi	r20, 0x20	; 32
    204e:	51 e4       	ldi	r21, 0x41	; 65
    2050:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	bc 01       	movw	r22, r24
    205a:	cd 01       	movw	r24, r26
    205c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2060:	dc 01       	movw	r26, r24
    2062:	cb 01       	movw	r24, r22
    2064:	98 ab       	std	Y+48, r25	; 0x30
    2066:	8f a7       	std	Y+47, r24	; 0x2f
    2068:	0f c0       	rjmp	.+30     	; 0x2088 <LCD_VIDSENDCOMMAND+0x108>
    206a:	80 e9       	ldi	r24, 0x90	; 144
    206c:	91 e0       	ldi	r25, 0x01	; 1
    206e:	9e a7       	std	Y+46, r25	; 0x2e
    2070:	8d a7       	std	Y+45, r24	; 0x2d
    2072:	8d a5       	ldd	r24, Y+45	; 0x2d
    2074:	9e a5       	ldd	r25, Y+46	; 0x2e
    2076:	01 97       	sbiw	r24, 0x01	; 1
    2078:	f1 f7       	brne	.-4      	; 0x2076 <LCD_VIDSENDCOMMAND+0xf6>
    207a:	9e a7       	std	Y+46, r25	; 0x2e
    207c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    207e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2080:	98 a9       	ldd	r25, Y+48	; 0x30
    2082:	01 97       	sbiw	r24, 0x01	; 1
    2084:	98 ab       	std	Y+48, r25	; 0x30
    2086:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2088:	8f a5       	ldd	r24, Y+47	; 0x2f
    208a:	98 a9       	ldd	r25, Y+48	; 0x30
    208c:	00 97       	sbiw	r24, 0x00	; 0
    208e:	69 f7       	brne	.-38     	; 0x206a <LCD_VIDSENDCOMMAND+0xea>
    2090:	14 c0       	rjmp	.+40     	; 0x20ba <LCD_VIDSENDCOMMAND+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2092:	69 a9       	ldd	r22, Y+49	; 0x31
    2094:	7a a9       	ldd	r23, Y+50	; 0x32
    2096:	8b a9       	ldd	r24, Y+51	; 0x33
    2098:	9c a9       	ldd	r25, Y+52	; 0x34
    209a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	98 ab       	std	Y+48, r25	; 0x30
    20a4:	8f a7       	std	Y+47, r24	; 0x2f
    20a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    20a8:	98 a9       	ldd	r25, Y+48	; 0x30
    20aa:	9c a7       	std	Y+44, r25	; 0x2c
    20ac:	8b a7       	std	Y+43, r24	; 0x2b
    20ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    20b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    20b2:	01 97       	sbiw	r24, 0x01	; 1
    20b4:	f1 f7       	brne	.-4      	; 0x20b2 <LCD_VIDSENDCOMMAND+0x132>
    20b6:	9c a7       	std	Y+44, r25	; 0x2c
    20b8:	8b a7       	std	Y+43, r24	; 0x2b
	/* wait for E to settle */
	_delay_ms(2);
	/* SET E to HIGH */
	DIO_WRITECHANNEL( E ,HIGH);
    20ba:	82 e0       	ldi	r24, 0x02	; 2
    20bc:	61 e0       	ldi	r22, 0x01	; 1
    20be:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
    20c2:	80 e0       	ldi	r24, 0x00	; 0
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	a0 e8       	ldi	r26, 0x80	; 128
    20c8:	bf e3       	ldi	r27, 0x3F	; 63
    20ca:	8f a3       	std	Y+39, r24	; 0x27
    20cc:	98 a7       	std	Y+40, r25	; 0x28
    20ce:	a9 a7       	std	Y+41, r26	; 0x29
    20d0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20d2:	6f a1       	ldd	r22, Y+39	; 0x27
    20d4:	78 a5       	ldd	r23, Y+40	; 0x28
    20d6:	89 a5       	ldd	r24, Y+41	; 0x29
    20d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	4a e7       	ldi	r20, 0x7A	; 122
    20e0:	55 e4       	ldi	r21, 0x45	; 69
    20e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e6:	dc 01       	movw	r26, r24
    20e8:	cb 01       	movw	r24, r22
    20ea:	8b a3       	std	Y+35, r24	; 0x23
    20ec:	9c a3       	std	Y+36, r25	; 0x24
    20ee:	ad a3       	std	Y+37, r26	; 0x25
    20f0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20f2:	6b a1       	ldd	r22, Y+35	; 0x23
    20f4:	7c a1       	ldd	r23, Y+36	; 0x24
    20f6:	8d a1       	ldd	r24, Y+37	; 0x25
    20f8:	9e a1       	ldd	r25, Y+38	; 0x26
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	40 e8       	ldi	r20, 0x80	; 128
    2100:	5f e3       	ldi	r21, 0x3F	; 63
    2102:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2106:	88 23       	and	r24, r24
    2108:	2c f4       	brge	.+10     	; 0x2114 <LCD_VIDSENDCOMMAND+0x194>
		__ticks = 1;
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	9a a3       	std	Y+34, r25	; 0x22
    2110:	89 a3       	std	Y+33, r24	; 0x21
    2112:	3f c0       	rjmp	.+126    	; 0x2192 <LCD_VIDSENDCOMMAND+0x212>
	else if (__tmp > 65535)
    2114:	6b a1       	ldd	r22, Y+35	; 0x23
    2116:	7c a1       	ldd	r23, Y+36	; 0x24
    2118:	8d a1       	ldd	r24, Y+37	; 0x25
    211a:	9e a1       	ldd	r25, Y+38	; 0x26
    211c:	20 e0       	ldi	r18, 0x00	; 0
    211e:	3f ef       	ldi	r19, 0xFF	; 255
    2120:	4f e7       	ldi	r20, 0x7F	; 127
    2122:	57 e4       	ldi	r21, 0x47	; 71
    2124:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2128:	18 16       	cp	r1, r24
    212a:	4c f5       	brge	.+82     	; 0x217e <LCD_VIDSENDCOMMAND+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    212c:	6f a1       	ldd	r22, Y+39	; 0x27
    212e:	78 a5       	ldd	r23, Y+40	; 0x28
    2130:	89 a5       	ldd	r24, Y+41	; 0x29
    2132:	9a a5       	ldd	r25, Y+42	; 0x2a
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	40 e2       	ldi	r20, 0x20	; 32
    213a:	51 e4       	ldi	r21, 0x41	; 65
    213c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2140:	dc 01       	movw	r26, r24
    2142:	cb 01       	movw	r24, r22
    2144:	bc 01       	movw	r22, r24
    2146:	cd 01       	movw	r24, r26
    2148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214c:	dc 01       	movw	r26, r24
    214e:	cb 01       	movw	r24, r22
    2150:	9a a3       	std	Y+34, r25	; 0x22
    2152:	89 a3       	std	Y+33, r24	; 0x21
    2154:	0f c0       	rjmp	.+30     	; 0x2174 <LCD_VIDSENDCOMMAND+0x1f4>
    2156:	80 e9       	ldi	r24, 0x90	; 144
    2158:	91 e0       	ldi	r25, 0x01	; 1
    215a:	98 a3       	std	Y+32, r25	; 0x20
    215c:	8f 8f       	std	Y+31, r24	; 0x1f
    215e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2160:	98 a1       	ldd	r25, Y+32	; 0x20
    2162:	01 97       	sbiw	r24, 0x01	; 1
    2164:	f1 f7       	brne	.-4      	; 0x2162 <LCD_VIDSENDCOMMAND+0x1e2>
    2166:	98 a3       	std	Y+32, r25	; 0x20
    2168:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    216a:	89 a1       	ldd	r24, Y+33	; 0x21
    216c:	9a a1       	ldd	r25, Y+34	; 0x22
    216e:	01 97       	sbiw	r24, 0x01	; 1
    2170:	9a a3       	std	Y+34, r25	; 0x22
    2172:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2174:	89 a1       	ldd	r24, Y+33	; 0x21
    2176:	9a a1       	ldd	r25, Y+34	; 0x22
    2178:	00 97       	sbiw	r24, 0x00	; 0
    217a:	69 f7       	brne	.-38     	; 0x2156 <LCD_VIDSENDCOMMAND+0x1d6>
    217c:	14 c0       	rjmp	.+40     	; 0x21a6 <LCD_VIDSENDCOMMAND+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    217e:	6b a1       	ldd	r22, Y+35	; 0x23
    2180:	7c a1       	ldd	r23, Y+36	; 0x24
    2182:	8d a1       	ldd	r24, Y+37	; 0x25
    2184:	9e a1       	ldd	r25, Y+38	; 0x26
    2186:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    218a:	dc 01       	movw	r26, r24
    218c:	cb 01       	movw	r24, r22
    218e:	9a a3       	std	Y+34, r25	; 0x22
    2190:	89 a3       	std	Y+33, r24	; 0x21
    2192:	89 a1       	ldd	r24, Y+33	; 0x21
    2194:	9a a1       	ldd	r25, Y+34	; 0x22
    2196:	9e 8f       	std	Y+30, r25	; 0x1e
    2198:	8d 8f       	std	Y+29, r24	; 0x1d
    219a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    219c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    219e:	01 97       	sbiw	r24, 0x01	; 1
    21a0:	f1 f7       	brne	.-4      	; 0x219e <LCD_VIDSENDCOMMAND+0x21e>
    21a2:	9e 8f       	std	Y+30, r25	; 0x1e
    21a4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/* WRITE COMMAND */
	//c=(Command & 0x0F);
	c=(((Command<<3)& 0x78)| 0x04)| DIO_READCHANNEL(PINA0);
    21a6:	8a ad       	ldd	r24, Y+58	; 0x3a
    21a8:	88 2f       	mov	r24, r24
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	88 0f       	add	r24, r24
    21ae:	99 1f       	adc	r25, r25
    21b0:	88 0f       	add	r24, r24
    21b2:	99 1f       	adc	r25, r25
    21b4:	88 0f       	add	r24, r24
    21b6:	99 1f       	adc	r25, r25
    21b8:	88 77       	andi	r24, 0x78	; 120
    21ba:	18 2f       	mov	r17, r24
    21bc:	14 60       	ori	r17, 0x04	; 4
    21be:	80 e0       	ldi	r24, 0x00	; 0
    21c0:	0e 94 49 08 	call	0x1092	; 0x1092 <DIO_READCHANNEL>
    21c4:	81 2b       	or	r24, r17
    21c6:	89 af       	std	Y+57, r24	; 0x39
	DIO_WRITEPORT( LCD_WRITE_PORT ,c);
    21c8:	80 e0       	ldi	r24, 0x00	; 0
    21ca:	69 ad       	ldd	r22, Y+57	; 0x39
    21cc:	0e 94 08 08 	call	0x1010	; 0x1010 <DIO_WRITEPORT>
	/* SET E to LOW */
	DIO_WRITECHANNEL( E ,LOW);
    21d0:	82 e0       	ldi	r24, 0x02	; 2
    21d2:	60 e0       	ldi	r22, 0x00	; 0
    21d4:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
    21d8:	80 e0       	ldi	r24, 0x00	; 0
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	a0 e0       	ldi	r26, 0x00	; 0
    21de:	b0 e4       	ldi	r27, 0x40	; 64
    21e0:	89 8f       	std	Y+25, r24	; 0x19
    21e2:	9a 8f       	std	Y+26, r25	; 0x1a
    21e4:	ab 8f       	std	Y+27, r26	; 0x1b
    21e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e8:	69 8d       	ldd	r22, Y+25	; 0x19
    21ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	4a e7       	ldi	r20, 0x7A	; 122
    21f6:	55 e4       	ldi	r21, 0x45	; 69
    21f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	8d 8b       	std	Y+21, r24	; 0x15
    2202:	9e 8b       	std	Y+22, r25	; 0x16
    2204:	af 8b       	std	Y+23, r26	; 0x17
    2206:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2208:	6d 89       	ldd	r22, Y+21	; 0x15
    220a:	7e 89       	ldd	r23, Y+22	; 0x16
    220c:	8f 89       	ldd	r24, Y+23	; 0x17
    220e:	98 8d       	ldd	r25, Y+24	; 0x18
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	40 e8       	ldi	r20, 0x80	; 128
    2216:	5f e3       	ldi	r21, 0x3F	; 63
    2218:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    221c:	88 23       	and	r24, r24
    221e:	2c f4       	brge	.+10     	; 0x222a <LCD_VIDSENDCOMMAND+0x2aa>
		__ticks = 1;
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	9c 8b       	std	Y+20, r25	; 0x14
    2226:	8b 8b       	std	Y+19, r24	; 0x13
    2228:	3f c0       	rjmp	.+126    	; 0x22a8 <LCD_VIDSENDCOMMAND+0x328>
	else if (__tmp > 65535)
    222a:	6d 89       	ldd	r22, Y+21	; 0x15
    222c:	7e 89       	ldd	r23, Y+22	; 0x16
    222e:	8f 89       	ldd	r24, Y+23	; 0x17
    2230:	98 8d       	ldd	r25, Y+24	; 0x18
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	3f ef       	ldi	r19, 0xFF	; 255
    2236:	4f e7       	ldi	r20, 0x7F	; 127
    2238:	57 e4       	ldi	r21, 0x47	; 71
    223a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    223e:	18 16       	cp	r1, r24
    2240:	4c f5       	brge	.+82     	; 0x2294 <LCD_VIDSENDCOMMAND+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2242:	69 8d       	ldd	r22, Y+25	; 0x19
    2244:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2246:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2248:	9c 8d       	ldd	r25, Y+28	; 0x1c
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	40 e2       	ldi	r20, 0x20	; 32
    2250:	51 e4       	ldi	r21, 0x41	; 65
    2252:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	bc 01       	movw	r22, r24
    225c:	cd 01       	movw	r24, r26
    225e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	9c 8b       	std	Y+20, r25	; 0x14
    2268:	8b 8b       	std	Y+19, r24	; 0x13
    226a:	0f c0       	rjmp	.+30     	; 0x228a <LCD_VIDSENDCOMMAND+0x30a>
    226c:	80 e9       	ldi	r24, 0x90	; 144
    226e:	91 e0       	ldi	r25, 0x01	; 1
    2270:	9a 8b       	std	Y+18, r25	; 0x12
    2272:	89 8b       	std	Y+17, r24	; 0x11
    2274:	89 89       	ldd	r24, Y+17	; 0x11
    2276:	9a 89       	ldd	r25, Y+18	; 0x12
    2278:	01 97       	sbiw	r24, 0x01	; 1
    227a:	f1 f7       	brne	.-4      	; 0x2278 <LCD_VIDSENDCOMMAND+0x2f8>
    227c:	9a 8b       	std	Y+18, r25	; 0x12
    227e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2280:	8b 89       	ldd	r24, Y+19	; 0x13
    2282:	9c 89       	ldd	r25, Y+20	; 0x14
    2284:	01 97       	sbiw	r24, 0x01	; 1
    2286:	9c 8b       	std	Y+20, r25	; 0x14
    2288:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    228a:	8b 89       	ldd	r24, Y+19	; 0x13
    228c:	9c 89       	ldd	r25, Y+20	; 0x14
    228e:	00 97       	sbiw	r24, 0x00	; 0
    2290:	69 f7       	brne	.-38     	; 0x226c <LCD_VIDSENDCOMMAND+0x2ec>
    2292:	14 c0       	rjmp	.+40     	; 0x22bc <LCD_VIDSENDCOMMAND+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2294:	6d 89       	ldd	r22, Y+21	; 0x15
    2296:	7e 89       	ldd	r23, Y+22	; 0x16
    2298:	8f 89       	ldd	r24, Y+23	; 0x17
    229a:	98 8d       	ldd	r25, Y+24	; 0x18
    229c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	9c 8b       	std	Y+20, r25	; 0x14
    22a6:	8b 8b       	std	Y+19, r24	; 0x13
    22a8:	8b 89       	ldd	r24, Y+19	; 0x13
    22aa:	9c 89       	ldd	r25, Y+20	; 0x14
    22ac:	98 8b       	std	Y+16, r25	; 0x10
    22ae:	8f 87       	std	Y+15, r24	; 0x0f
    22b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    22b2:	98 89       	ldd	r25, Y+16	; 0x10
    22b4:	01 97       	sbiw	r24, 0x01	; 1
    22b6:	f1 f7       	brne	.-4      	; 0x22b4 <LCD_VIDSENDCOMMAND+0x334>
    22b8:	98 8b       	std	Y+16, r25	; 0x10
    22ba:	8f 87       	std	Y+15, r24	; 0x0f
	/* wait for E to settle */
	_delay_ms(2);
	/* SET E to HIGH */
	DIO_WRITECHANNEL( E ,HIGH);
    22bc:	82 e0       	ldi	r24, 0x02	; 2
    22be:	61 e0       	ldi	r22, 0x01	; 1
    22c0:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
    22c4:	80 e0       	ldi	r24, 0x00	; 0
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	a0 ea       	ldi	r26, 0xA0	; 160
    22ca:	b0 e4       	ldi	r27, 0x40	; 64
    22cc:	8b 87       	std	Y+11, r24	; 0x0b
    22ce:	9c 87       	std	Y+12, r25	; 0x0c
    22d0:	ad 87       	std	Y+13, r26	; 0x0d
    22d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22da:	9e 85       	ldd	r25, Y+14	; 0x0e
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	4a e7       	ldi	r20, 0x7A	; 122
    22e2:	55 e4       	ldi	r21, 0x45	; 69
    22e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	8f 83       	std	Y+7, r24	; 0x07
    22ee:	98 87       	std	Y+8, r25	; 0x08
    22f0:	a9 87       	std	Y+9, r26	; 0x09
    22f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22f4:	6f 81       	ldd	r22, Y+7	; 0x07
    22f6:	78 85       	ldd	r23, Y+8	; 0x08
    22f8:	89 85       	ldd	r24, Y+9	; 0x09
    22fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	40 e8       	ldi	r20, 0x80	; 128
    2302:	5f e3       	ldi	r21, 0x3F	; 63
    2304:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2308:	88 23       	and	r24, r24
    230a:	2c f4       	brge	.+10     	; 0x2316 <LCD_VIDSENDCOMMAND+0x396>
		__ticks = 1;
    230c:	81 e0       	ldi	r24, 0x01	; 1
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	9e 83       	std	Y+6, r25	; 0x06
    2312:	8d 83       	std	Y+5, r24	; 0x05
    2314:	3f c0       	rjmp	.+126    	; 0x2394 <LCD_VIDSENDCOMMAND+0x414>
	else if (__tmp > 65535)
    2316:	6f 81       	ldd	r22, Y+7	; 0x07
    2318:	78 85       	ldd	r23, Y+8	; 0x08
    231a:	89 85       	ldd	r24, Y+9	; 0x09
    231c:	9a 85       	ldd	r25, Y+10	; 0x0a
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	3f ef       	ldi	r19, 0xFF	; 255
    2322:	4f e7       	ldi	r20, 0x7F	; 127
    2324:	57 e4       	ldi	r21, 0x47	; 71
    2326:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    232a:	18 16       	cp	r1, r24
    232c:	4c f5       	brge	.+82     	; 0x2380 <LCD_VIDSENDCOMMAND+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    232e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2330:	7c 85       	ldd	r23, Y+12	; 0x0c
    2332:	8d 85       	ldd	r24, Y+13	; 0x0d
    2334:	9e 85       	ldd	r25, Y+14	; 0x0e
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	40 e2       	ldi	r20, 0x20	; 32
    233c:	51 e4       	ldi	r21, 0x41	; 65
    233e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	bc 01       	movw	r22, r24
    2348:	cd 01       	movw	r24, r26
    234a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    234e:	dc 01       	movw	r26, r24
    2350:	cb 01       	movw	r24, r22
    2352:	9e 83       	std	Y+6, r25	; 0x06
    2354:	8d 83       	std	Y+5, r24	; 0x05
    2356:	0f c0       	rjmp	.+30     	; 0x2376 <LCD_VIDSENDCOMMAND+0x3f6>
    2358:	80 e9       	ldi	r24, 0x90	; 144
    235a:	91 e0       	ldi	r25, 0x01	; 1
    235c:	9c 83       	std	Y+4, r25	; 0x04
    235e:	8b 83       	std	Y+3, r24	; 0x03
    2360:	8b 81       	ldd	r24, Y+3	; 0x03
    2362:	9c 81       	ldd	r25, Y+4	; 0x04
    2364:	01 97       	sbiw	r24, 0x01	; 1
    2366:	f1 f7       	brne	.-4      	; 0x2364 <LCD_VIDSENDCOMMAND+0x3e4>
    2368:	9c 83       	std	Y+4, r25	; 0x04
    236a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    236c:	8d 81       	ldd	r24, Y+5	; 0x05
    236e:	9e 81       	ldd	r25, Y+6	; 0x06
    2370:	01 97       	sbiw	r24, 0x01	; 1
    2372:	9e 83       	std	Y+6, r25	; 0x06
    2374:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2376:	8d 81       	ldd	r24, Y+5	; 0x05
    2378:	9e 81       	ldd	r25, Y+6	; 0x06
    237a:	00 97       	sbiw	r24, 0x00	; 0
    237c:	69 f7       	brne	.-38     	; 0x2358 <LCD_VIDSENDCOMMAND+0x3d8>
    237e:	14 c0       	rjmp	.+40     	; 0x23a8 <LCD_VIDSENDCOMMAND+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2380:	6f 81       	ldd	r22, Y+7	; 0x07
    2382:	78 85       	ldd	r23, Y+8	; 0x08
    2384:	89 85       	ldd	r24, Y+9	; 0x09
    2386:	9a 85       	ldd	r25, Y+10	; 0x0a
    2388:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238c:	dc 01       	movw	r26, r24
    238e:	cb 01       	movw	r24, r22
    2390:	9e 83       	std	Y+6, r25	; 0x06
    2392:	8d 83       	std	Y+5, r24	; 0x05
    2394:	8d 81       	ldd	r24, Y+5	; 0x05
    2396:	9e 81       	ldd	r25, Y+6	; 0x06
    2398:	9a 83       	std	Y+2, r25	; 0x02
    239a:	89 83       	std	Y+1, r24	; 0x01
    239c:	89 81       	ldd	r24, Y+1	; 0x01
    239e:	9a 81       	ldd	r25, Y+2	; 0x02
    23a0:	01 97       	sbiw	r24, 0x01	; 1
    23a2:	f1 f7       	brne	.-4      	; 0x23a0 <LCD_VIDSENDCOMMAND+0x420>
    23a4:	9a 83       	std	Y+2, r25	; 0x02
    23a6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
#endif
}
    23a8:	ea 96       	adiw	r28, 0x3a	; 58
    23aa:	0f b6       	in	r0, 0x3f	; 63
    23ac:	f8 94       	cli
    23ae:	de bf       	out	0x3e, r29	; 62
    23b0:	0f be       	out	0x3f, r0	; 63
    23b2:	cd bf       	out	0x3d, r28	; 61
    23b4:	cf 91       	pop	r28
    23b6:	df 91       	pop	r29
    23b8:	1f 91       	pop	r17
    23ba:	08 95       	ret

000023bc <LCD_INIT>:

void LCD_INIT(void) {
    23bc:	df 93       	push	r29
    23be:	cf 93       	push	r28
    23c0:	cd b7       	in	r28, 0x3d	; 61
    23c2:	de b7       	in	r29, 0x3e	; 62
    23c4:	e8 97       	sbiw	r28, 0x38	; 56
    23c6:	0f b6       	in	r0, 0x3f	; 63
    23c8:	f8 94       	cli
    23ca:	de bf       	out	0x3e, r29	; 62
    23cc:	0f be       	out	0x3f, r0	; 63
    23ce:	cd bf       	out	0x3d, r28	; 61
    23d0:	80 e0       	ldi	r24, 0x00	; 0
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	a0 ef       	ldi	r26, 0xF0	; 240
    23d6:	b1 e4       	ldi	r27, 0x41	; 65
    23d8:	8d ab       	std	Y+53, r24	; 0x35
    23da:	9e ab       	std	Y+54, r25	; 0x36
    23dc:	af ab       	std	Y+55, r26	; 0x37
    23de:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23e0:	6d a9       	ldd	r22, Y+53	; 0x35
    23e2:	7e a9       	ldd	r23, Y+54	; 0x36
    23e4:	8f a9       	ldd	r24, Y+55	; 0x37
    23e6:	98 ad       	ldd	r25, Y+56	; 0x38
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	4a e7       	ldi	r20, 0x7A	; 122
    23ee:	55 e4       	ldi	r21, 0x45	; 69
    23f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f4:	dc 01       	movw	r26, r24
    23f6:	cb 01       	movw	r24, r22
    23f8:	89 ab       	std	Y+49, r24	; 0x31
    23fa:	9a ab       	std	Y+50, r25	; 0x32
    23fc:	ab ab       	std	Y+51, r26	; 0x33
    23fe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2400:	69 a9       	ldd	r22, Y+49	; 0x31
    2402:	7a a9       	ldd	r23, Y+50	; 0x32
    2404:	8b a9       	ldd	r24, Y+51	; 0x33
    2406:	9c a9       	ldd	r25, Y+52	; 0x34
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	40 e8       	ldi	r20, 0x80	; 128
    240e:	5f e3       	ldi	r21, 0x3F	; 63
    2410:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2414:	88 23       	and	r24, r24
    2416:	2c f4       	brge	.+10     	; 0x2422 <LCD_INIT+0x66>
		__ticks = 1;
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	98 ab       	std	Y+48, r25	; 0x30
    241e:	8f a7       	std	Y+47, r24	; 0x2f
    2420:	3f c0       	rjmp	.+126    	; 0x24a0 <LCD_INIT+0xe4>
	else if (__tmp > 65535)
    2422:	69 a9       	ldd	r22, Y+49	; 0x31
    2424:	7a a9       	ldd	r23, Y+50	; 0x32
    2426:	8b a9       	ldd	r24, Y+51	; 0x33
    2428:	9c a9       	ldd	r25, Y+52	; 0x34
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	3f ef       	ldi	r19, 0xFF	; 255
    242e:	4f e7       	ldi	r20, 0x7F	; 127
    2430:	57 e4       	ldi	r21, 0x47	; 71
    2432:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2436:	18 16       	cp	r1, r24
    2438:	4c f5       	brge	.+82     	; 0x248c <LCD_INIT+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    243a:	6d a9       	ldd	r22, Y+53	; 0x35
    243c:	7e a9       	ldd	r23, Y+54	; 0x36
    243e:	8f a9       	ldd	r24, Y+55	; 0x37
    2440:	98 ad       	ldd	r25, Y+56	; 0x38
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	40 e2       	ldi	r20, 0x20	; 32
    2448:	51 e4       	ldi	r21, 0x41	; 65
    244a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    244e:	dc 01       	movw	r26, r24
    2450:	cb 01       	movw	r24, r22
    2452:	bc 01       	movw	r22, r24
    2454:	cd 01       	movw	r24, r26
    2456:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	98 ab       	std	Y+48, r25	; 0x30
    2460:	8f a7       	std	Y+47, r24	; 0x2f
    2462:	0f c0       	rjmp	.+30     	; 0x2482 <LCD_INIT+0xc6>
    2464:	80 e9       	ldi	r24, 0x90	; 144
    2466:	91 e0       	ldi	r25, 0x01	; 1
    2468:	9e a7       	std	Y+46, r25	; 0x2e
    246a:	8d a7       	std	Y+45, r24	; 0x2d
    246c:	8d a5       	ldd	r24, Y+45	; 0x2d
    246e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2470:	01 97       	sbiw	r24, 0x01	; 1
    2472:	f1 f7       	brne	.-4      	; 0x2470 <LCD_INIT+0xb4>
    2474:	9e a7       	std	Y+46, r25	; 0x2e
    2476:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2478:	8f a5       	ldd	r24, Y+47	; 0x2f
    247a:	98 a9       	ldd	r25, Y+48	; 0x30
    247c:	01 97       	sbiw	r24, 0x01	; 1
    247e:	98 ab       	std	Y+48, r25	; 0x30
    2480:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2482:	8f a5       	ldd	r24, Y+47	; 0x2f
    2484:	98 a9       	ldd	r25, Y+48	; 0x30
    2486:	00 97       	sbiw	r24, 0x00	; 0
    2488:	69 f7       	brne	.-38     	; 0x2464 <LCD_INIT+0xa8>
    248a:	14 c0       	rjmp	.+40     	; 0x24b4 <LCD_INIT+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    248c:	69 a9       	ldd	r22, Y+49	; 0x31
    248e:	7a a9       	ldd	r23, Y+50	; 0x32
    2490:	8b a9       	ldd	r24, Y+51	; 0x33
    2492:	9c a9       	ldd	r25, Y+52	; 0x34
    2494:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	98 ab       	std	Y+48, r25	; 0x30
    249e:	8f a7       	std	Y+47, r24	; 0x2f
    24a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    24a2:	98 a9       	ldd	r25, Y+48	; 0x30
    24a4:	9c a7       	std	Y+44, r25	; 0x2c
    24a6:	8b a7       	std	Y+43, r24	; 0x2b
    24a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    24aa:	9c a5       	ldd	r25, Y+44	; 0x2c
    24ac:	01 97       	sbiw	r24, 0x01	; 1
    24ae:	f1 f7       	brne	.-4      	; 0x24ac <LCD_INIT+0xf0>
    24b0:	9c a7       	std	Y+44, r25	; 0x2c
    24b2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(30);
	/* RETURN_HOME */
	LCD_VIDSENDCOMMAND(LCD_Home);
    24b4:	82 e0       	ldi	r24, 0x02	; 2
    24b6:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <LCD_VIDSENDCOMMAND>
    24ba:	80 e0       	ldi	r24, 0x00	; 0
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	a0 e8       	ldi	r26, 0x80	; 128
    24c0:	bf e3       	ldi	r27, 0x3F	; 63
    24c2:	8f a3       	std	Y+39, r24	; 0x27
    24c4:	98 a7       	std	Y+40, r25	; 0x28
    24c6:	a9 a7       	std	Y+41, r26	; 0x29
    24c8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ca:	6f a1       	ldd	r22, Y+39	; 0x27
    24cc:	78 a5       	ldd	r23, Y+40	; 0x28
    24ce:	89 a5       	ldd	r24, Y+41	; 0x29
    24d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	4a e7       	ldi	r20, 0x7A	; 122
    24d8:	55 e4       	ldi	r21, 0x45	; 69
    24da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	8b a3       	std	Y+35, r24	; 0x23
    24e4:	9c a3       	std	Y+36, r25	; 0x24
    24e6:	ad a3       	std	Y+37, r26	; 0x25
    24e8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24ea:	6b a1       	ldd	r22, Y+35	; 0x23
    24ec:	7c a1       	ldd	r23, Y+36	; 0x24
    24ee:	8d a1       	ldd	r24, Y+37	; 0x25
    24f0:	9e a1       	ldd	r25, Y+38	; 0x26
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	40 e8       	ldi	r20, 0x80	; 128
    24f8:	5f e3       	ldi	r21, 0x3F	; 63
    24fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24fe:	88 23       	and	r24, r24
    2500:	2c f4       	brge	.+10     	; 0x250c <LCD_INIT+0x150>
		__ticks = 1;
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	9a a3       	std	Y+34, r25	; 0x22
    2508:	89 a3       	std	Y+33, r24	; 0x21
    250a:	3f c0       	rjmp	.+126    	; 0x258a <LCD_INIT+0x1ce>
	else if (__tmp > 65535)
    250c:	6b a1       	ldd	r22, Y+35	; 0x23
    250e:	7c a1       	ldd	r23, Y+36	; 0x24
    2510:	8d a1       	ldd	r24, Y+37	; 0x25
    2512:	9e a1       	ldd	r25, Y+38	; 0x26
    2514:	20 e0       	ldi	r18, 0x00	; 0
    2516:	3f ef       	ldi	r19, 0xFF	; 255
    2518:	4f e7       	ldi	r20, 0x7F	; 127
    251a:	57 e4       	ldi	r21, 0x47	; 71
    251c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2520:	18 16       	cp	r1, r24
    2522:	4c f5       	brge	.+82     	; 0x2576 <LCD_INIT+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2524:	6f a1       	ldd	r22, Y+39	; 0x27
    2526:	78 a5       	ldd	r23, Y+40	; 0x28
    2528:	89 a5       	ldd	r24, Y+41	; 0x29
    252a:	9a a5       	ldd	r25, Y+42	; 0x2a
    252c:	20 e0       	ldi	r18, 0x00	; 0
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	40 e2       	ldi	r20, 0x20	; 32
    2532:	51 e4       	ldi	r21, 0x41	; 65
    2534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	bc 01       	movw	r22, r24
    253e:	cd 01       	movw	r24, r26
    2540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	9a a3       	std	Y+34, r25	; 0x22
    254a:	89 a3       	std	Y+33, r24	; 0x21
    254c:	0f c0       	rjmp	.+30     	; 0x256c <LCD_INIT+0x1b0>
    254e:	80 e9       	ldi	r24, 0x90	; 144
    2550:	91 e0       	ldi	r25, 0x01	; 1
    2552:	98 a3       	std	Y+32, r25	; 0x20
    2554:	8f 8f       	std	Y+31, r24	; 0x1f
    2556:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2558:	98 a1       	ldd	r25, Y+32	; 0x20
    255a:	01 97       	sbiw	r24, 0x01	; 1
    255c:	f1 f7       	brne	.-4      	; 0x255a <LCD_INIT+0x19e>
    255e:	98 a3       	std	Y+32, r25	; 0x20
    2560:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2562:	89 a1       	ldd	r24, Y+33	; 0x21
    2564:	9a a1       	ldd	r25, Y+34	; 0x22
    2566:	01 97       	sbiw	r24, 0x01	; 1
    2568:	9a a3       	std	Y+34, r25	; 0x22
    256a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    256c:	89 a1       	ldd	r24, Y+33	; 0x21
    256e:	9a a1       	ldd	r25, Y+34	; 0x22
    2570:	00 97       	sbiw	r24, 0x00	; 0
    2572:	69 f7       	brne	.-38     	; 0x254e <LCD_INIT+0x192>
    2574:	14 c0       	rjmp	.+40     	; 0x259e <LCD_INIT+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2576:	6b a1       	ldd	r22, Y+35	; 0x23
    2578:	7c a1       	ldd	r23, Y+36	; 0x24
    257a:	8d a1       	ldd	r24, Y+37	; 0x25
    257c:	9e a1       	ldd	r25, Y+38	; 0x26
    257e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2582:	dc 01       	movw	r26, r24
    2584:	cb 01       	movw	r24, r22
    2586:	9a a3       	std	Y+34, r25	; 0x22
    2588:	89 a3       	std	Y+33, r24	; 0x21
    258a:	89 a1       	ldd	r24, Y+33	; 0x21
    258c:	9a a1       	ldd	r25, Y+34	; 0x22
    258e:	9e 8f       	std	Y+30, r25	; 0x1e
    2590:	8d 8f       	std	Y+29, r24	; 0x1d
    2592:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2594:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2596:	01 97       	sbiw	r24, 0x01	; 1
    2598:	f1 f7       	brne	.-4      	; 0x2596 <LCD_INIT+0x1da>
    259a:	9e 8f       	std	Y+30, r25	; 0x1e
    259c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/* FUNCTION SET */
#if LCD_MODE==_8BITMODE
	LCD_VIDSENDCOMMAND(LCD_FunctionSet8bit);
#elif LCD_MODE==_4BITMODE
	LCD_VIDSENDCOMMAND(LCD_FunctionSet4bit);
    259e:	88 e2       	ldi	r24, 0x28	; 40
    25a0:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <LCD_VIDSENDCOMMAND>
    25a4:	80 e0       	ldi	r24, 0x00	; 0
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	a0 e8       	ldi	r26, 0x80	; 128
    25aa:	bf e3       	ldi	r27, 0x3F	; 63
    25ac:	89 8f       	std	Y+25, r24	; 0x19
    25ae:	9a 8f       	std	Y+26, r25	; 0x1a
    25b0:	ab 8f       	std	Y+27, r26	; 0x1b
    25b2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25b4:	69 8d       	ldd	r22, Y+25	; 0x19
    25b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	4a e7       	ldi	r20, 0x7A	; 122
    25c2:	55 e4       	ldi	r21, 0x45	; 69
    25c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c8:	dc 01       	movw	r26, r24
    25ca:	cb 01       	movw	r24, r22
    25cc:	8d 8b       	std	Y+21, r24	; 0x15
    25ce:	9e 8b       	std	Y+22, r25	; 0x16
    25d0:	af 8b       	std	Y+23, r26	; 0x17
    25d2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25d4:	6d 89       	ldd	r22, Y+21	; 0x15
    25d6:	7e 89       	ldd	r23, Y+22	; 0x16
    25d8:	8f 89       	ldd	r24, Y+23	; 0x17
    25da:	98 8d       	ldd	r25, Y+24	; 0x18
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	40 e8       	ldi	r20, 0x80	; 128
    25e2:	5f e3       	ldi	r21, 0x3F	; 63
    25e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25e8:	88 23       	and	r24, r24
    25ea:	2c f4       	brge	.+10     	; 0x25f6 <LCD_INIT+0x23a>
		__ticks = 1;
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	9c 8b       	std	Y+20, r25	; 0x14
    25f2:	8b 8b       	std	Y+19, r24	; 0x13
    25f4:	3f c0       	rjmp	.+126    	; 0x2674 <LCD_INIT+0x2b8>
	else if (__tmp > 65535)
    25f6:	6d 89       	ldd	r22, Y+21	; 0x15
    25f8:	7e 89       	ldd	r23, Y+22	; 0x16
    25fa:	8f 89       	ldd	r24, Y+23	; 0x17
    25fc:	98 8d       	ldd	r25, Y+24	; 0x18
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	3f ef       	ldi	r19, 0xFF	; 255
    2602:	4f e7       	ldi	r20, 0x7F	; 127
    2604:	57 e4       	ldi	r21, 0x47	; 71
    2606:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    260a:	18 16       	cp	r1, r24
    260c:	4c f5       	brge	.+82     	; 0x2660 <LCD_INIT+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    260e:	69 8d       	ldd	r22, Y+25	; 0x19
    2610:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2612:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2614:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	40 e2       	ldi	r20, 0x20	; 32
    261c:	51 e4       	ldi	r21, 0x41	; 65
    261e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2622:	dc 01       	movw	r26, r24
    2624:	cb 01       	movw	r24, r22
    2626:	bc 01       	movw	r22, r24
    2628:	cd 01       	movw	r24, r26
    262a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262e:	dc 01       	movw	r26, r24
    2630:	cb 01       	movw	r24, r22
    2632:	9c 8b       	std	Y+20, r25	; 0x14
    2634:	8b 8b       	std	Y+19, r24	; 0x13
    2636:	0f c0       	rjmp	.+30     	; 0x2656 <LCD_INIT+0x29a>
    2638:	80 e9       	ldi	r24, 0x90	; 144
    263a:	91 e0       	ldi	r25, 0x01	; 1
    263c:	9a 8b       	std	Y+18, r25	; 0x12
    263e:	89 8b       	std	Y+17, r24	; 0x11
    2640:	89 89       	ldd	r24, Y+17	; 0x11
    2642:	9a 89       	ldd	r25, Y+18	; 0x12
    2644:	01 97       	sbiw	r24, 0x01	; 1
    2646:	f1 f7       	brne	.-4      	; 0x2644 <LCD_INIT+0x288>
    2648:	9a 8b       	std	Y+18, r25	; 0x12
    264a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    264c:	8b 89       	ldd	r24, Y+19	; 0x13
    264e:	9c 89       	ldd	r25, Y+20	; 0x14
    2650:	01 97       	sbiw	r24, 0x01	; 1
    2652:	9c 8b       	std	Y+20, r25	; 0x14
    2654:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2656:	8b 89       	ldd	r24, Y+19	; 0x13
    2658:	9c 89       	ldd	r25, Y+20	; 0x14
    265a:	00 97       	sbiw	r24, 0x00	; 0
    265c:	69 f7       	brne	.-38     	; 0x2638 <LCD_INIT+0x27c>
    265e:	14 c0       	rjmp	.+40     	; 0x2688 <LCD_INIT+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2660:	6d 89       	ldd	r22, Y+21	; 0x15
    2662:	7e 89       	ldd	r23, Y+22	; 0x16
    2664:	8f 89       	ldd	r24, Y+23	; 0x17
    2666:	98 8d       	ldd	r25, Y+24	; 0x18
    2668:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	9c 8b       	std	Y+20, r25	; 0x14
    2672:	8b 8b       	std	Y+19, r24	; 0x13
    2674:	8b 89       	ldd	r24, Y+19	; 0x13
    2676:	9c 89       	ldd	r25, Y+20	; 0x14
    2678:	98 8b       	std	Y+16, r25	; 0x10
    267a:	8f 87       	std	Y+15, r24	; 0x0f
    267c:	8f 85       	ldd	r24, Y+15	; 0x0f
    267e:	98 89       	ldd	r25, Y+16	; 0x10
    2680:	01 97       	sbiw	r24, 0x01	; 1
    2682:	f1 f7       	brne	.-4      	; 0x2680 <LCD_INIT+0x2c4>
    2684:	98 8b       	std	Y+16, r25	; 0x10
    2686:	8f 87       	std	Y+15, r24	; 0x0f
#endif
	_delay_ms(1);
	/* DISPLAY ON/OFF CONTROL */
	LCD_VIDSENDCOMMAND(LCD_DisplayOn);
    2688:	8c e0       	ldi	r24, 0x0C	; 12
    268a:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <LCD_VIDSENDCOMMAND>
	/* CLEAR DISPLAY */
	LCD_VIDSENDCOMMAND(LCD_Clear);
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <LCD_VIDSENDCOMMAND>
	/* ENTRY MODE SET */
	LCD_VIDSENDCOMMAND(LCD_EntryMode);
    2694:	86 e0       	ldi	r24, 0x06	; 6
    2696:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <LCD_VIDSENDCOMMAND>
    269a:	80 e0       	ldi	r24, 0x00	; 0
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	a0 e8       	ldi	r26, 0x80	; 128
    26a0:	bf e3       	ldi	r27, 0x3F	; 63
    26a2:	8b 87       	std	Y+11, r24	; 0x0b
    26a4:	9c 87       	std	Y+12, r25	; 0x0c
    26a6:	ad 87       	std	Y+13, r26	; 0x0d
    26a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    26b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	4a e7       	ldi	r20, 0x7A	; 122
    26b8:	55 e4       	ldi	r21, 0x45	; 69
    26ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26be:	dc 01       	movw	r26, r24
    26c0:	cb 01       	movw	r24, r22
    26c2:	8f 83       	std	Y+7, r24	; 0x07
    26c4:	98 87       	std	Y+8, r25	; 0x08
    26c6:	a9 87       	std	Y+9, r26	; 0x09
    26c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26ca:	6f 81       	ldd	r22, Y+7	; 0x07
    26cc:	78 85       	ldd	r23, Y+8	; 0x08
    26ce:	89 85       	ldd	r24, Y+9	; 0x09
    26d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	40 e8       	ldi	r20, 0x80	; 128
    26d8:	5f e3       	ldi	r21, 0x3F	; 63
    26da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26de:	88 23       	and	r24, r24
    26e0:	2c f4       	brge	.+10     	; 0x26ec <LCD_INIT+0x330>
		__ticks = 1;
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	9e 83       	std	Y+6, r25	; 0x06
    26e8:	8d 83       	std	Y+5, r24	; 0x05
    26ea:	3f c0       	rjmp	.+126    	; 0x276a <LCD_INIT+0x3ae>
	else if (__tmp > 65535)
    26ec:	6f 81       	ldd	r22, Y+7	; 0x07
    26ee:	78 85       	ldd	r23, Y+8	; 0x08
    26f0:	89 85       	ldd	r24, Y+9	; 0x09
    26f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	3f ef       	ldi	r19, 0xFF	; 255
    26f8:	4f e7       	ldi	r20, 0x7F	; 127
    26fa:	57 e4       	ldi	r21, 0x47	; 71
    26fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2700:	18 16       	cp	r1, r24
    2702:	4c f5       	brge	.+82     	; 0x2756 <LCD_INIT+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2704:	6b 85       	ldd	r22, Y+11	; 0x0b
    2706:	7c 85       	ldd	r23, Y+12	; 0x0c
    2708:	8d 85       	ldd	r24, Y+13	; 0x0d
    270a:	9e 85       	ldd	r25, Y+14	; 0x0e
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	40 e2       	ldi	r20, 0x20	; 32
    2712:	51 e4       	ldi	r21, 0x41	; 65
    2714:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	bc 01       	movw	r22, r24
    271e:	cd 01       	movw	r24, r26
    2720:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2724:	dc 01       	movw	r26, r24
    2726:	cb 01       	movw	r24, r22
    2728:	9e 83       	std	Y+6, r25	; 0x06
    272a:	8d 83       	std	Y+5, r24	; 0x05
    272c:	0f c0       	rjmp	.+30     	; 0x274c <LCD_INIT+0x390>
    272e:	80 e9       	ldi	r24, 0x90	; 144
    2730:	91 e0       	ldi	r25, 0x01	; 1
    2732:	9c 83       	std	Y+4, r25	; 0x04
    2734:	8b 83       	std	Y+3, r24	; 0x03
    2736:	8b 81       	ldd	r24, Y+3	; 0x03
    2738:	9c 81       	ldd	r25, Y+4	; 0x04
    273a:	01 97       	sbiw	r24, 0x01	; 1
    273c:	f1 f7       	brne	.-4      	; 0x273a <LCD_INIT+0x37e>
    273e:	9c 83       	std	Y+4, r25	; 0x04
    2740:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2742:	8d 81       	ldd	r24, Y+5	; 0x05
    2744:	9e 81       	ldd	r25, Y+6	; 0x06
    2746:	01 97       	sbiw	r24, 0x01	; 1
    2748:	9e 83       	std	Y+6, r25	; 0x06
    274a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    274c:	8d 81       	ldd	r24, Y+5	; 0x05
    274e:	9e 81       	ldd	r25, Y+6	; 0x06
    2750:	00 97       	sbiw	r24, 0x00	; 0
    2752:	69 f7       	brne	.-38     	; 0x272e <LCD_INIT+0x372>
    2754:	14 c0       	rjmp	.+40     	; 0x277e <LCD_INIT+0x3c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2756:	6f 81       	ldd	r22, Y+7	; 0x07
    2758:	78 85       	ldd	r23, Y+8	; 0x08
    275a:	89 85       	ldd	r24, Y+9	; 0x09
    275c:	9a 85       	ldd	r25, Y+10	; 0x0a
    275e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	9e 83       	std	Y+6, r25	; 0x06
    2768:	8d 83       	std	Y+5, r24	; 0x05
    276a:	8d 81       	ldd	r24, Y+5	; 0x05
    276c:	9e 81       	ldd	r25, Y+6	; 0x06
    276e:	9a 83       	std	Y+2, r25	; 0x02
    2770:	89 83       	std	Y+1, r24	; 0x01
    2772:	89 81       	ldd	r24, Y+1	; 0x01
    2774:	9a 81       	ldd	r25, Y+2	; 0x02
    2776:	01 97       	sbiw	r24, 0x01	; 1
    2778:	f1 f7       	brne	.-4      	; 0x2776 <LCD_INIT+0x3ba>
    277a:	9a 83       	std	Y+2, r25	; 0x02
    277c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    277e:	e8 96       	adiw	r28, 0x38	; 56
    2780:	0f b6       	in	r0, 0x3f	; 63
    2782:	f8 94       	cli
    2784:	de bf       	out	0x3e, r29	; 62
    2786:	0f be       	out	0x3f, r0	; 63
    2788:	cd bf       	out	0x3d, r28	; 61
    278a:	cf 91       	pop	r28
    278c:	df 91       	pop	r29
    278e:	08 95       	ret

00002790 <LCD_VIDSENDCHAR>:
extern void LCD_VIDSENDCHAR(uint8 DATA) {
    2790:	1f 93       	push	r17
    2792:	df 93       	push	r29
    2794:	cf 93       	push	r28
    2796:	cd b7       	in	r28, 0x3d	; 61
    2798:	de b7       	in	r29, 0x3e	; 62
    279a:	e9 97       	sbiw	r28, 0x39	; 57
    279c:	0f b6       	in	r0, 0x3f	; 63
    279e:	f8 94       	cli
    27a0:	de bf       	out	0x3e, r29	; 62
    27a2:	0f be       	out	0x3f, r0	; 63
    27a4:	cd bf       	out	0x3d, r28	; 61
    27a6:	89 af       	std	Y+57, r24	; 0x39
	/* SET E to HIGH */
	DIO_WRITECHANNEL( E, HIGH);
	_delay_ms(5);
#elif LCD_MODE==_4BITMODE
	/* SET RS to HIGH */
	DIO_WRITECHANNEL(RS, HIGH);
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	61 e0       	ldi	r22, 0x01	; 1
    27ac:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
	/* SET R/W to LOW */
	DIO_WRITECHANNEL( RW, LOW);
    27b0:	81 e1       	ldi	r24, 0x11	; 17
    27b2:	60 e0       	ldi	r22, 0x00	; 0
    27b4:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
	/* SET E to HIGH */
	DIO_WRITECHANNEL( E, HIGH);
    27b8:	82 e0       	ldi	r24, 0x02	; 2
    27ba:	61 e0       	ldi	r22, 0x01	; 1
    27bc:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
	/* WRITE COMMAND */
	DIO_WRITEPORT( LCD_WRITE_PORT, (((DATA >>1)& 0x78)|0x06)| DIO_READCHANNEL(PINA0));
    27c0:	89 ad       	ldd	r24, Y+57	; 0x39
    27c2:	86 95       	lsr	r24
    27c4:	88 77       	andi	r24, 0x78	; 120
    27c6:	18 2f       	mov	r17, r24
    27c8:	16 60       	ori	r17, 0x06	; 6
    27ca:	80 e0       	ldi	r24, 0x00	; 0
    27cc:	0e 94 49 08 	call	0x1092	; 0x1092 <DIO_READCHANNEL>
    27d0:	81 2b       	or	r24, r17
    27d2:	98 2f       	mov	r25, r24
    27d4:	80 e0       	ldi	r24, 0x00	; 0
    27d6:	69 2f       	mov	r22, r25
    27d8:	0e 94 08 08 	call	0x1010	; 0x1010 <DIO_WRITEPORT>
	/* SET E to LOW */
	DIO_WRITECHANNEL( E, LOW);
    27dc:	82 e0       	ldi	r24, 0x02	; 2
    27de:	60 e0       	ldi	r22, 0x00	; 0
    27e0:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
    27e4:	80 e0       	ldi	r24, 0x00	; 0
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	a0 e0       	ldi	r26, 0x00	; 0
    27ea:	b0 e4       	ldi	r27, 0x40	; 64
    27ec:	8d ab       	std	Y+53, r24	; 0x35
    27ee:	9e ab       	std	Y+54, r25	; 0x36
    27f0:	af ab       	std	Y+55, r26	; 0x37
    27f2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f4:	6d a9       	ldd	r22, Y+53	; 0x35
    27f6:	7e a9       	ldd	r23, Y+54	; 0x36
    27f8:	8f a9       	ldd	r24, Y+55	; 0x37
    27fa:	98 ad       	ldd	r25, Y+56	; 0x38
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	4a e7       	ldi	r20, 0x7A	; 122
    2802:	55 e4       	ldi	r21, 0x45	; 69
    2804:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2808:	dc 01       	movw	r26, r24
    280a:	cb 01       	movw	r24, r22
    280c:	89 ab       	std	Y+49, r24	; 0x31
    280e:	9a ab       	std	Y+50, r25	; 0x32
    2810:	ab ab       	std	Y+51, r26	; 0x33
    2812:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2814:	69 a9       	ldd	r22, Y+49	; 0x31
    2816:	7a a9       	ldd	r23, Y+50	; 0x32
    2818:	8b a9       	ldd	r24, Y+51	; 0x33
    281a:	9c a9       	ldd	r25, Y+52	; 0x34
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	40 e8       	ldi	r20, 0x80	; 128
    2822:	5f e3       	ldi	r21, 0x3F	; 63
    2824:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2828:	88 23       	and	r24, r24
    282a:	2c f4       	brge	.+10     	; 0x2836 <LCD_VIDSENDCHAR+0xa6>
		__ticks = 1;
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	98 ab       	std	Y+48, r25	; 0x30
    2832:	8f a7       	std	Y+47, r24	; 0x2f
    2834:	3f c0       	rjmp	.+126    	; 0x28b4 <LCD_VIDSENDCHAR+0x124>
	else if (__tmp > 65535)
    2836:	69 a9       	ldd	r22, Y+49	; 0x31
    2838:	7a a9       	ldd	r23, Y+50	; 0x32
    283a:	8b a9       	ldd	r24, Y+51	; 0x33
    283c:	9c a9       	ldd	r25, Y+52	; 0x34
    283e:	20 e0       	ldi	r18, 0x00	; 0
    2840:	3f ef       	ldi	r19, 0xFF	; 255
    2842:	4f e7       	ldi	r20, 0x7F	; 127
    2844:	57 e4       	ldi	r21, 0x47	; 71
    2846:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    284a:	18 16       	cp	r1, r24
    284c:	4c f5       	brge	.+82     	; 0x28a0 <LCD_VIDSENDCHAR+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    284e:	6d a9       	ldd	r22, Y+53	; 0x35
    2850:	7e a9       	ldd	r23, Y+54	; 0x36
    2852:	8f a9       	ldd	r24, Y+55	; 0x37
    2854:	98 ad       	ldd	r25, Y+56	; 0x38
    2856:	20 e0       	ldi	r18, 0x00	; 0
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	40 e2       	ldi	r20, 0x20	; 32
    285c:	51 e4       	ldi	r21, 0x41	; 65
    285e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	bc 01       	movw	r22, r24
    2868:	cd 01       	movw	r24, r26
    286a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286e:	dc 01       	movw	r26, r24
    2870:	cb 01       	movw	r24, r22
    2872:	98 ab       	std	Y+48, r25	; 0x30
    2874:	8f a7       	std	Y+47, r24	; 0x2f
    2876:	0f c0       	rjmp	.+30     	; 0x2896 <LCD_VIDSENDCHAR+0x106>
    2878:	80 e9       	ldi	r24, 0x90	; 144
    287a:	91 e0       	ldi	r25, 0x01	; 1
    287c:	9e a7       	std	Y+46, r25	; 0x2e
    287e:	8d a7       	std	Y+45, r24	; 0x2d
    2880:	8d a5       	ldd	r24, Y+45	; 0x2d
    2882:	9e a5       	ldd	r25, Y+46	; 0x2e
    2884:	01 97       	sbiw	r24, 0x01	; 1
    2886:	f1 f7       	brne	.-4      	; 0x2884 <LCD_VIDSENDCHAR+0xf4>
    2888:	9e a7       	std	Y+46, r25	; 0x2e
    288a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    288c:	8f a5       	ldd	r24, Y+47	; 0x2f
    288e:	98 a9       	ldd	r25, Y+48	; 0x30
    2890:	01 97       	sbiw	r24, 0x01	; 1
    2892:	98 ab       	std	Y+48, r25	; 0x30
    2894:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2896:	8f a5       	ldd	r24, Y+47	; 0x2f
    2898:	98 a9       	ldd	r25, Y+48	; 0x30
    289a:	00 97       	sbiw	r24, 0x00	; 0
    289c:	69 f7       	brne	.-38     	; 0x2878 <LCD_VIDSENDCHAR+0xe8>
    289e:	14 c0       	rjmp	.+40     	; 0x28c8 <LCD_VIDSENDCHAR+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28a0:	69 a9       	ldd	r22, Y+49	; 0x31
    28a2:	7a a9       	ldd	r23, Y+50	; 0x32
    28a4:	8b a9       	ldd	r24, Y+51	; 0x33
    28a6:	9c a9       	ldd	r25, Y+52	; 0x34
    28a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ac:	dc 01       	movw	r26, r24
    28ae:	cb 01       	movw	r24, r22
    28b0:	98 ab       	std	Y+48, r25	; 0x30
    28b2:	8f a7       	std	Y+47, r24	; 0x2f
    28b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    28b6:	98 a9       	ldd	r25, Y+48	; 0x30
    28b8:	9c a7       	std	Y+44, r25	; 0x2c
    28ba:	8b a7       	std	Y+43, r24	; 0x2b
    28bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    28be:	9c a5       	ldd	r25, Y+44	; 0x2c
    28c0:	01 97       	sbiw	r24, 0x01	; 1
    28c2:	f1 f7       	brne	.-4      	; 0x28c0 <LCD_VIDSENDCHAR+0x130>
    28c4:	9c a7       	std	Y+44, r25	; 0x2c
    28c6:	8b a7       	std	Y+43, r24	; 0x2b
	/* wait for E to settle */
	_delay_ms(2);
	/* SET E to HIGH */
	DIO_WRITECHANNEL( E, HIGH);
    28c8:	82 e0       	ldi	r24, 0x02	; 2
    28ca:	61 e0       	ldi	r22, 0x01	; 1
    28cc:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
    28d0:	80 e0       	ldi	r24, 0x00	; 0
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	a0 e8       	ldi	r26, 0x80	; 128
    28d6:	bf e3       	ldi	r27, 0x3F	; 63
    28d8:	8f a3       	std	Y+39, r24	; 0x27
    28da:	98 a7       	std	Y+40, r25	; 0x28
    28dc:	a9 a7       	std	Y+41, r26	; 0x29
    28de:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e0:	6f a1       	ldd	r22, Y+39	; 0x27
    28e2:	78 a5       	ldd	r23, Y+40	; 0x28
    28e4:	89 a5       	ldd	r24, Y+41	; 0x29
    28e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    28e8:	20 e0       	ldi	r18, 0x00	; 0
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	4a e7       	ldi	r20, 0x7A	; 122
    28ee:	55 e4       	ldi	r21, 0x45	; 69
    28f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	8b a3       	std	Y+35, r24	; 0x23
    28fa:	9c a3       	std	Y+36, r25	; 0x24
    28fc:	ad a3       	std	Y+37, r26	; 0x25
    28fe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2900:	6b a1       	ldd	r22, Y+35	; 0x23
    2902:	7c a1       	ldd	r23, Y+36	; 0x24
    2904:	8d a1       	ldd	r24, Y+37	; 0x25
    2906:	9e a1       	ldd	r25, Y+38	; 0x26
    2908:	20 e0       	ldi	r18, 0x00	; 0
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	40 e8       	ldi	r20, 0x80	; 128
    290e:	5f e3       	ldi	r21, 0x3F	; 63
    2910:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2914:	88 23       	and	r24, r24
    2916:	2c f4       	brge	.+10     	; 0x2922 <LCD_VIDSENDCHAR+0x192>
		__ticks = 1;
    2918:	81 e0       	ldi	r24, 0x01	; 1
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	9a a3       	std	Y+34, r25	; 0x22
    291e:	89 a3       	std	Y+33, r24	; 0x21
    2920:	3f c0       	rjmp	.+126    	; 0x29a0 <LCD_VIDSENDCHAR+0x210>
	else if (__tmp > 65535)
    2922:	6b a1       	ldd	r22, Y+35	; 0x23
    2924:	7c a1       	ldd	r23, Y+36	; 0x24
    2926:	8d a1       	ldd	r24, Y+37	; 0x25
    2928:	9e a1       	ldd	r25, Y+38	; 0x26
    292a:	20 e0       	ldi	r18, 0x00	; 0
    292c:	3f ef       	ldi	r19, 0xFF	; 255
    292e:	4f e7       	ldi	r20, 0x7F	; 127
    2930:	57 e4       	ldi	r21, 0x47	; 71
    2932:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2936:	18 16       	cp	r1, r24
    2938:	4c f5       	brge	.+82     	; 0x298c <LCD_VIDSENDCHAR+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    293a:	6f a1       	ldd	r22, Y+39	; 0x27
    293c:	78 a5       	ldd	r23, Y+40	; 0x28
    293e:	89 a5       	ldd	r24, Y+41	; 0x29
    2940:	9a a5       	ldd	r25, Y+42	; 0x2a
    2942:	20 e0       	ldi	r18, 0x00	; 0
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	40 e2       	ldi	r20, 0x20	; 32
    2948:	51 e4       	ldi	r21, 0x41	; 65
    294a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    294e:	dc 01       	movw	r26, r24
    2950:	cb 01       	movw	r24, r22
    2952:	bc 01       	movw	r22, r24
    2954:	cd 01       	movw	r24, r26
    2956:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    295a:	dc 01       	movw	r26, r24
    295c:	cb 01       	movw	r24, r22
    295e:	9a a3       	std	Y+34, r25	; 0x22
    2960:	89 a3       	std	Y+33, r24	; 0x21
    2962:	0f c0       	rjmp	.+30     	; 0x2982 <LCD_VIDSENDCHAR+0x1f2>
    2964:	80 e9       	ldi	r24, 0x90	; 144
    2966:	91 e0       	ldi	r25, 0x01	; 1
    2968:	98 a3       	std	Y+32, r25	; 0x20
    296a:	8f 8f       	std	Y+31, r24	; 0x1f
    296c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    296e:	98 a1       	ldd	r25, Y+32	; 0x20
    2970:	01 97       	sbiw	r24, 0x01	; 1
    2972:	f1 f7       	brne	.-4      	; 0x2970 <LCD_VIDSENDCHAR+0x1e0>
    2974:	98 a3       	std	Y+32, r25	; 0x20
    2976:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2978:	89 a1       	ldd	r24, Y+33	; 0x21
    297a:	9a a1       	ldd	r25, Y+34	; 0x22
    297c:	01 97       	sbiw	r24, 0x01	; 1
    297e:	9a a3       	std	Y+34, r25	; 0x22
    2980:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2982:	89 a1       	ldd	r24, Y+33	; 0x21
    2984:	9a a1       	ldd	r25, Y+34	; 0x22
    2986:	00 97       	sbiw	r24, 0x00	; 0
    2988:	69 f7       	brne	.-38     	; 0x2964 <LCD_VIDSENDCHAR+0x1d4>
    298a:	14 c0       	rjmp	.+40     	; 0x29b4 <LCD_VIDSENDCHAR+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    298c:	6b a1       	ldd	r22, Y+35	; 0x23
    298e:	7c a1       	ldd	r23, Y+36	; 0x24
    2990:	8d a1       	ldd	r24, Y+37	; 0x25
    2992:	9e a1       	ldd	r25, Y+38	; 0x26
    2994:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2998:	dc 01       	movw	r26, r24
    299a:	cb 01       	movw	r24, r22
    299c:	9a a3       	std	Y+34, r25	; 0x22
    299e:	89 a3       	std	Y+33, r24	; 0x21
    29a0:	89 a1       	ldd	r24, Y+33	; 0x21
    29a2:	9a a1       	ldd	r25, Y+34	; 0x22
    29a4:	9e 8f       	std	Y+30, r25	; 0x1e
    29a6:	8d 8f       	std	Y+29, r24	; 0x1d
    29a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29ac:	01 97       	sbiw	r24, 0x01	; 1
    29ae:	f1 f7       	brne	.-4      	; 0x29ac <LCD_VIDSENDCHAR+0x21c>
    29b0:	9e 8f       	std	Y+30, r25	; 0x1e
    29b2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/* WRITE COMMAND */
	DIO_WRITEPORT( LCD_WRITE_PORT, (((DATA <<3)& 0x78)| 0x06)| DIO_READCHANNEL(PINA0));
    29b4:	89 ad       	ldd	r24, Y+57	; 0x39
    29b6:	88 2f       	mov	r24, r24
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	88 0f       	add	r24, r24
    29bc:	99 1f       	adc	r25, r25
    29be:	88 0f       	add	r24, r24
    29c0:	99 1f       	adc	r25, r25
    29c2:	88 0f       	add	r24, r24
    29c4:	99 1f       	adc	r25, r25
    29c6:	88 77       	andi	r24, 0x78	; 120
    29c8:	18 2f       	mov	r17, r24
    29ca:	16 60       	ori	r17, 0x06	; 6
    29cc:	80 e0       	ldi	r24, 0x00	; 0
    29ce:	0e 94 49 08 	call	0x1092	; 0x1092 <DIO_READCHANNEL>
    29d2:	81 2b       	or	r24, r17
    29d4:	98 2f       	mov	r25, r24
    29d6:	80 e0       	ldi	r24, 0x00	; 0
    29d8:	69 2f       	mov	r22, r25
    29da:	0e 94 08 08 	call	0x1010	; 0x1010 <DIO_WRITEPORT>
	/* SET E to LOW */
	DIO_WRITECHANNEL( E, LOW);
    29de:	82 e0       	ldi	r24, 0x02	; 2
    29e0:	60 e0       	ldi	r22, 0x00	; 0
    29e2:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
    29e6:	80 e0       	ldi	r24, 0x00	; 0
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	a0 e0       	ldi	r26, 0x00	; 0
    29ec:	b0 e4       	ldi	r27, 0x40	; 64
    29ee:	89 8f       	std	Y+25, r24	; 0x19
    29f0:	9a 8f       	std	Y+26, r25	; 0x1a
    29f2:	ab 8f       	std	Y+27, r26	; 0x1b
    29f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29f6:	69 8d       	ldd	r22, Y+25	; 0x19
    29f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	4a e7       	ldi	r20, 0x7A	; 122
    2a04:	55 e4       	ldi	r21, 0x45	; 69
    2a06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	cb 01       	movw	r24, r22
    2a0e:	8d 8b       	std	Y+21, r24	; 0x15
    2a10:	9e 8b       	std	Y+22, r25	; 0x16
    2a12:	af 8b       	std	Y+23, r26	; 0x17
    2a14:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a16:	6d 89       	ldd	r22, Y+21	; 0x15
    2a18:	7e 89       	ldd	r23, Y+22	; 0x16
    2a1a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a1c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a1e:	20 e0       	ldi	r18, 0x00	; 0
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	40 e8       	ldi	r20, 0x80	; 128
    2a24:	5f e3       	ldi	r21, 0x3F	; 63
    2a26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a2a:	88 23       	and	r24, r24
    2a2c:	2c f4       	brge	.+10     	; 0x2a38 <LCD_VIDSENDCHAR+0x2a8>
		__ticks = 1;
    2a2e:	81 e0       	ldi	r24, 0x01	; 1
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	9c 8b       	std	Y+20, r25	; 0x14
    2a34:	8b 8b       	std	Y+19, r24	; 0x13
    2a36:	3f c0       	rjmp	.+126    	; 0x2ab6 <LCD_VIDSENDCHAR+0x326>
	else if (__tmp > 65535)
    2a38:	6d 89       	ldd	r22, Y+21	; 0x15
    2a3a:	7e 89       	ldd	r23, Y+22	; 0x16
    2a3c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a3e:	98 8d       	ldd	r25, Y+24	; 0x18
    2a40:	20 e0       	ldi	r18, 0x00	; 0
    2a42:	3f ef       	ldi	r19, 0xFF	; 255
    2a44:	4f e7       	ldi	r20, 0x7F	; 127
    2a46:	57 e4       	ldi	r21, 0x47	; 71
    2a48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a4c:	18 16       	cp	r1, r24
    2a4e:	4c f5       	brge	.+82     	; 0x2aa2 <LCD_VIDSENDCHAR+0x312>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a50:	69 8d       	ldd	r22, Y+25	; 0x19
    2a52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	40 e2       	ldi	r20, 0x20	; 32
    2a5e:	51 e4       	ldi	r21, 0x41	; 65
    2a60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a64:	dc 01       	movw	r26, r24
    2a66:	cb 01       	movw	r24, r22
    2a68:	bc 01       	movw	r22, r24
    2a6a:	cd 01       	movw	r24, r26
    2a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	9c 8b       	std	Y+20, r25	; 0x14
    2a76:	8b 8b       	std	Y+19, r24	; 0x13
    2a78:	0f c0       	rjmp	.+30     	; 0x2a98 <LCD_VIDSENDCHAR+0x308>
    2a7a:	80 e9       	ldi	r24, 0x90	; 144
    2a7c:	91 e0       	ldi	r25, 0x01	; 1
    2a7e:	9a 8b       	std	Y+18, r25	; 0x12
    2a80:	89 8b       	std	Y+17, r24	; 0x11
    2a82:	89 89       	ldd	r24, Y+17	; 0x11
    2a84:	9a 89       	ldd	r25, Y+18	; 0x12
    2a86:	01 97       	sbiw	r24, 0x01	; 1
    2a88:	f1 f7       	brne	.-4      	; 0x2a86 <LCD_VIDSENDCHAR+0x2f6>
    2a8a:	9a 8b       	std	Y+18, r25	; 0x12
    2a8c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a8e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a90:	9c 89       	ldd	r25, Y+20	; 0x14
    2a92:	01 97       	sbiw	r24, 0x01	; 1
    2a94:	9c 8b       	std	Y+20, r25	; 0x14
    2a96:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a98:	8b 89       	ldd	r24, Y+19	; 0x13
    2a9a:	9c 89       	ldd	r25, Y+20	; 0x14
    2a9c:	00 97       	sbiw	r24, 0x00	; 0
    2a9e:	69 f7       	brne	.-38     	; 0x2a7a <LCD_VIDSENDCHAR+0x2ea>
    2aa0:	14 c0       	rjmp	.+40     	; 0x2aca <LCD_VIDSENDCHAR+0x33a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aa2:	6d 89       	ldd	r22, Y+21	; 0x15
    2aa4:	7e 89       	ldd	r23, Y+22	; 0x16
    2aa6:	8f 89       	ldd	r24, Y+23	; 0x17
    2aa8:	98 8d       	ldd	r25, Y+24	; 0x18
    2aaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aae:	dc 01       	movw	r26, r24
    2ab0:	cb 01       	movw	r24, r22
    2ab2:	9c 8b       	std	Y+20, r25	; 0x14
    2ab4:	8b 8b       	std	Y+19, r24	; 0x13
    2ab6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ab8:	9c 89       	ldd	r25, Y+20	; 0x14
    2aba:	98 8b       	std	Y+16, r25	; 0x10
    2abc:	8f 87       	std	Y+15, r24	; 0x0f
    2abe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ac0:	98 89       	ldd	r25, Y+16	; 0x10
    2ac2:	01 97       	sbiw	r24, 0x01	; 1
    2ac4:	f1 f7       	brne	.-4      	; 0x2ac2 <LCD_VIDSENDCHAR+0x332>
    2ac6:	98 8b       	std	Y+16, r25	; 0x10
    2ac8:	8f 87       	std	Y+15, r24	; 0x0f
	/* wait for E to settle */
	_delay_ms(2);
	/* SET E to HIGH */
	DIO_WRITECHANNEL( E, HIGH);
    2aca:	82 e0       	ldi	r24, 0x02	; 2
    2acc:	61 e0       	ldi	r22, 0x01	; 1
    2ace:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
    2ad2:	80 e0       	ldi	r24, 0x00	; 0
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	a0 ea       	ldi	r26, 0xA0	; 160
    2ad8:	b0 e4       	ldi	r27, 0x40	; 64
    2ada:	8b 87       	std	Y+11, r24	; 0x0b
    2adc:	9c 87       	std	Y+12, r25	; 0x0c
    2ade:	ad 87       	std	Y+13, r26	; 0x0d
    2ae0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ae2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ae4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ae6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ae8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	4a e7       	ldi	r20, 0x7A	; 122
    2af0:	55 e4       	ldi	r21, 0x45	; 69
    2af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	8f 83       	std	Y+7, r24	; 0x07
    2afc:	98 87       	std	Y+8, r25	; 0x08
    2afe:	a9 87       	std	Y+9, r26	; 0x09
    2b00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b02:	6f 81       	ldd	r22, Y+7	; 0x07
    2b04:	78 85       	ldd	r23, Y+8	; 0x08
    2b06:	89 85       	ldd	r24, Y+9	; 0x09
    2b08:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b0a:	20 e0       	ldi	r18, 0x00	; 0
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	40 e8       	ldi	r20, 0x80	; 128
    2b10:	5f e3       	ldi	r21, 0x3F	; 63
    2b12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b16:	88 23       	and	r24, r24
    2b18:	2c f4       	brge	.+10     	; 0x2b24 <LCD_VIDSENDCHAR+0x394>
		__ticks = 1;
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	9e 83       	std	Y+6, r25	; 0x06
    2b20:	8d 83       	std	Y+5, r24	; 0x05
    2b22:	3f c0       	rjmp	.+126    	; 0x2ba2 <LCD_VIDSENDCHAR+0x412>
	else if (__tmp > 65535)
    2b24:	6f 81       	ldd	r22, Y+7	; 0x07
    2b26:	78 85       	ldd	r23, Y+8	; 0x08
    2b28:	89 85       	ldd	r24, Y+9	; 0x09
    2b2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b2c:	20 e0       	ldi	r18, 0x00	; 0
    2b2e:	3f ef       	ldi	r19, 0xFF	; 255
    2b30:	4f e7       	ldi	r20, 0x7F	; 127
    2b32:	57 e4       	ldi	r21, 0x47	; 71
    2b34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b38:	18 16       	cp	r1, r24
    2b3a:	4c f5       	brge	.+82     	; 0x2b8e <LCD_VIDSENDCHAR+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b40:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b42:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	40 e2       	ldi	r20, 0x20	; 32
    2b4a:	51 e4       	ldi	r21, 0x41	; 65
    2b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	bc 01       	movw	r22, r24
    2b56:	cd 01       	movw	r24, r26
    2b58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b5c:	dc 01       	movw	r26, r24
    2b5e:	cb 01       	movw	r24, r22
    2b60:	9e 83       	std	Y+6, r25	; 0x06
    2b62:	8d 83       	std	Y+5, r24	; 0x05
    2b64:	0f c0       	rjmp	.+30     	; 0x2b84 <LCD_VIDSENDCHAR+0x3f4>
    2b66:	80 e9       	ldi	r24, 0x90	; 144
    2b68:	91 e0       	ldi	r25, 0x01	; 1
    2b6a:	9c 83       	std	Y+4, r25	; 0x04
    2b6c:	8b 83       	std	Y+3, r24	; 0x03
    2b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b70:	9c 81       	ldd	r25, Y+4	; 0x04
    2b72:	01 97       	sbiw	r24, 0x01	; 1
    2b74:	f1 f7       	brne	.-4      	; 0x2b72 <LCD_VIDSENDCHAR+0x3e2>
    2b76:	9c 83       	std	Y+4, r25	; 0x04
    2b78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b7e:	01 97       	sbiw	r24, 0x01	; 1
    2b80:	9e 83       	std	Y+6, r25	; 0x06
    2b82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b84:	8d 81       	ldd	r24, Y+5	; 0x05
    2b86:	9e 81       	ldd	r25, Y+6	; 0x06
    2b88:	00 97       	sbiw	r24, 0x00	; 0
    2b8a:	69 f7       	brne	.-38     	; 0x2b66 <LCD_VIDSENDCHAR+0x3d6>
    2b8c:	14 c0       	rjmp	.+40     	; 0x2bb6 <LCD_VIDSENDCHAR+0x426>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b8e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b90:	78 85       	ldd	r23, Y+8	; 0x08
    2b92:	89 85       	ldd	r24, Y+9	; 0x09
    2b94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	cb 01       	movw	r24, r22
    2b9e:	9e 83       	std	Y+6, r25	; 0x06
    2ba0:	8d 83       	std	Y+5, r24	; 0x05
    2ba2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba6:	9a 83       	std	Y+2, r25	; 0x02
    2ba8:	89 83       	std	Y+1, r24	; 0x01
    2baa:	89 81       	ldd	r24, Y+1	; 0x01
    2bac:	9a 81       	ldd	r25, Y+2	; 0x02
    2bae:	01 97       	sbiw	r24, 0x01	; 1
    2bb0:	f1 f7       	brne	.-4      	; 0x2bae <LCD_VIDSENDCHAR+0x41e>
    2bb2:	9a 83       	std	Y+2, r25	; 0x02
    2bb4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
#endif
}
    2bb6:	e9 96       	adiw	r28, 0x39	; 57
    2bb8:	0f b6       	in	r0, 0x3f	; 63
    2bba:	f8 94       	cli
    2bbc:	de bf       	out	0x3e, r29	; 62
    2bbe:	0f be       	out	0x3f, r0	; 63
    2bc0:	cd bf       	out	0x3d, r28	; 61
    2bc2:	cf 91       	pop	r28
    2bc4:	df 91       	pop	r29
    2bc6:	1f 91       	pop	r17
    2bc8:	08 95       	ret

00002bca <LCD_VIDGOTOXY>:

void LCD_VIDGOTOXY(uint8 x, uint8 y) {
    2bca:	df 93       	push	r29
    2bcc:	cf 93       	push	r28
    2bce:	00 d0       	rcall	.+0      	; 0x2bd0 <LCD_VIDGOTOXY+0x6>
    2bd0:	00 d0       	rcall	.+0      	; 0x2bd2 <LCD_VIDGOTOXY+0x8>
    2bd2:	cd b7       	in	r28, 0x3d	; 61
    2bd4:	de b7       	in	r29, 0x3e	; 62
    2bd6:	89 83       	std	Y+1, r24	; 0x01
    2bd8:	6a 83       	std	Y+2, r22	; 0x02
	if (y >= 0 && y < 16) {
    2bda:	8a 81       	ldd	r24, Y+2	; 0x02
    2bdc:	80 31       	cpi	r24, 0x10	; 16
    2bde:	c0 f4       	brcc	.+48     	; 0x2c10 <LCD_VIDGOTOXY+0x46>
		switch (x) {
    2be0:	89 81       	ldd	r24, Y+1	; 0x01
    2be2:	28 2f       	mov	r18, r24
    2be4:	30 e0       	ldi	r19, 0x00	; 0
    2be6:	3c 83       	std	Y+4, r19	; 0x04
    2be8:	2b 83       	std	Y+3, r18	; 0x03
    2bea:	8b 81       	ldd	r24, Y+3	; 0x03
    2bec:	9c 81       	ldd	r25, Y+4	; 0x04
    2bee:	00 97       	sbiw	r24, 0x00	; 0
    2bf0:	31 f0       	breq	.+12     	; 0x2bfe <LCD_VIDGOTOXY+0x34>
    2bf2:	2b 81       	ldd	r18, Y+3	; 0x03
    2bf4:	3c 81       	ldd	r19, Y+4	; 0x04
    2bf6:	21 30       	cpi	r18, 0x01	; 1
    2bf8:	31 05       	cpc	r19, r1
    2bfa:	31 f0       	breq	.+12     	; 0x2c08 <LCD_VIDGOTOXY+0x3e>
    2bfc:	09 c0       	rjmp	.+18     	; 0x2c10 <LCD_VIDGOTOXY+0x46>
		case 0:
			LCD_VIDSENDCOMMAND(y + LCD_FIRSTROW);
    2bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2c00:	80 58       	subi	r24, 0x80	; 128
    2c02:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <LCD_VIDSENDCOMMAND>
    2c06:	04 c0       	rjmp	.+8      	; 0x2c10 <LCD_VIDGOTOXY+0x46>
			break;
		case 1:
			LCD_VIDSENDCOMMAND(y + LCD_SECONDROW);
    2c08:	8a 81       	ldd	r24, Y+2	; 0x02
    2c0a:	80 54       	subi	r24, 0x40	; 64
    2c0c:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <LCD_VIDSENDCOMMAND>
			break;
		}
	}
}
    2c10:	0f 90       	pop	r0
    2c12:	0f 90       	pop	r0
    2c14:	0f 90       	pop	r0
    2c16:	0f 90       	pop	r0
    2c18:	cf 91       	pop	r28
    2c1a:	df 91       	pop	r29
    2c1c:	08 95       	ret

00002c1e <LCD_VIDSENDSTRING>:

void LCD_VIDSENDSTRING(uint8* STRING, uint8 MAX) {
    2c1e:	df 93       	push	r29
    2c20:	cf 93       	push	r28
    2c22:	cd b7       	in	r28, 0x3d	; 61
    2c24:	de b7       	in	r29, 0x3e	; 62
    2c26:	62 97       	sbiw	r28, 0x12	; 18
    2c28:	0f b6       	in	r0, 0x3f	; 63
    2c2a:	f8 94       	cli
    2c2c:	de bf       	out	0x3e, r29	; 62
    2c2e:	0f be       	out	0x3f, r0	; 63
    2c30:	cd bf       	out	0x3d, r28	; 61
    2c32:	99 8b       	std	Y+17, r25	; 0x11
    2c34:	88 8b       	std	Y+16, r24	; 0x10
    2c36:	6a 8b       	std	Y+18, r22	; 0x12
	uint8 i = 0;
    2c38:	1f 86       	std	Y+15, r1	; 0x0f
	for (i = 0; i < MAX; i++) {
    2c3a:	1f 86       	std	Y+15, r1	; 0x0f
    2c3c:	0e c0       	rjmp	.+28     	; 0x2c5a <LCD_VIDSENDSTRING+0x3c>
		LCD_VIDSENDCHAR(STRING[i]);
    2c3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c40:	28 2f       	mov	r18, r24
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	88 89       	ldd	r24, Y+16	; 0x10
    2c46:	99 89       	ldd	r25, Y+17	; 0x11
    2c48:	fc 01       	movw	r30, r24
    2c4a:	e2 0f       	add	r30, r18
    2c4c:	f3 1f       	adc	r31, r19
    2c4e:	80 81       	ld	r24, Z
    2c50:	0e 94 c8 13 	call	0x2790	; 0x2790 <LCD_VIDSENDCHAR>
	}
}

void LCD_VIDSENDSTRING(uint8* STRING, uint8 MAX) {
	uint8 i = 0;
	for (i = 0; i < MAX; i++) {
    2c54:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c56:	8f 5f       	subi	r24, 0xFF	; 255
    2c58:	8f 87       	std	Y+15, r24	; 0x0f
    2c5a:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c5c:	8a 89       	ldd	r24, Y+18	; 0x12
    2c5e:	98 17       	cp	r25, r24
    2c60:	70 f3       	brcs	.-36     	; 0x2c3e <LCD_VIDSENDSTRING+0x20>
    2c62:	80 e0       	ldi	r24, 0x00	; 0
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	a0 e0       	ldi	r26, 0x00	; 0
    2c68:	b0 e4       	ldi	r27, 0x40	; 64
    2c6a:	8b 87       	std	Y+11, r24	; 0x0b
    2c6c:	9c 87       	std	Y+12, r25	; 0x0c
    2c6e:	ad 87       	std	Y+13, r26	; 0x0d
    2c70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c72:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c74:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c76:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c78:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c7a:	20 e0       	ldi	r18, 0x00	; 0
    2c7c:	30 e0       	ldi	r19, 0x00	; 0
    2c7e:	4a e7       	ldi	r20, 0x7A	; 122
    2c80:	55 e4       	ldi	r21, 0x45	; 69
    2c82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c86:	dc 01       	movw	r26, r24
    2c88:	cb 01       	movw	r24, r22
    2c8a:	8f 83       	std	Y+7, r24	; 0x07
    2c8c:	98 87       	std	Y+8, r25	; 0x08
    2c8e:	a9 87       	std	Y+9, r26	; 0x09
    2c90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c92:	6f 81       	ldd	r22, Y+7	; 0x07
    2c94:	78 85       	ldd	r23, Y+8	; 0x08
    2c96:	89 85       	ldd	r24, Y+9	; 0x09
    2c98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c9a:	20 e0       	ldi	r18, 0x00	; 0
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	40 e8       	ldi	r20, 0x80	; 128
    2ca0:	5f e3       	ldi	r21, 0x3F	; 63
    2ca2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ca6:	88 23       	and	r24, r24
    2ca8:	2c f4       	brge	.+10     	; 0x2cb4 <LCD_VIDSENDSTRING+0x96>
		__ticks = 1;
    2caa:	81 e0       	ldi	r24, 0x01	; 1
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	9e 83       	std	Y+6, r25	; 0x06
    2cb0:	8d 83       	std	Y+5, r24	; 0x05
    2cb2:	3f c0       	rjmp	.+126    	; 0x2d32 <LCD_VIDSENDSTRING+0x114>
	else if (__tmp > 65535)
    2cb4:	6f 81       	ldd	r22, Y+7	; 0x07
    2cb6:	78 85       	ldd	r23, Y+8	; 0x08
    2cb8:	89 85       	ldd	r24, Y+9	; 0x09
    2cba:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cbc:	20 e0       	ldi	r18, 0x00	; 0
    2cbe:	3f ef       	ldi	r19, 0xFF	; 255
    2cc0:	4f e7       	ldi	r20, 0x7F	; 127
    2cc2:	57 e4       	ldi	r21, 0x47	; 71
    2cc4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cc8:	18 16       	cp	r1, r24
    2cca:	4c f5       	brge	.+82     	; 0x2d1e <LCD_VIDSENDSTRING+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ccc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cce:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cd4:	20 e0       	ldi	r18, 0x00	; 0
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	40 e2       	ldi	r20, 0x20	; 32
    2cda:	51 e4       	ldi	r21, 0x41	; 65
    2cdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	cb 01       	movw	r24, r22
    2ce4:	bc 01       	movw	r22, r24
    2ce6:	cd 01       	movw	r24, r26
    2ce8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cec:	dc 01       	movw	r26, r24
    2cee:	cb 01       	movw	r24, r22
    2cf0:	9e 83       	std	Y+6, r25	; 0x06
    2cf2:	8d 83       	std	Y+5, r24	; 0x05
    2cf4:	0f c0       	rjmp	.+30     	; 0x2d14 <LCD_VIDSENDSTRING+0xf6>
    2cf6:	80 e9       	ldi	r24, 0x90	; 144
    2cf8:	91 e0       	ldi	r25, 0x01	; 1
    2cfa:	9c 83       	std	Y+4, r25	; 0x04
    2cfc:	8b 83       	std	Y+3, r24	; 0x03
    2cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    2d00:	9c 81       	ldd	r25, Y+4	; 0x04
    2d02:	01 97       	sbiw	r24, 0x01	; 1
    2d04:	f1 f7       	brne	.-4      	; 0x2d02 <LCD_VIDSENDSTRING+0xe4>
    2d06:	9c 83       	std	Y+4, r25	; 0x04
    2d08:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d0e:	01 97       	sbiw	r24, 0x01	; 1
    2d10:	9e 83       	std	Y+6, r25	; 0x06
    2d12:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d14:	8d 81       	ldd	r24, Y+5	; 0x05
    2d16:	9e 81       	ldd	r25, Y+6	; 0x06
    2d18:	00 97       	sbiw	r24, 0x00	; 0
    2d1a:	69 f7       	brne	.-38     	; 0x2cf6 <LCD_VIDSENDSTRING+0xd8>
    2d1c:	14 c0       	rjmp	.+40     	; 0x2d46 <LCD_VIDSENDSTRING+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d1e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d20:	78 85       	ldd	r23, Y+8	; 0x08
    2d22:	89 85       	ldd	r24, Y+9	; 0x09
    2d24:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d2a:	dc 01       	movw	r26, r24
    2d2c:	cb 01       	movw	r24, r22
    2d2e:	9e 83       	std	Y+6, r25	; 0x06
    2d30:	8d 83       	std	Y+5, r24	; 0x05
    2d32:	8d 81       	ldd	r24, Y+5	; 0x05
    2d34:	9e 81       	ldd	r25, Y+6	; 0x06
    2d36:	9a 83       	std	Y+2, r25	; 0x02
    2d38:	89 83       	std	Y+1, r24	; 0x01
    2d3a:	89 81       	ldd	r24, Y+1	; 0x01
    2d3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d3e:	01 97       	sbiw	r24, 0x01	; 1
    2d40:	f1 f7       	brne	.-4      	; 0x2d3e <LCD_VIDSENDSTRING+0x120>
    2d42:	9a 83       	std	Y+2, r25	; 0x02
    2d44:	89 83       	std	Y+1, r24	; 0x01
		LCD_VIDSENDCHAR(STRING[i]);
	}
	_delay_ms(2);
}
    2d46:	62 96       	adiw	r28, 0x12	; 18
    2d48:	0f b6       	in	r0, 0x3f	; 63
    2d4a:	f8 94       	cli
    2d4c:	de bf       	out	0x3e, r29	; 62
    2d4e:	0f be       	out	0x3f, r0	; 63
    2d50:	cd bf       	out	0x3d, r28	; 61
    2d52:	cf 91       	pop	r28
    2d54:	df 91       	pop	r29
    2d56:	08 95       	ret

00002d58 <LCD_WRITEEXTRACHAR>:
void LCD_WRITEEXTRACHAR(uint8 Row,uint8 Col){
    2d58:	df 93       	push	r29
    2d5a:	cf 93       	push	r28
    2d5c:	00 d0       	rcall	.+0      	; 0x2d5e <LCD_WRITEEXTRACHAR+0x6>
    2d5e:	00 d0       	rcall	.+0      	; 0x2d60 <LCD_WRITEEXTRACHAR+0x8>
    2d60:	cd b7       	in	r28, 0x3d	; 61
    2d62:	de b7       	in	r29, 0x3e	; 62
    2d64:	8b 83       	std	Y+3, r24	; 0x03
    2d66:	6c 83       	std	Y+4, r22	; 0x04
uint8 iteration1,iteration2;
if((Col>=0 && Col<16)&& ((Row==0 || Row==1))){
    2d68:	8c 81       	ldd	r24, Y+4	; 0x04
    2d6a:	80 31       	cpi	r24, 0x10	; 16
    2d6c:	60 f5       	brcc	.+88     	; 0x2dc6 <LCD_WRITEEXTRACHAR+0x6e>
    2d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d70:	88 23       	and	r24, r24
    2d72:	19 f0       	breq	.+6      	; 0x2d7a <LCD_WRITEEXTRACHAR+0x22>
    2d74:	8b 81       	ldd	r24, Y+3	; 0x03
    2d76:	81 30       	cpi	r24, 0x01	; 1
    2d78:	31 f5       	brne	.+76     	; 0x2dc6 <LCD_WRITEEXTRACHAR+0x6e>
	//DIO_WRITECHANNEL(PINC0,HIGH);
	LCD_VIDSENDCOMMAND(0x40);
    2d7a:	80 e4       	ldi	r24, 0x40	; 64
    2d7c:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <LCD_VIDSENDCOMMAND>
	for(iteration1=0;iteration1<64;iteration1++){
    2d80:	1a 82       	std	Y+2, r1	; 0x02
    2d82:	0c c0       	rjmp	.+24     	; 0x2d9c <LCD_WRITEEXTRACHAR+0x44>
		LCD_VIDSENDCHAR(ExtraChar[iteration1]);
    2d84:	8a 81       	ldd	r24, Y+2	; 0x02
    2d86:	88 2f       	mov	r24, r24
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	fc 01       	movw	r30, r24
    2d8c:	ee 53       	subi	r30, 0x3E	; 62
    2d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d90:	80 81       	ld	r24, Z
    2d92:	0e 94 c8 13 	call	0x2790	; 0x2790 <LCD_VIDSENDCHAR>
void LCD_WRITEEXTRACHAR(uint8 Row,uint8 Col){
uint8 iteration1,iteration2;
if((Col>=0 && Col<16)&& ((Row==0 || Row==1))){
	//DIO_WRITECHANNEL(PINC0,HIGH);
	LCD_VIDSENDCOMMAND(0x40);
	for(iteration1=0;iteration1<64;iteration1++){
    2d96:	8a 81       	ldd	r24, Y+2	; 0x02
    2d98:	8f 5f       	subi	r24, 0xFF	; 255
    2d9a:	8a 83       	std	Y+2, r24	; 0x02
    2d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d9e:	80 34       	cpi	r24, 0x40	; 64
    2da0:	88 f3       	brcs	.-30     	; 0x2d84 <LCD_WRITEEXTRACHAR+0x2c>
		LCD_VIDSENDCHAR(ExtraChar[iteration1]);
	}
LCD_VIDSENDCOMMAND(0x80);
    2da2:	80 e8       	ldi	r24, 0x80	; 128
    2da4:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <LCD_VIDSENDCOMMAND>
LCD_VIDGOTOXY(Row,Col);
    2da8:	8b 81       	ldd	r24, Y+3	; 0x03
    2daa:	6c 81       	ldd	r22, Y+4	; 0x04
    2dac:	0e 94 e5 15 	call	0x2bca	; 0x2bca <LCD_VIDGOTOXY>
for(iteration2=0;iteration2<8;iteration2++){
    2db0:	19 82       	std	Y+1, r1	; 0x01
    2db2:	06 c0       	rjmp	.+12     	; 0x2dc0 <LCD_WRITEEXTRACHAR+0x68>

		LCD_VIDSENDCHAR(iteration2);}
    2db4:	89 81       	ldd	r24, Y+1	; 0x01
    2db6:	0e 94 c8 13 	call	0x2790	; 0x2790 <LCD_VIDSENDCHAR>
	for(iteration1=0;iteration1<64;iteration1++){
		LCD_VIDSENDCHAR(ExtraChar[iteration1]);
	}
LCD_VIDSENDCOMMAND(0x80);
LCD_VIDGOTOXY(Row,Col);
for(iteration2=0;iteration2<8;iteration2++){
    2dba:	89 81       	ldd	r24, Y+1	; 0x01
    2dbc:	8f 5f       	subi	r24, 0xFF	; 255
    2dbe:	89 83       	std	Y+1, r24	; 0x01
    2dc0:	89 81       	ldd	r24, Y+1	; 0x01
    2dc2:	88 30       	cpi	r24, 0x08	; 8
    2dc4:	b8 f3       	brcs	.-18     	; 0x2db4 <LCD_WRITEEXTRACHAR+0x5c>

		LCD_VIDSENDCHAR(iteration2);}

}

}
    2dc6:	0f 90       	pop	r0
    2dc8:	0f 90       	pop	r0
    2dca:	0f 90       	pop	r0
    2dcc:	0f 90       	pop	r0
    2dce:	cf 91       	pop	r28
    2dd0:	df 91       	pop	r29
    2dd2:	08 95       	ret

00002dd4 <MOTOR_INIT>:
#include "MEMMAP.h"
#include "DIO.h"
#include <util/delay.h>
#include "Stepper_Motor.h"

void MOTOR_INIT(void) {
    2dd4:	df 93       	push	r29
    2dd6:	cf 93       	push	r28
    2dd8:	cd b7       	in	r28, 0x3d	; 61
    2dda:	de b7       	in	r29, 0x3e	; 62
	DIO_WRITECHANNEL(BLUE, LOW);
    2ddc:	8c e1       	ldi	r24, 0x1C	; 28
    2dde:	60 e0       	ldi	r22, 0x00	; 0
    2de0:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
	DIO_WRITECHANNEL(PINK, LOW);
    2de4:	8d e1       	ldi	r24, 0x1D	; 29
    2de6:	60 e0       	ldi	r22, 0x00	; 0
    2de8:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
	DIO_WRITECHANNEL(YELLOW, LOW);
    2dec:	8e e1       	ldi	r24, 0x1E	; 30
    2dee:	60 e0       	ldi	r22, 0x00	; 0
    2df0:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
	DIO_WRITECHANNEL(ORANGE, LOW);
    2df4:	8f e1       	ldi	r24, 0x1F	; 31
    2df6:	60 e0       	ldi	r22, 0x00	; 0
    2df8:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
}
    2dfc:	cf 91       	pop	r28
    2dfe:	df 91       	pop	r29
    2e00:	08 95       	ret

00002e02 <MOTOR_CWFULL>:

void MOTOR_CWFULL(void) {
    2e02:	df 93       	push	r29
    2e04:	cf 93       	push	r28
    2e06:	cd b7       	in	r28, 0x3d	; 61
    2e08:	de b7       	in	r29, 0x3e	; 62
    2e0a:	2f 97       	sbiw	r28, 0x0f	; 15
    2e0c:	0f b6       	in	r0, 0x3f	; 63
    2e0e:	f8 94       	cli
    2e10:	de bf       	out	0x3e, r29	; 62
    2e12:	0f be       	out	0x3f, r0	; 63
    2e14:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	const uint8 Colour[4] = { BLUE, PINK, YELLOW, ORANGE };
	for (i = 0; i < 4; i++) {
    2e16:	1f 86       	std	Y+15, r1	; 0x0f
    2e18:	89 c0       	rjmp	.+274    	; 0x2f2c <MOTOR_CWFULL+0x12a>
		DIO_WRITECHANNEL(Colour[i], HIGH);
    2e1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e1c:	88 2f       	mov	r24, r24
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	fc 01       	movw	r30, r24
    2e22:	ee 5f       	subi	r30, 0xFE	; 254
    2e24:	fe 4f       	sbci	r31, 0xFE	; 254
    2e26:	80 81       	ld	r24, Z
    2e28:	61 e0       	ldi	r22, 0x01	; 1
    2e2a:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
    2e2e:	80 e0       	ldi	r24, 0x00	; 0
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	a0 e2       	ldi	r26, 0x20	; 32
    2e34:	b1 e4       	ldi	r27, 0x41	; 65
    2e36:	8b 87       	std	Y+11, r24	; 0x0b
    2e38:	9c 87       	std	Y+12, r25	; 0x0c
    2e3a:	ad 87       	std	Y+13, r26	; 0x0d
    2e3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e40:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e42:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e44:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e46:	20 e0       	ldi	r18, 0x00	; 0
    2e48:	30 e0       	ldi	r19, 0x00	; 0
    2e4a:	4a e7       	ldi	r20, 0x7A	; 122
    2e4c:	55 e4       	ldi	r21, 0x45	; 69
    2e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e52:	dc 01       	movw	r26, r24
    2e54:	cb 01       	movw	r24, r22
    2e56:	8f 83       	std	Y+7, r24	; 0x07
    2e58:	98 87       	std	Y+8, r25	; 0x08
    2e5a:	a9 87       	std	Y+9, r26	; 0x09
    2e5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e60:	78 85       	ldd	r23, Y+8	; 0x08
    2e62:	89 85       	ldd	r24, Y+9	; 0x09
    2e64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	40 e8       	ldi	r20, 0x80	; 128
    2e6c:	5f e3       	ldi	r21, 0x3F	; 63
    2e6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e72:	88 23       	and	r24, r24
    2e74:	2c f4       	brge	.+10     	; 0x2e80 <MOTOR_CWFULL+0x7e>
		__ticks = 1;
    2e76:	81 e0       	ldi	r24, 0x01	; 1
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	9e 83       	std	Y+6, r25	; 0x06
    2e7c:	8d 83       	std	Y+5, r24	; 0x05
    2e7e:	3f c0       	rjmp	.+126    	; 0x2efe <MOTOR_CWFULL+0xfc>
	else if (__tmp > 65535)
    2e80:	6f 81       	ldd	r22, Y+7	; 0x07
    2e82:	78 85       	ldd	r23, Y+8	; 0x08
    2e84:	89 85       	ldd	r24, Y+9	; 0x09
    2e86:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e88:	20 e0       	ldi	r18, 0x00	; 0
    2e8a:	3f ef       	ldi	r19, 0xFF	; 255
    2e8c:	4f e7       	ldi	r20, 0x7F	; 127
    2e8e:	57 e4       	ldi	r21, 0x47	; 71
    2e90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e94:	18 16       	cp	r1, r24
    2e96:	4c f5       	brge	.+82     	; 0x2eea <MOTOR_CWFULL+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e98:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	30 e0       	ldi	r19, 0x00	; 0
    2ea4:	40 e2       	ldi	r20, 0x20	; 32
    2ea6:	51 e4       	ldi	r21, 0x41	; 65
    2ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eac:	dc 01       	movw	r26, r24
    2eae:	cb 01       	movw	r24, r22
    2eb0:	bc 01       	movw	r22, r24
    2eb2:	cd 01       	movw	r24, r26
    2eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb8:	dc 01       	movw	r26, r24
    2eba:	cb 01       	movw	r24, r22
    2ebc:	9e 83       	std	Y+6, r25	; 0x06
    2ebe:	8d 83       	std	Y+5, r24	; 0x05
    2ec0:	0f c0       	rjmp	.+30     	; 0x2ee0 <MOTOR_CWFULL+0xde>
    2ec2:	80 e9       	ldi	r24, 0x90	; 144
    2ec4:	91 e0       	ldi	r25, 0x01	; 1
    2ec6:	9c 83       	std	Y+4, r25	; 0x04
    2ec8:	8b 83       	std	Y+3, r24	; 0x03
    2eca:	8b 81       	ldd	r24, Y+3	; 0x03
    2ecc:	9c 81       	ldd	r25, Y+4	; 0x04
    2ece:	01 97       	sbiw	r24, 0x01	; 1
    2ed0:	f1 f7       	brne	.-4      	; 0x2ece <MOTOR_CWFULL+0xcc>
    2ed2:	9c 83       	std	Y+4, r25	; 0x04
    2ed4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ed6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eda:	01 97       	sbiw	r24, 0x01	; 1
    2edc:	9e 83       	std	Y+6, r25	; 0x06
    2ede:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee4:	00 97       	sbiw	r24, 0x00	; 0
    2ee6:	69 f7       	brne	.-38     	; 0x2ec2 <MOTOR_CWFULL+0xc0>
    2ee8:	14 c0       	rjmp	.+40     	; 0x2f12 <MOTOR_CWFULL+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eea:	6f 81       	ldd	r22, Y+7	; 0x07
    2eec:	78 85       	ldd	r23, Y+8	; 0x08
    2eee:	89 85       	ldd	r24, Y+9	; 0x09
    2ef0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef6:	dc 01       	movw	r26, r24
    2ef8:	cb 01       	movw	r24, r22
    2efa:	9e 83       	std	Y+6, r25	; 0x06
    2efc:	8d 83       	std	Y+5, r24	; 0x05
    2efe:	8d 81       	ldd	r24, Y+5	; 0x05
    2f00:	9e 81       	ldd	r25, Y+6	; 0x06
    2f02:	9a 83       	std	Y+2, r25	; 0x02
    2f04:	89 83       	std	Y+1, r24	; 0x01
    2f06:	89 81       	ldd	r24, Y+1	; 0x01
    2f08:	9a 81       	ldd	r25, Y+2	; 0x02
    2f0a:	01 97       	sbiw	r24, 0x01	; 1
    2f0c:	f1 f7       	brne	.-4      	; 0x2f0a <MOTOR_CWFULL+0x108>
    2f0e:	9a 83       	std	Y+2, r25	; 0x02
    2f10:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		DIO_WRITECHANNEL(Colour[i], LOW);
    2f12:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f14:	88 2f       	mov	r24, r24
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	fc 01       	movw	r30, r24
    2f1a:	ee 5f       	subi	r30, 0xFE	; 254
    2f1c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f1e:	80 81       	ld	r24, Z
    2f20:	60 e0       	ldi	r22, 0x00	; 0
    2f22:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
}

void MOTOR_CWFULL(void) {
	uint8 i;
	const uint8 Colour[4] = { BLUE, PINK, YELLOW, ORANGE };
	for (i = 0; i < 4; i++) {
    2f26:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f28:	8f 5f       	subi	r24, 0xFF	; 255
    2f2a:	8f 87       	std	Y+15, r24	; 0x0f
    2f2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f2e:	84 30       	cpi	r24, 0x04	; 4
    2f30:	08 f4       	brcc	.+2      	; 0x2f34 <MOTOR_CWFULL+0x132>
    2f32:	73 cf       	rjmp	.-282    	; 0x2e1a <MOTOR_CWFULL+0x18>
		DIO_WRITECHANNEL(Colour[i], HIGH);
		_delay_ms(10);
		DIO_WRITECHANNEL(Colour[i], LOW);
	}
}
    2f34:	2f 96       	adiw	r28, 0x0f	; 15
    2f36:	0f b6       	in	r0, 0x3f	; 63
    2f38:	f8 94       	cli
    2f3a:	de bf       	out	0x3e, r29	; 62
    2f3c:	0f be       	out	0x3f, r0	; 63
    2f3e:	cd bf       	out	0x3d, r28	; 61
    2f40:	cf 91       	pop	r28
    2f42:	df 91       	pop	r29
    2f44:	08 95       	ret

00002f46 <MOTOR_CWHALF>:

void MOTOR_CWHALF(void) {
    2f46:	df 93       	push	r29
    2f48:	cf 93       	push	r28
    2f4a:	cd b7       	in	r28, 0x3d	; 61
    2f4c:	de b7       	in	r29, 0x3e	; 62
    2f4e:	2f 97       	sbiw	r28, 0x0f	; 15
    2f50:	0f b6       	in	r0, 0x3f	; 63
    2f52:	f8 94       	cli
    2f54:	de bf       	out	0x3e, r29	; 62
    2f56:	0f be       	out	0x3f, r0	; 63
    2f58:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	const uint8 CW_HM[8]={9,1,3,2,6,4,12,8};
	for (i = 0; i < 8; i++) {
    2f5a:	1f 86       	std	Y+15, r1	; 0x0f
    2f5c:	af c0       	rjmp	.+350    	; 0x30bc <MOTOR_CWHALF+0x176>
		DIO_WRITECHANNEL(BLUE, (CW_HM[i]>>0)&1);
    2f5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f60:	88 2f       	mov	r24, r24
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	fc 01       	movw	r30, r24
    2f66:	ea 5f       	subi	r30, 0xFA	; 250
    2f68:	fe 4f       	sbci	r31, 0xFE	; 254
    2f6a:	80 81       	ld	r24, Z
    2f6c:	98 2f       	mov	r25, r24
    2f6e:	91 70       	andi	r25, 0x01	; 1
    2f70:	8c e1       	ldi	r24, 0x1C	; 28
    2f72:	69 2f       	mov	r22, r25
    2f74:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
		DIO_WRITECHANNEL(PINK, (CW_HM[i]>>1)&1);
    2f78:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f7a:	88 2f       	mov	r24, r24
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	fc 01       	movw	r30, r24
    2f80:	ea 5f       	subi	r30, 0xFA	; 250
    2f82:	fe 4f       	sbci	r31, 0xFE	; 254
    2f84:	80 81       	ld	r24, Z
    2f86:	86 95       	lsr	r24
    2f88:	98 2f       	mov	r25, r24
    2f8a:	91 70       	andi	r25, 0x01	; 1
    2f8c:	8d e1       	ldi	r24, 0x1D	; 29
    2f8e:	69 2f       	mov	r22, r25
    2f90:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
		DIO_WRITECHANNEL(YELLOW,(CW_HM[i]>>2)&1);
    2f94:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f96:	88 2f       	mov	r24, r24
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	fc 01       	movw	r30, r24
    2f9c:	ea 5f       	subi	r30, 0xFA	; 250
    2f9e:	fe 4f       	sbci	r31, 0xFE	; 254
    2fa0:	80 81       	ld	r24, Z
    2fa2:	86 95       	lsr	r24
    2fa4:	86 95       	lsr	r24
    2fa6:	98 2f       	mov	r25, r24
    2fa8:	91 70       	andi	r25, 0x01	; 1
    2faa:	8e e1       	ldi	r24, 0x1E	; 30
    2fac:	69 2f       	mov	r22, r25
    2fae:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
		DIO_WRITECHANNEL(ORANGE, (CW_HM[i]>>3)&1);
    2fb2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fb4:	88 2f       	mov	r24, r24
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	fc 01       	movw	r30, r24
    2fba:	ea 5f       	subi	r30, 0xFA	; 250
    2fbc:	fe 4f       	sbci	r31, 0xFE	; 254
    2fbe:	80 81       	ld	r24, Z
    2fc0:	86 95       	lsr	r24
    2fc2:	86 95       	lsr	r24
    2fc4:	86 95       	lsr	r24
    2fc6:	98 2f       	mov	r25, r24
    2fc8:	91 70       	andi	r25, 0x01	; 1
    2fca:	8f e1       	ldi	r24, 0x1F	; 31
    2fcc:	69 2f       	mov	r22, r25
    2fce:	0e 94 5e 07 	call	0xebc	; 0xebc <DIO_WRITECHANNEL>
    2fd2:	80 e0       	ldi	r24, 0x00	; 0
    2fd4:	90 e0       	ldi	r25, 0x00	; 0
    2fd6:	a0 e2       	ldi	r26, 0x20	; 32
    2fd8:	b1 e4       	ldi	r27, 0x41	; 65
    2fda:	8b 87       	std	Y+11, r24	; 0x0b
    2fdc:	9c 87       	std	Y+12, r25	; 0x0c
    2fde:	ad 87       	std	Y+13, r26	; 0x0d
    2fe0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fe2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fe4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fe6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fe8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fea:	20 e0       	ldi	r18, 0x00	; 0
    2fec:	30 e0       	ldi	r19, 0x00	; 0
    2fee:	4a e7       	ldi	r20, 0x7A	; 122
    2ff0:	55 e4       	ldi	r21, 0x45	; 69
    2ff2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ff6:	dc 01       	movw	r26, r24
    2ff8:	cb 01       	movw	r24, r22
    2ffa:	8f 83       	std	Y+7, r24	; 0x07
    2ffc:	98 87       	std	Y+8, r25	; 0x08
    2ffe:	a9 87       	std	Y+9, r26	; 0x09
    3000:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3002:	6f 81       	ldd	r22, Y+7	; 0x07
    3004:	78 85       	ldd	r23, Y+8	; 0x08
    3006:	89 85       	ldd	r24, Y+9	; 0x09
    3008:	9a 85       	ldd	r25, Y+10	; 0x0a
    300a:	20 e0       	ldi	r18, 0x00	; 0
    300c:	30 e0       	ldi	r19, 0x00	; 0
    300e:	40 e8       	ldi	r20, 0x80	; 128
    3010:	5f e3       	ldi	r21, 0x3F	; 63
    3012:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3016:	88 23       	and	r24, r24
    3018:	2c f4       	brge	.+10     	; 0x3024 <MOTOR_CWHALF+0xde>
		__ticks = 1;
    301a:	81 e0       	ldi	r24, 0x01	; 1
    301c:	90 e0       	ldi	r25, 0x00	; 0
    301e:	9e 83       	std	Y+6, r25	; 0x06
    3020:	8d 83       	std	Y+5, r24	; 0x05
    3022:	3f c0       	rjmp	.+126    	; 0x30a2 <MOTOR_CWHALF+0x15c>
	else if (__tmp > 65535)
    3024:	6f 81       	ldd	r22, Y+7	; 0x07
    3026:	78 85       	ldd	r23, Y+8	; 0x08
    3028:	89 85       	ldd	r24, Y+9	; 0x09
    302a:	9a 85       	ldd	r25, Y+10	; 0x0a
    302c:	20 e0       	ldi	r18, 0x00	; 0
    302e:	3f ef       	ldi	r19, 0xFF	; 255
    3030:	4f e7       	ldi	r20, 0x7F	; 127
    3032:	57 e4       	ldi	r21, 0x47	; 71
    3034:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3038:	18 16       	cp	r1, r24
    303a:	4c f5       	brge	.+82     	; 0x308e <MOTOR_CWHALF+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    303c:	6b 85       	ldd	r22, Y+11	; 0x0b
    303e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3040:	8d 85       	ldd	r24, Y+13	; 0x0d
    3042:	9e 85       	ldd	r25, Y+14	; 0x0e
    3044:	20 e0       	ldi	r18, 0x00	; 0
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	40 e2       	ldi	r20, 0x20	; 32
    304a:	51 e4       	ldi	r21, 0x41	; 65
    304c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3050:	dc 01       	movw	r26, r24
    3052:	cb 01       	movw	r24, r22
    3054:	bc 01       	movw	r22, r24
    3056:	cd 01       	movw	r24, r26
    3058:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    305c:	dc 01       	movw	r26, r24
    305e:	cb 01       	movw	r24, r22
    3060:	9e 83       	std	Y+6, r25	; 0x06
    3062:	8d 83       	std	Y+5, r24	; 0x05
    3064:	0f c0       	rjmp	.+30     	; 0x3084 <MOTOR_CWHALF+0x13e>
    3066:	80 e9       	ldi	r24, 0x90	; 144
    3068:	91 e0       	ldi	r25, 0x01	; 1
    306a:	9c 83       	std	Y+4, r25	; 0x04
    306c:	8b 83       	std	Y+3, r24	; 0x03
    306e:	8b 81       	ldd	r24, Y+3	; 0x03
    3070:	9c 81       	ldd	r25, Y+4	; 0x04
    3072:	01 97       	sbiw	r24, 0x01	; 1
    3074:	f1 f7       	brne	.-4      	; 0x3072 <MOTOR_CWHALF+0x12c>
    3076:	9c 83       	std	Y+4, r25	; 0x04
    3078:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    307a:	8d 81       	ldd	r24, Y+5	; 0x05
    307c:	9e 81       	ldd	r25, Y+6	; 0x06
    307e:	01 97       	sbiw	r24, 0x01	; 1
    3080:	9e 83       	std	Y+6, r25	; 0x06
    3082:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3084:	8d 81       	ldd	r24, Y+5	; 0x05
    3086:	9e 81       	ldd	r25, Y+6	; 0x06
    3088:	00 97       	sbiw	r24, 0x00	; 0
    308a:	69 f7       	brne	.-38     	; 0x3066 <MOTOR_CWHALF+0x120>
    308c:	14 c0       	rjmp	.+40     	; 0x30b6 <MOTOR_CWHALF+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    308e:	6f 81       	ldd	r22, Y+7	; 0x07
    3090:	78 85       	ldd	r23, Y+8	; 0x08
    3092:	89 85       	ldd	r24, Y+9	; 0x09
    3094:	9a 85       	ldd	r25, Y+10	; 0x0a
    3096:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    309a:	dc 01       	movw	r26, r24
    309c:	cb 01       	movw	r24, r22
    309e:	9e 83       	std	Y+6, r25	; 0x06
    30a0:	8d 83       	std	Y+5, r24	; 0x05
    30a2:	8d 81       	ldd	r24, Y+5	; 0x05
    30a4:	9e 81       	ldd	r25, Y+6	; 0x06
    30a6:	9a 83       	std	Y+2, r25	; 0x02
    30a8:	89 83       	std	Y+1, r24	; 0x01
    30aa:	89 81       	ldd	r24, Y+1	; 0x01
    30ac:	9a 81       	ldd	r25, Y+2	; 0x02
    30ae:	01 97       	sbiw	r24, 0x01	; 1
    30b0:	f1 f7       	brne	.-4      	; 0x30ae <MOTOR_CWHALF+0x168>
    30b2:	9a 83       	std	Y+2, r25	; 0x02
    30b4:	89 83       	std	Y+1, r24	; 0x01
}

void MOTOR_CWHALF(void) {
	uint8 i;
	const uint8 CW_HM[8]={9,1,3,2,6,4,12,8};
	for (i = 0; i < 8; i++) {
    30b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    30b8:	8f 5f       	subi	r24, 0xFF	; 255
    30ba:	8f 87       	std	Y+15, r24	; 0x0f
    30bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    30be:	88 30       	cpi	r24, 0x08	; 8
    30c0:	08 f4       	brcc	.+2      	; 0x30c4 <MOTOR_CWHALF+0x17e>
    30c2:	4d cf       	rjmp	.-358    	; 0x2f5e <MOTOR_CWHALF+0x18>
		DIO_WRITECHANNEL(PINK, (CW_HM[i]>>1)&1);
		DIO_WRITECHANNEL(YELLOW,(CW_HM[i]>>2)&1);
		DIO_WRITECHANNEL(ORANGE, (CW_HM[i]>>3)&1);
		_delay_ms(10);
	}
}
    30c4:	2f 96       	adiw	r28, 0x0f	; 15
    30c6:	0f b6       	in	r0, 0x3f	; 63
    30c8:	f8 94       	cli
    30ca:	de bf       	out	0x3e, r29	; 62
    30cc:	0f be       	out	0x3f, r0	; 63
    30ce:	cd bf       	out	0x3d, r28	; 61
    30d0:	cf 91       	pop	r28
    30d2:	df 91       	pop	r29
    30d4:	08 95       	ret

000030d6 <__vector_1>:
#include "EXT_INT.h"
#include "Stepper_Motor.h"

#define F_CPU 16000000

ISR (INT0_vect) {
    30d6:	1f 92       	push	r1
    30d8:	0f 92       	push	r0
    30da:	0f b6       	in	r0, 0x3f	; 63
    30dc:	0f 92       	push	r0
    30de:	11 24       	eor	r1, r1
    30e0:	8f 93       	push	r24
    30e2:	9f 93       	push	r25
    30e4:	af 93       	push	r26
    30e6:	bf 93       	push	r27
    30e8:	ef 93       	push	r30
    30ea:	ff 93       	push	r31
    30ec:	df 93       	push	r29
    30ee:	cf 93       	push	r28
    30f0:	cd b7       	in	r28, 0x3d	; 61
    30f2:	de b7       	in	r29, 0x3e	; 62
	TOGGLE_BIT(PORTB, 0);
    30f4:	a8 e3       	ldi	r26, 0x38	; 56
    30f6:	b0 e0       	ldi	r27, 0x00	; 0
    30f8:	e8 e3       	ldi	r30, 0x38	; 56
    30fa:	f0 e0       	ldi	r31, 0x00	; 0
    30fc:	90 81       	ld	r25, Z
    30fe:	81 e0       	ldi	r24, 0x01	; 1
    3100:	89 27       	eor	r24, r25
    3102:	8c 93       	st	X, r24
}
    3104:	cf 91       	pop	r28
    3106:	df 91       	pop	r29
    3108:	ff 91       	pop	r31
    310a:	ef 91       	pop	r30
    310c:	bf 91       	pop	r27
    310e:	af 91       	pop	r26
    3110:	9f 91       	pop	r25
    3112:	8f 91       	pop	r24
    3114:	0f 90       	pop	r0
    3116:	0f be       	out	0x3f, r0	; 63
    3118:	0f 90       	pop	r0
    311a:	1f 90       	pop	r1
    311c:	18 95       	reti

0000311e <__vector_2>:
ISR (INT1_vect) {
    311e:	1f 92       	push	r1
    3120:	0f 92       	push	r0
    3122:	0f b6       	in	r0, 0x3f	; 63
    3124:	0f 92       	push	r0
    3126:	11 24       	eor	r1, r1
    3128:	8f 93       	push	r24
    312a:	9f 93       	push	r25
    312c:	af 93       	push	r26
    312e:	bf 93       	push	r27
    3130:	ef 93       	push	r30
    3132:	ff 93       	push	r31
    3134:	df 93       	push	r29
    3136:	cf 93       	push	r28
    3138:	cd b7       	in	r28, 0x3d	; 61
    313a:	de b7       	in	r29, 0x3e	; 62
	TOGGLE_BIT(PORTB, 1);
    313c:	a8 e3       	ldi	r26, 0x38	; 56
    313e:	b0 e0       	ldi	r27, 0x00	; 0
    3140:	e8 e3       	ldi	r30, 0x38	; 56
    3142:	f0 e0       	ldi	r31, 0x00	; 0
    3144:	90 81       	ld	r25, Z
    3146:	82 e0       	ldi	r24, 0x02	; 2
    3148:	89 27       	eor	r24, r25
    314a:	8c 93       	st	X, r24
}
    314c:	cf 91       	pop	r28
    314e:	df 91       	pop	r29
    3150:	ff 91       	pop	r31
    3152:	ef 91       	pop	r30
    3154:	bf 91       	pop	r27
    3156:	af 91       	pop	r26
    3158:	9f 91       	pop	r25
    315a:	8f 91       	pop	r24
    315c:	0f 90       	pop	r0
    315e:	0f be       	out	0x3f, r0	; 63
    3160:	0f 90       	pop	r0
    3162:	1f 90       	pop	r1
    3164:	18 95       	reti

00003166 <main>:

uint8 i=0;
int main(void) {
    3166:	df 93       	push	r29
    3168:	cf 93       	push	r28
    316a:	cd b7       	in	r28, 0x3d	; 61
    316c:	de b7       	in	r29, 0x3e	; 62
	DIO_INIT();
    316e:	0e 94 18 06 	call	0xc30	; 0xc30 <DIO_INIT>
	EXIT_INIT(FALLING_EDGE);
    3172:	80 e0       	ldi	r24, 0x00	; 0
    3174:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <EXIT_INIT>
	while (1) {
		for(i=0;i<128;i++){
    3178:	10 92 74 01 	sts	0x0174, r1
    317c:	07 c0       	rjmp	.+14     	; 0x318c <main+0x26>
		 MOTOR_CWFULL();}
    317e:	0e 94 01 17 	call	0x2e02	; 0x2e02 <MOTOR_CWFULL>
uint8 i=0;
int main(void) {
	DIO_INIT();
	EXIT_INIT(FALLING_EDGE);
	while (1) {
		for(i=0;i<128;i++){
    3182:	80 91 74 01 	lds	r24, 0x0174
    3186:	8f 5f       	subi	r24, 0xFF	; 255
    3188:	80 93 74 01 	sts	0x0174, r24
    318c:	80 91 74 01 	lds	r24, 0x0174
    3190:	88 23       	and	r24, r24
    3192:	ac f7       	brge	.-22     	; 0x317e <main+0x18>
    3194:	f1 cf       	rjmp	.-30     	; 0x3178 <main+0x12>

00003196 <__prologue_saves__>:
    3196:	2f 92       	push	r2
    3198:	3f 92       	push	r3
    319a:	4f 92       	push	r4
    319c:	5f 92       	push	r5
    319e:	6f 92       	push	r6
    31a0:	7f 92       	push	r7
    31a2:	8f 92       	push	r8
    31a4:	9f 92       	push	r9
    31a6:	af 92       	push	r10
    31a8:	bf 92       	push	r11
    31aa:	cf 92       	push	r12
    31ac:	df 92       	push	r13
    31ae:	ef 92       	push	r14
    31b0:	ff 92       	push	r15
    31b2:	0f 93       	push	r16
    31b4:	1f 93       	push	r17
    31b6:	cf 93       	push	r28
    31b8:	df 93       	push	r29
    31ba:	cd b7       	in	r28, 0x3d	; 61
    31bc:	de b7       	in	r29, 0x3e	; 62
    31be:	ca 1b       	sub	r28, r26
    31c0:	db 0b       	sbc	r29, r27
    31c2:	0f b6       	in	r0, 0x3f	; 63
    31c4:	f8 94       	cli
    31c6:	de bf       	out	0x3e, r29	; 62
    31c8:	0f be       	out	0x3f, r0	; 63
    31ca:	cd bf       	out	0x3d, r28	; 61
    31cc:	09 94       	ijmp

000031ce <__epilogue_restores__>:
    31ce:	2a 88       	ldd	r2, Y+18	; 0x12
    31d0:	39 88       	ldd	r3, Y+17	; 0x11
    31d2:	48 88       	ldd	r4, Y+16	; 0x10
    31d4:	5f 84       	ldd	r5, Y+15	; 0x0f
    31d6:	6e 84       	ldd	r6, Y+14	; 0x0e
    31d8:	7d 84       	ldd	r7, Y+13	; 0x0d
    31da:	8c 84       	ldd	r8, Y+12	; 0x0c
    31dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    31de:	aa 84       	ldd	r10, Y+10	; 0x0a
    31e0:	b9 84       	ldd	r11, Y+9	; 0x09
    31e2:	c8 84       	ldd	r12, Y+8	; 0x08
    31e4:	df 80       	ldd	r13, Y+7	; 0x07
    31e6:	ee 80       	ldd	r14, Y+6	; 0x06
    31e8:	fd 80       	ldd	r15, Y+5	; 0x05
    31ea:	0c 81       	ldd	r16, Y+4	; 0x04
    31ec:	1b 81       	ldd	r17, Y+3	; 0x03
    31ee:	aa 81       	ldd	r26, Y+2	; 0x02
    31f0:	b9 81       	ldd	r27, Y+1	; 0x01
    31f2:	ce 0f       	add	r28, r30
    31f4:	d1 1d       	adc	r29, r1
    31f6:	0f b6       	in	r0, 0x3f	; 63
    31f8:	f8 94       	cli
    31fa:	de bf       	out	0x3e, r29	; 62
    31fc:	0f be       	out	0x3f, r0	; 63
    31fe:	cd bf       	out	0x3d, r28	; 61
    3200:	ed 01       	movw	r28, r26
    3202:	08 95       	ret

00003204 <_exit>:
    3204:	f8 94       	cli

00003206 <__stop_program>:
    3206:	ff cf       	rjmp	.-2      	; 0x3206 <__stop_program>
